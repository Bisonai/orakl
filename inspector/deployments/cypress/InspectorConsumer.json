{
  "address": "0x73f1C3124d1dEbbF9457201C7E4dDd76Ccbd3eF9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregatorRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rrCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "notOwner",
          "type": "address"
        }
      ],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "cancelRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "pair",
          "type": "string"
        }
      ],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "response",
          "type": "uint128"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "pair",
          "type": "string"
        }
      ],
      "name": "requestDataFeed",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "requestRR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "requestRRDirect",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "requestVRF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "refundRecipient",
          "type": "address"
        }
      ],
      "name": "requestVRFDirect",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rrCoordinator",
      "outputs": [
        {
          "internalType": "contract IRequestResponseCoordinator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sRandomWord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponse",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8483d4aa18cf05b1a56b5e790734c37bc9bfe181511eabae2b9632281d36c97d",
  "receipt": {
    "to": null,
    "from": "0x0026De34522627c5DA2B6A5618147A9153c1243A",
    "contractAddress": "0x73f1C3124d1dEbbF9457201C7E4dDd76Ccbd3eF9",
    "transactionIndex": 3,
    "gasUsed": "2143010",
    "logsBloom": "0x
    "blockHash": "0x8111590e768cdbd8ee88a91c89d5e5eaf7409967f95381a5732de160211d0e2f",
    "transactionHash": "0x8483d4aa18cf05b1a56b5e790734c37bc9bfe181511eabae2b9632281d36c97d",
    "logs": [],
    "blockNumber": 143312855,
    "cumulativeGasUsed": "2491503",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x16937CFc59A8Cd126Dc70A75A4bd3b78f690C861",
    "0x159F3BB6609B4C709F15823F3544032942106042",
    "0x3F247f70DC083A2907B8E76635986fd09AA80EFb"
  ],
  "numDeployments": 1,
  "solcInputHash": "6f5d6395b87247a81db201fd9f1eb51c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregatorRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rrCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notOwner\",\"type\":\"address\"}],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pair\",\"type\":\"string\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"response\",\"type\":\"uint128\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pair\",\"type\":\"string\"}],\"name\":\"requestDataFeed\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"requestRR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"requestRRDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestVRF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"}],\"name\":\"requestVRFDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rrCoordinator\",\"outputs\":[{\"internalType\":\"contract IRequestResponseCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sRandomWord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponse\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InspectorConsumer.sol\":\"InspectorConsumer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@bisonai/orakl-contracts/src/v0.1/interfaces/IAggregatorRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IAggregatorRouter {\\n    function aggregatorProxies(string calldata feedName) external view returns (address);\\n\\n    function updateProxy(string calldata feedName, address proxyAddress) external;\\n\\n    function updateProxyBulk(\\n        string[] calldata feedNames,\\n        address[] calldata proxyAddresses\\n    ) external;\\n\\n    function getRoundData(\\n        string calldata feedName,\\n        uint80 roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData(\\n        string calldata feedName\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function proposedGetRoundData(\\n        string calldata feedName,\\n        uint80 roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function proposedLatestRoundData(\\n        string calldata feedName\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function aggregator(string calldata feedName) external view returns (address);\\n\\n    function phaseId(string calldata feedName) external view returns (uint16);\\n\\n    function decimals(string calldata feedName) external view returns (uint8);\\n\\n    function typeAndVersion(string calldata feedName) external view returns (string memory);\\n\\n    function description(string calldata feedName) external view returns (string memory);\\n\\n    function proposedAggregator(string calldata feedName) external view returns (address);\\n\\n    function phaseAggregators(\\n        string calldata feedName,\\n        uint16 phaseId_\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x22ce3824802a4163a120f1c71ef41f949ad7e8e2f71388a1bc53ba4d220adbb9\",\"license\":\"MIT\"},\"@bisonai/orakl-contracts/src/v0.1/interfaces/ICoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface ICoordinatorBase {\\n    // Fee configuration that separates fees based on the number of\\n    // requests created per account. This applies only to [regular]\\n    // account.\\n    struct FeeConfig {\\n        // Flat fee charged per fulfillment in millionths of KLAY\\n        // So fee range is [0, 2^32/10^6].\\n        uint32 fulfillmentFlatFeeKlayPPMTier1;\\n        uint32 fulfillmentFlatFeeKlayPPMTier2;\\n        uint32 fulfillmentFlatFeeKlayPPMTier3;\\n        uint32 fulfillmentFlatFeeKlayPPMTier4;\\n        uint32 fulfillmentFlatFeeKlayPPMTier5;\\n        uint24 reqsForTier2;\\n        uint24 reqsForTier3;\\n        uint24 reqsForTier4;\\n        uint24 reqsForTier5;\\n    }\\n\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting\\n     * after completing the gas measurement\\n     * @param feeConfig fee tier configuration\\n     */\\n    function setConfig(\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        FeeConfig memory feeConfig\\n    ) external;\\n\\n    /**\\n     * @notice Check to see if there exists a request commitment\\n     * consumers for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request\\n     * for the account, false otherwise.\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Get request commitment.\\n     * @param requestId id of request\\n     * @return commmitment value that can be used to determine whether\\n     * a request is fulfilled or not. If `requestId` is valid and\\n     * commitment equals to bytes32(0), the request was fulfilled.\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Canceling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n\\n    /**\\n     * @notice Access address for prepayment associated with\\n     * @notice coordinator.\\n     * @return prepayment address\\n     */\\n    function getPrepaymentAddress() external returns (address);\\n\\n    function estimateFee(\\n        uint64 reqCount,\\n        uint8 numSubmission,\\n        uint32 callbackGasLimit\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6de51eefb1bee236f7a8144f87c06b804f11375672f41543926a960b9d50f8b5\",\"license\":\"MIT\"},\"@bisonai/orakl-contracts/src/v0.1/interfaces/IRequestResponseCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IRequestResponseCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IRequestResponseCoordinator is IRequestResponseCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x7d924dc529b73fd5c60f0a4d972a12377f15c17fc331a82aa5218897f173d46a\",\"license\":\"MIT\"},\"@bisonai/orakl-contracts/src/v0.1/interfaces/IRequestResponseCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/Orakl.sol\\\";\\n\\ninterface IRequestResponseCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint64 accId;\\n        uint8 numSubmission;\\n        uint32 callbackGasLimit;\\n        address sender;\\n        bool isDirectPayment;\\n        bytes32 jobId;\\n    }\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [regular] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param accId - The ID of the account. Must be funded with the\\n     * minimum account balance.\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     @return requestId - A unique * identifier of the request. Can be\\n     used to match a request to a * response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint64 accId,\\n        uint8 numSubmission\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [temporary] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     * @param refundRecipient recipient of an extra $KLAY amount that\\n     * was sent together with service request\\n     * @return requestId - A unique identifier of the request. Can be\\n     * used to match a request to a response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) external payable returns (uint256);\\n\\n    function fulfillDataRequestUint128(\\n        uint256 requestId,\\n        uint128 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestInt256(\\n        uint256 requestId,\\n        int256 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBool(\\n        uint256 requestId,\\n        bool response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestString(\\n        uint256 requestId,\\n        string memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes32(\\n        uint256 requestId,\\n        bytes32 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    /**\\n     * @notice Different jobs specified by jobId have allowed\\n     * different number of of requests for submissions that depends on\\n     * total number of registered oracles.\\n     */\\n    function validateNumSubmission(bytes32 jobId, uint8 numSubmission) external;\\n}\\n\",\"keccak256\":\"0xfa11f2677b8f2ea43e09077e1c18c22c4430c7630604a3ad4213955710b72a03\",\"license\":\"MIT\"},\"@bisonai/orakl-contracts/src/v0.1/interfaces/IVRFCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IVRFCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IVRFCoordinator is IVRFCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x6b0474d5d4482ff306990782da936d88f2ed1d251f9105c2f3f988699a4d42f5\",\"license\":\"MIT\"},\"@bisonai/orakl-contracts/src/v0.1/interfaces/IVRFCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IVRFCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint256 blockNum;\\n        uint64 accId;\\n        uint32 callbackGasLimit;\\n        uint32 numWords;\\n        address sender;\\n    }\\n\\n    /**\\n     * @notice Get configuration relevant for making requests\\n     * @return maxGasLimit global max for request gas limit\\n     * @return sKeyHashes list of registered key hashes\\n     */\\n    function getRequestConfig() external view returns (uint32, bytes32[] memory);\\n\\n    /**\\n     * @notice Request a set of random words using a [regular] account.\\n     * @param keyHash - Corresponds to a particular oracle job which uses\\n     * that key for generating the VRF proof. Different keyHash's have different gas price\\n     * ceilings, so you can select a specific one to bound your maximum per request cost.\\n     * @param accId - The ID of the account. Must be funded\\n     * with the minimum account balance required for the selected keyHash.\\n     * @param callbackGasLimit - How much gas you'd like to receive in your\\n     * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n     * may be slightly less than this amount because of gas used calling the function\\n     * (argument decoding etc.), so you may need to request slightly more than you expect\\n     * to have inside fulfillRandomWords. The acceptable range is\\n     * [0, maxGasLimit]\\n     * @param numWords - The number of uint256 random values you'd like to receive\\n     * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n     * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n     * @return requestId - A unique identifier of the request. Can be used to match\\n     * a request to a response in fulfillRandomWords.\\n     */\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external returns (uint256 requestId);\\n\\n    /**\\n     * @notice Request a set of random words using a [temporary] account.\\n     * @param keyHash - Corresponds to a particular oracle job which uses\\n     * that key for generating the VRF proof. Different keyHash's have different gas price\\n     * ceilings, so you can select a specific one to bound your maximum per request cost.\\n     * @param callbackGasLimit - How much gas you'd like to receive in your\\n     * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n     * may be slightly less than this amount because of gas used calling the function\\n     * (argument decoding etc.), so you may need to request slightly more than you expect\\n     * to have inside fulfillRandomWords. The acceptable range is\\n     * [0, maxGasLimit]\\n     * @param numWords - The number of uint256 random values you'd like to receive\\n     * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n     * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n     * @param refundRecipient recipient of an extra $KLAY amount that\\n     * was sent together with service request\\n     * @return requestId - A unique identifier of the request. Can be used to match\\n     * a request to a response in fulfillRandomWords.\\n     */\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint32 numWords,\\n        address refundRecipient\\n    ) external payable returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x0d8bd0618a35c5cb1424df6f2abbb19c820560a829f5c80997cd7b9e086cbbc1\",\"license\":\"MIT\"},\"@bisonai/orakl-contracts/src/v0.1/libraries/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint256 capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Initializes a new buffer from an existing bytes object.\\n     *      Changes to the buffer may mutate the original value.\\n     * @param b The bytes object to initialize the buffer with.\\n     * @return A new buffer.\\n     */\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Sets buffer length to 0.\\n     * @param buf The buffer to truncate.\\n     * @return The original buffer, for chaining..\\n     */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint256 dest;\\n        uint256 src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(\\n        buffer memory buf,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write the byte at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeUint8(\\n        buffer memory buf,\\n        uint256 off,\\n        uint8 data\\n    ) internal pure returns (buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (left-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes32 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint256 mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeBytes20(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes20 data\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chhaining.\\n     */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeInt(\\n        buffer memory buf,\\n        uint256 off,\\n        uint256 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint256 mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(\\n        buffer memory buf,\\n        uint256 data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0x974280a1114bec25110c9c608e1c6c4dd7666c00e30f831f68b6d8a5b3bde420\",\"license\":\"MIT\"},\"@bisonai/orakl-contracts/src/v0.1/libraries/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/CBORChainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\n\\n// Encoding library for Binary Object Representation\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    // DECLARE TYPES FOR EASIER REFERENCE OF VARIABLE TYPE\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeFixedNumeric(Buffer.buffer memory buf, uint8 major, uint64 value) private pure {\\n        if (value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\\n        if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        }\\n    }\\n\\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\\n        if (value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, uint(value));\\n        } else if (value >= 0) {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(Buffer.buffer memory buf, uint value) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        encodeBytes(buf, abi.encode(value));\\n    }\\n\\n    function encodeSignedBigNum(Buffer.buffer memory buf, int input) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n        encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n    }\\n\\n    function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\",\"keccak256\":\"0x0712ea9c6408a41611eaa5ca843880d7d39c21cfe1dc3efea034bcedf244eae5\",\"license\":\"MIT\"},\"@bisonai/orakl-contracts/src/v0.1/libraries/Orakl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Chainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\nimport {CBOR} from \\\"./CBOR.sol\\\";\\n\\nlibrary Orakl {\\n    uint256 internal constant defaultBufferSize = 256;\\n\\n    using CBOR for Buffer.buffer;\\n\\n    // structure for storing requests done off-chain\\n    struct Request {\\n        bytes32 id;\\n        address callbackAddr;\\n        bytes4 callbackFunc;\\n        uint256 nonce;\\n        Buffer.buffer buf;\\n    }\\n\\n    /**\\n     * @notice Initializes a request\\n     * @dev Sets ID, callback address, and callback function\\n     * @param self The uninitialized request\\n     * @param jobId The Job Specification ID\\n     * @param callbackAddr The callback address\\n     * @param callbackFunc The callback function signature\\n     * @return The initialized request\\n     */\\n    function initialize(\\n        Request memory self,\\n        bytes32 jobId,\\n        address callbackAddr,\\n        bytes4 callbackFunc\\n    ) internal pure returns (Orakl.Request memory) {\\n        Buffer.init(self.buf, defaultBufferSize);\\n        self.id = jobId;\\n        self.callbackAddr = callbackAddr;\\n        self.callbackFunc = callbackFunc;\\n        return self;\\n    }\\n\\n    /**\\n     * @notice sets the data for buffer\\n     * @param _request the initialized request\\n     * @param _data the CBOR data\\n     */\\n    function setBuffer(Request memory _request, bytes memory _data) internal pure {\\n        Buffer.init(_request.buf, _data.length);\\n        Buffer.append(_request.buf, _data);\\n    }\\n\\n    /**\\n     * @notice Adds a string value to the request in a key - value pair format\\n     * @param self - the initalized request\\n     * @param key - the name of the key\\n     * @param value - the string value to add\\n     */\\n    function add(Request memory self, string memory key, string memory value) internal pure {\\n        self.buf.encodeString(key);\\n        self.buf.encodeString(value);\\n    }\\n\\n    /**\\n     * @notice Adds a byte value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the bytes value to add\\n     */\\n    function addBytes(\\n        Request memory _request,\\n        string memory _key,\\n        bytes memory _value\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeBytes(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a Int256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the int256 value to add\\n     */\\n    function addInt(Request memory _request, string memory _key, int256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a UInt256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the uint256 value to add\\n     */\\n    function addUInt(Request memory _request, string memory _key, uint256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeUInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds an array of string value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _values - the array of string value to add\\n     */\\n    function addStringArray(\\n        Request memory _request,\\n        string memory _key,\\n        string[] memory _values\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.startArray();\\n        for (uint256 i; i < _values.length; i++) {\\n            _request.buf.encodeString(_values[i]);\\n        }\\n        _request.buf.endSequence();\\n    }\\n}\\n\",\"keccak256\":\"0xd03570ddd458085535e258f75d684f76b2adbac7fccb718d11977562d4f3101a\",\"license\":\"MIT\"},\"contracts/InspectorConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {InspectorConsumerBase} from \\\"./InspectorConsumerBase.sol\\\";\\nimport {IAggregatorRouter} from \\\"@bisonai/orakl-contracts/src/v0.1/interfaces/IAggregatorRouter.sol\\\";\\nimport {Orakl} from \\\"@bisonai/orakl-contracts/src/v0.1/libraries/Orakl.sol\\\";\\nimport {IVRFCoordinator} from \\\"@bisonai/orakl-contracts/src/v0.1/interfaces/IVRFCoordinator.sol\\\";\\n\\ncontract InspectorConsumer is InspectorConsumerBase{\\n    using Orakl for Orakl.Request;\\n\\n    uint256 public sRandomWord;\\n    uint128 public sResponse;\\n    address private sOwner;\\n\\n    IVRFCoordinator vrfCoordinator;\\n    IAggregatorRouter internal router;\\n\\n    error OnlyOwner(address notOwner);\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != sOwner) {\\n            revert OnlyOwner(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    constructor(address aggregatorRouter, address _rrCoordinator, address _vrfCoordinator)InspectorConsumerBase(_vrfCoordinator, _rrCoordinator){\\n        sOwner = msg.sender;\\n        router = IAggregatorRouter(aggregatorRouter);\\n        vrfCoordinator = IVRFCoordinator(_vrfCoordinator);\\n    }\\n\\n    // Receive remaining payment from requestDataPayment\\n    receive() external payable {}\\n\\n    function requestDataFeed(string calldata pair) public view returns (uint80 roundId, int256 answer){\\n        (\\n            uint80 roundId_,\\n            int256 answer_\\n            , /* uint startedAt */\\n            , /* uint updatedAt */\\n            , /* uint80 answeredInRound */\\n        ) = router.latestRoundData(pair);\\n        return (roundId_, answer_);\\n    }\\n\\n    function decimals(string calldata pair) public view returns (uint8) {\\n        return router.decimals(pair);\\n    }\\n\\n    function requestRR(\\n        uint64 accId,\\n        uint32 callbackGasLimit\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"uint128\\\"));\\n        uint8 numSubmission = 1;\\n\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\\"get\\\", \\\"https://api.coinbase.com/v2/exchange-rates?currency=BTC\\\");\\n        req.add(\\\"path\\\", \\\"data,rates,USDT\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = rrCoordinator.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    function requestRRDirect(\\n        uint32 callbackGasLimit\\n    ) public payable returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"uint128\\\"));\\n        uint8 numSubmission = 1;\\n\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\\"get\\\", \\\"https://api.coinbase.com/v2/exchange-rates?currency=BTC\\\");\\n        req.add(\\\"path\\\", \\\"data,rates,USDT\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = rrCoordinator.requestData{value: msg.value}(\\n            req,\\n            callbackGasLimit,\\n            numSubmission,\\n            address(this)\\n        );\\n    }\\n\\n    function requestVRF(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) public onlyOwner returns (uint256 requestId) {\\n        requestId = vrfCoordinator.requestRandomWords(keyHash, accId, callbackGasLimit, numWords);\\n    }\\n\\n    function requestVRFDirect(\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint32 numWords,\\n        address refundRecipient\\n    ) public payable returns (uint256 requestId) {\\n        requestId = vrfCoordinator.requestRandomWords{value: msg.value}(\\n            keyHash,\\n            callbackGasLimit,\\n            numWords,\\n            refundRecipient\\n        );\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /* requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        // requestId should be checked if it matches the expected request\\n        // Generate random value between 1 and 50.\\n        sRandomWord = (randomWords[0] % 50) + 1;\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, uint128 response) internal override {\\n        sResponse = response;\\n    }\\n\\n    function cancelRequest(uint256 requestId) external onlyOwner {\\n        rrCoordinator.cancelRequest(requestId);\\n    }\\n\\n\\n}\",\"keccak256\":\"0xdddb1d6821ff60a07298c3914b2c14e219b585619d86420db3deffa2fc0e6305\",\"license\":\"MIT\"},\"contracts/InspectorConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {Orakl} from \\\"@bisonai/orakl-contracts/src/v0.1/libraries/Orakl.sol\\\";\\nimport {IRequestResponseCoordinator} from \\\"@bisonai/orakl-contracts/src/v0.1/interfaces/IRequestResponseCoordinator.sol\\\";\\n\\n\\nabstract contract InspectorConsumerBase {\\n    using Orakl for Orakl.Request;\\n\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n\\n    address private immutable vrfCoordinator;\\n    IRequestResponseCoordinator public immutable rrCoordinator;\\n    mapping(bytes32 => bytes4) private sJobIdToFunctionSelector;\\n\\n    constructor(address _vrfCoordinator, address _rrCoordinator) {\\n        vrfCoordinator = _vrfCoordinator;\\n        rrCoordinator = IRequestResponseCoordinator(_rrCoordinator);\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"uint128\\\"))] = rrCoordinator\\n            .fulfillDataRequestUint128\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"int256\\\"))] = rrCoordinator\\n            .fulfillDataRequestInt256\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bool\\\"))] = rrCoordinator\\n            .fulfillDataRequestBool\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"string\\\"))] = rrCoordinator\\n            .fulfillDataRequestString\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes32\\\"))] = rrCoordinator\\n            .fulfillDataRequestBytes32\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes\\\"))] = rrCoordinator\\n            .fulfillDataRequestBytes\\n            .selector;\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n    function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n        if (msg.sender != vrfCoordinator) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n        }\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n\\n    function buildRequest(bytes32 jobId) internal view returns (Orakl.Request memory req) {\\n        return req.initialize(jobId, address(rrCoordinator), sJobIdToFunctionSelector[jobId]);\\n    }\\n\\n    function fulfillDataRequest(uint256 requestId, uint128 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        uint128 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n\\n    modifier verifyRawFulfillment() {\\n        address coordinatorAddress = address(rrCoordinator);\\n        if (msg.sender != coordinatorAddress) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        _;\\n    }\\n}\",\"keccak256\":\"0x56fa1b7005a5063edede0fe3e706537bca136d190b1140041a3c393840171d05\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001a3738038062001a3783398101604081905262000034916200020b565b6001600160a01b03908116608081905291811660a05260408051660ead2dce86264760cb1b602080830191909152825180830360070181526027830184528051908201206000908152808252838120805463ffffffff1990811663a185c35f179091556534b73a191a9b60d11b60478501528451808503602d018152604d8501865280519084012082528183528482208054821663d1bf555c17905563189bdbdb60e21b606d85015284518085036051018152607185018652805190840120825281835284822080548216637961841717905565737472696e6760d01b60918501528451808503607701815260978501865280519084012082528183528482208054821663f30be55117905566313cba32b9999960c91b60b78501528451808503609e01815260be8501865280519084012082528183528482208054821663bf8542a917905564627974657360d81b60de850152845180850360c301815260e3909401855283519383019390932081529081905291909120805490911663c6f3401317905560038054336001600160a01b031991821617909155600580548216949092169390931790556004805490921617905562000255565b80516001600160a01b03811681146200020657600080fd5b919050565b6000806000606084860312156200022157600080fd5b6200022c84620001ee565b92506200023c60208501620001ee565b91506200024c60408501620001ee565b90509250925092565b60805160a051611792620002a56000396000818161025201528181610461015281816105600152818161087501528181610a670152610be101526000818161038301526103c501526117926000f3fe6080604052600436106100cb5760003560e01c80634d04f5fd11610074578063af8764b31161004e578063af8764b31461028c578063ca81b344146102ac578063d7b6f084146102bf57600080fd5b80634d04f5fd146101d65780636d797371146101f6578063a56d1c731461024057600080fd5b80633015394c116100a55780633015394c146101645780633b2b32041461018457806345b9b6fb146101b657600080fd5b80630d495985146100d75780630e5ff9961461011e5780631fe543e31461014257600080fd5b366100d257005b600080fd5b3480156100e357600080fd5b506100f76100f23660046110b1565b6102d2565b6040805169ffffffffffffffffffff90931683526020830191909152015b60405180910390f35b34801561012a57600080fd5b5061013460015481565b604051908152602001610115565b34801561014e57600080fd5b5061016261015d366004611139565b610378565b005b34801561017057600080fd5b5061016261017f366004611203565b610405565b34801561019057600080fd5b506101a461019f3660046110b1565b6104c8565b60405160ff9091168152602001610115565b3480156101c257600080fd5b506101626101d136600461121c565b61055e565b3480156101e257600080fd5b506101346101f1366004611292565b6105ff565b34801561020257600080fd5b5060025461021f906fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff9091168152602001610115565b34801561024c57600080fd5b506102747f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610115565b34801561029857600080fd5b506101346102a73660046112df565b6106e2565b6101346102ba366004611312565b6108fd565b6101346102cd36600461132d565b610ae7565b6005546040517f33f98c770000000000000000000000000000000000000000000000000000000081526000918291829182916001600160a01b03909116906333f98c77906103269089908990600401611388565b60a060405180830381865afa158015610343573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036791906113d1565b509299919850909650505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103f75760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b6104018282610b51565b5050565b6003546001600160a01b0316331461043257604051630543601560e11b81523360048201526024016103ee565b6040517f3015394c000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633015394c90602401600060405180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b5050505050565b6005546040517f3b2b32040000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690633b2b3204906105149086908690600401611388565b602060405180830381865afa158015610531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105559190611421565b90505b92915050565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146105b95760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016103ee565b600280547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8416179055505050565b505050565b6003546000906001600160a01b0316331461062f57604051630543601560e11b81523360048201526024016103ee565b600480546040517f2f34077b00000000000000000000000000000000000000000000000000000000815291820187905267ffffffffffffffff8616602483015263ffffffff8086166044840152841660648301526001600160a01b031690632f34077b906084016020604051808303816000875af11580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d9919061144b565b95945050505050565b6003546000906001600160a01b0316331461071257604051630543601560e11b81523360048201526024016103ee565b604051660ead2dce86264760cb1b602082015260009060270160408051601f19818403018152919052805160209091012090506001600061075283610b8a565b90506107946040518060400160405280600381526020016219d95d60ea1b81525060405180606001604052806037815260200161172660379139839190610c09565b6107fa604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280600f81526020017f646174612c72617465732c55534454000000000000000000000000000000000081525083610c099092919063ffffffff16565b610845604051806040016040528060058152602001640706f7731360dc1b815250604051806040016040528060018152602001600760fb1b81525083610c099092919063ffffffff16565b6040517f752f8c140000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063752f8c14906108b090849089908b90889060040161151f565b6020604051808303816000875af11580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f3919061144b565b9695505050505050565b60008060405160200161091d90660ead2dce86264760cb1b815260070190565b60408051601f19818403018152919052805160209091012090506001600061094483610b8a565b90506109866040518060400160405280600381526020016219d95d60ea1b81525060405180606001604052806037815260200161172660379139839190610c09565b6109ec604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280600f81526020017f646174612c72617465732c55534454000000000000000000000000000000000081525083610c099092919063ffffffff16565b610a37604051806040016040528060058152602001640706f7731360dc1b815250604051806040016040528060018152602001600760fb1b81525083610c099092919063ffffffff16565b6040517fa4dfe92f0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a4dfe92f903490610aa49085908a9088903090600401611561565b60206040518083038185885af1158015610ac2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106d9919061144b565b600480546040517f0f52ffc600000000000000000000000000000000000000000000000000000000815291820186905263ffffffff8086166024840152841660448301526001600160a01b038381166064840152600092911690630f52ffc6903490608401610aa4565b603281600081518110610b6657610b666115a2565b6020026020010151610b7891906115b8565b610b839060016115f0565b6001555050565b610bc86040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b60008281526020819052604090205461055890829084907f00000000000000000000000000000000000000000000000000000000000000009060e01b610c27565b6080830151610c189083610cb2565b60808301516105fa9082610cb2565b610c656040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b610c758560800151610100610cc9565b50509183526001600160a01b031660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b610cbf8260038351610d2e565b6105fa8282610e43565b604080518082019091526060815260006020820152610ce96020836115b8565b15610d1157610cf96020836115b8565b610d04906020611603565b610d0e90836115f0565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611610d5957610d538360e0600585901b168317610e6a565b50505050565b60ff8167ffffffffffffffff1611610d9757610d80836018611fe0600586901b1617610e6a565b50610d538367ffffffffffffffff83166001610e8f565b61ffff8167ffffffffffffffff1611610dd657610dbf836019611fe0600586901b1617610e6a565b50610d538367ffffffffffffffff83166002610e8f565b63ffffffff8167ffffffffffffffff1611610e1757610e0083601a611fe0600586901b1617610e6a565b50610d538367ffffffffffffffff83166004610e8f565b610e2c83601b611fe0600586901b1617610e6a565b50610d538367ffffffffffffffff83166008610e8f565b60408051808201909152606081526000602082015261055583846000015151848551610ebd565b6040805180820190915260608152600060208201526105558384600001515184610fa7565b604080518082019091526060815260006020820152610eb5848560000151518585611002565b949350505050565b6040805180820190915260608152600060208201528251821115610ee057600080fd5b6020850151610eef83866115f0565b1115610f2257610f2285610f1287602001518786610f0d91906115f0565b611083565b610f1d906002611616565b61109a565b600080865180518760208301019350808887011115610f415787860182525b505050602084015b60208410610f815780518252610f606020836115f0565b9150610f6d6020826115f0565b9050610f7a602085611603565b9350610f49565b51815160001960208690036101000a019081169019919091161790525083949350505050565b60408051808201909152606081526000602082015283602001518310610fdc57610fdc8485602001516002610f1d9190611616565b8351805160208583010184815350808503610ff8576001810182525b5093949350505050565b604080518082019091526060815260006020820152602085015161102685846115f0565b111561103a5761103a85610f1286856115f0565b6000600161104a84610100611719565b6110549190611603565b90508551838682010185831982511617815250805184870111156110785783860181525b509495945050505050565b600081831115611094575081610558565b50919050565b81516110a68383610cc9565b50610d538382610e43565b600080602083850312156110c457600080fd5b823567ffffffffffffffff808211156110dc57600080fd5b818501915085601f8301126110f057600080fd5b8135818111156110ff57600080fd5b86602082850101111561111157600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561114c57600080fd5b8235915060208084013567ffffffffffffffff8082111561116c57600080fd5b818601915086601f83011261118057600080fd5b81358181111561119257611192611123565b8060051b604051601f19603f830116810181811085821117156111b7576111b7611123565b6040529182528482019250838101850191898311156111d557600080fd5b938501935b828510156111f3578435845293850193928501926111da565b8096505050505050509250929050565b60006020828403121561121557600080fd5b5035919050565b6000806040838503121561122f57600080fd5b8235915060208301356fffffffffffffffffffffffffffffffff8116811461125657600080fd5b809150509250929050565b803567ffffffffffffffff8116811461127957600080fd5b919050565b803563ffffffff8116811461127957600080fd5b600080600080608085870312156112a857600080fd5b843593506112b860208601611261565b92506112c66040860161127e565b91506112d46060860161127e565b905092959194509250565b600080604083850312156112f257600080fd5b6112fb83611261565b91506113096020840161127e565b90509250929050565b60006020828403121561132457600080fd5b6105558261127e565b6000806000806080858703121561134357600080fd5b843593506113536020860161127e565b92506113616040860161127e565b915060608501356001600160a01b038116811461137d57600080fd5b939692955090935050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b805169ffffffffffffffffffff8116811461127957600080fd5b600080600080600060a086880312156113e957600080fd5b6113f2866113b7565b9450602086015193506040860151925060608601519150611415608087016113b7565b90509295509295909350565b60006020828403121561143357600080fd5b815160ff8116811461144457600080fd5b9392505050565b60006020828403121561145d57600080fd5b5051919050565b80518252600060206001600160a01b038184015116818501527fffffffff00000000000000000000000000000000000000000000000000000000604084015116604085015260608301516060850152608083015160a060808601528051604060a087015280518060e088015260005b818110156114f057828101850151888201610100015284016114d3565b50610100915060008282890101528383015160c088015281601f19601f83011688010194505050505092915050565b6080815260006115326080830187611464565b63ffffffff9590951660208301525067ffffffffffffffff92909216604083015260ff16606090910152919050565b6080815260006115746080830187611464565b63ffffffff9590951660208301525060ff9290921660408301526001600160a01b0316606090910152919050565b634e487b7160e01b600052603260045260246000fd5b6000826115d557634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b80820180821115610558576105586115da565b81810381811115610558576105586115da565b6000816000190483118215151615611630576116306115da565b500290565b600181815b80851115611670578160001904821115611656576116566115da565b8085161561166357918102915b93841c939080029061163a565b509250929050565b60008261168757506001610558565b8161169457506000610558565b81600181146116aa57600281146116b4576116d0565b6001915050610558565b60ff8411156116c5576116c56115da565b50506001821b610558565b5060208310610133831016604e8410600b84101617156116f3575081810a610558565b6116fd8383611635565b8060001904821115611711576117116115da565b029392505050565b6000610555838361167856fe68747470733a2f2f6170692e636f696e626173652e636f6d2f76322f65786368616e67652d72617465733f63757272656e63793d425443a264697066735822122015504e78b3fd5a99331bba01a3f48b1a26025d51b1fcd4cbfb2da560448f538d64736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106100cb5760003560e01c80634d04f5fd11610074578063af8764b31161004e578063af8764b31461028c578063ca81b344146102ac578063d7b6f084146102bf57600080fd5b80634d04f5fd146101d65780636d797371146101f6578063a56d1c731461024057600080fd5b80633015394c116100a55780633015394c146101645780633b2b32041461018457806345b9b6fb146101b657600080fd5b80630d495985146100d75780630e5ff9961461011e5780631fe543e31461014257600080fd5b366100d257005b600080fd5b3480156100e357600080fd5b506100f76100f23660046110b1565b6102d2565b6040805169ffffffffffffffffffff90931683526020830191909152015b60405180910390f35b34801561012a57600080fd5b5061013460015481565b604051908152602001610115565b34801561014e57600080fd5b5061016261015d366004611139565b610378565b005b34801561017057600080fd5b5061016261017f366004611203565b610405565b34801561019057600080fd5b506101a461019f3660046110b1565b6104c8565b60405160ff9091168152602001610115565b3480156101c257600080fd5b506101626101d136600461121c565b61055e565b3480156101e257600080fd5b506101346101f1366004611292565b6105ff565b34801561020257600080fd5b5060025461021f906fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff9091168152602001610115565b34801561024c57600080fd5b506102747f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610115565b34801561029857600080fd5b506101346102a73660046112df565b6106e2565b6101346102ba366004611312565b6108fd565b6101346102cd36600461132d565b610ae7565b6005546040517f33f98c770000000000000000000000000000000000000000000000000000000081526000918291829182916001600160a01b03909116906333f98c77906103269089908990600401611388565b60a060405180830381865afa158015610343573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036791906113d1565b509299919850909650505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103f75760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b6104018282610b51565b5050565b6003546001600160a01b0316331461043257604051630543601560e11b81523360048201526024016103ee565b6040517f3015394c000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633015394c90602401600060405180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b5050505050565b6005546040517f3b2b32040000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690633b2b3204906105149086908690600401611388565b602060405180830381865afa158015610531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105559190611421565b90505b92915050565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146105b95760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016103ee565b600280547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8416179055505050565b505050565b6003546000906001600160a01b0316331461062f57604051630543601560e11b81523360048201526024016103ee565b600480546040517f2f34077b00000000000000000000000000000000000000000000000000000000815291820187905267ffffffffffffffff8616602483015263ffffffff8086166044840152841660648301526001600160a01b031690632f34077b906084016020604051808303816000875af11580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d9919061144b565b95945050505050565b6003546000906001600160a01b0316331461071257604051630543601560e11b81523360048201526024016103ee565b604051660ead2dce86264760cb1b602082015260009060270160408051601f19818403018152919052805160209091012090506001600061075283610b8a565b90506107946040518060400160405280600381526020016219d95d60ea1b81525060405180606001604052806037815260200161172660379139839190610c09565b6107fa604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280600f81526020017f646174612c72617465732c55534454000000000000000000000000000000000081525083610c099092919063ffffffff16565b610845604051806040016040528060058152602001640706f7731360dc1b815250604051806040016040528060018152602001600760fb1b81525083610c099092919063ffffffff16565b6040517f752f8c140000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063752f8c14906108b090849089908b90889060040161151f565b6020604051808303816000875af11580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f3919061144b565b9695505050505050565b60008060405160200161091d90660ead2dce86264760cb1b815260070190565b60408051601f19818403018152919052805160209091012090506001600061094483610b8a565b90506109866040518060400160405280600381526020016219d95d60ea1b81525060405180606001604052806037815260200161172660379139839190610c09565b6109ec604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280600f81526020017f646174612c72617465732c55534454000000000000000000000000000000000081525083610c099092919063ffffffff16565b610a37604051806040016040528060058152602001640706f7731360dc1b815250604051806040016040528060018152602001600760fb1b81525083610c099092919063ffffffff16565b6040517fa4dfe92f0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a4dfe92f903490610aa49085908a9088903090600401611561565b60206040518083038185885af1158015610ac2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106d9919061144b565b600480546040517f0f52ffc600000000000000000000000000000000000000000000000000000000815291820186905263ffffffff8086166024840152841660448301526001600160a01b038381166064840152600092911690630f52ffc6903490608401610aa4565b603281600081518110610b6657610b666115a2565b6020026020010151610b7891906115b8565b610b839060016115f0565b6001555050565b610bc86040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b60008281526020819052604090205461055890829084907f00000000000000000000000000000000000000000000000000000000000000009060e01b610c27565b6080830151610c189083610cb2565b60808301516105fa9082610cb2565b610c656040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b610c758560800151610100610cc9565b50509183526001600160a01b031660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b610cbf8260038351610d2e565b6105fa8282610e43565b604080518082019091526060815260006020820152610ce96020836115b8565b15610d1157610cf96020836115b8565b610d04906020611603565b610d0e90836115f0565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611610d5957610d538360e0600585901b168317610e6a565b50505050565b60ff8167ffffffffffffffff1611610d9757610d80836018611fe0600586901b1617610e6a565b50610d538367ffffffffffffffff83166001610e8f565b61ffff8167ffffffffffffffff1611610dd657610dbf836019611fe0600586901b1617610e6a565b50610d538367ffffffffffffffff83166002610e8f565b63ffffffff8167ffffffffffffffff1611610e1757610e0083601a611fe0600586901b1617610e6a565b50610d538367ffffffffffffffff83166004610e8f565b610e2c83601b611fe0600586901b1617610e6a565b50610d538367ffffffffffffffff83166008610e8f565b60408051808201909152606081526000602082015261055583846000015151848551610ebd565b6040805180820190915260608152600060208201526105558384600001515184610fa7565b604080518082019091526060815260006020820152610eb5848560000151518585611002565b949350505050565b6040805180820190915260608152600060208201528251821115610ee057600080fd5b6020850151610eef83866115f0565b1115610f2257610f2285610f1287602001518786610f0d91906115f0565b611083565b610f1d906002611616565b61109a565b600080865180518760208301019350808887011115610f415787860182525b505050602084015b60208410610f815780518252610f606020836115f0565b9150610f6d6020826115f0565b9050610f7a602085611603565b9350610f49565b51815160001960208690036101000a019081169019919091161790525083949350505050565b60408051808201909152606081526000602082015283602001518310610fdc57610fdc8485602001516002610f1d9190611616565b8351805160208583010184815350808503610ff8576001810182525b5093949350505050565b604080518082019091526060815260006020820152602085015161102685846115f0565b111561103a5761103a85610f1286856115f0565b6000600161104a84610100611719565b6110549190611603565b90508551838682010185831982511617815250805184870111156110785783860181525b509495945050505050565b600081831115611094575081610558565b50919050565b81516110a68383610cc9565b50610d538382610e43565b600080602083850312156110c457600080fd5b823567ffffffffffffffff808211156110dc57600080fd5b818501915085601f8301126110f057600080fd5b8135818111156110ff57600080fd5b86602082850101111561111157600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561114c57600080fd5b8235915060208084013567ffffffffffffffff8082111561116c57600080fd5b818601915086601f83011261118057600080fd5b81358181111561119257611192611123565b8060051b604051601f19603f830116810181811085821117156111b7576111b7611123565b6040529182528482019250838101850191898311156111d557600080fd5b938501935b828510156111f3578435845293850193928501926111da565b8096505050505050509250929050565b60006020828403121561121557600080fd5b5035919050565b6000806040838503121561122f57600080fd5b8235915060208301356fffffffffffffffffffffffffffffffff8116811461125657600080fd5b809150509250929050565b803567ffffffffffffffff8116811461127957600080fd5b919050565b803563ffffffff8116811461127957600080fd5b600080600080608085870312156112a857600080fd5b843593506112b860208601611261565b92506112c66040860161127e565b91506112d46060860161127e565b905092959194509250565b600080604083850312156112f257600080fd5b6112fb83611261565b91506113096020840161127e565b90509250929050565b60006020828403121561132457600080fd5b6105558261127e565b6000806000806080858703121561134357600080fd5b843593506113536020860161127e565b92506113616040860161127e565b915060608501356001600160a01b038116811461137d57600080fd5b939692955090935050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b805169ffffffffffffffffffff8116811461127957600080fd5b600080600080600060a086880312156113e957600080fd5b6113f2866113b7565b9450602086015193506040860151925060608601519150611415608087016113b7565b90509295509295909350565b60006020828403121561143357600080fd5b815160ff8116811461144457600080fd5b9392505050565b60006020828403121561145d57600080fd5b5051919050565b80518252600060206001600160a01b038184015116818501527fffffffff00000000000000000000000000000000000000000000000000000000604084015116604085015260608301516060850152608083015160a060808601528051604060a087015280518060e088015260005b818110156114f057828101850151888201610100015284016114d3565b50610100915060008282890101528383015160c088015281601f19601f83011688010194505050505092915050565b6080815260006115326080830187611464565b63ffffffff9590951660208301525067ffffffffffffffff92909216604083015260ff16606090910152919050565b6080815260006115746080830187611464565b63ffffffff9590951660208301525060ff9290921660408301526001600160a01b0316606090910152919050565b634e487b7160e01b600052603260045260246000fd5b6000826115d557634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b80820180821115610558576105586115da565b81810381811115610558576105586115da565b6000816000190483118215151615611630576116306115da565b500290565b600181815b80851115611670578160001904821115611656576116566115da565b8085161561166357918102915b93841c939080029061163a565b509250929050565b60008261168757506001610558565b8161169457506000610558565b81600181146116aa57600281146116b4576116d0565b6001915050610558565b60ff8411156116c5576116c56115da565b50506001821b610558565b5060208310610133831016604e8410600b84101617156116f3575081810a610558565b6116fd8383611635565b8060001904821115611711576117116115da565b029392505050565b6000610555838361167856fe68747470733a2f2f6170692e636f696e626173652e636f6d2f76322f65786368616e67652d72617465733f63757272656e63793d425443a264697066735822122015504e78b3fd5a99331bba01a3f48b1a26025d51b1fcd4cbfb2da560448f538d64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2015,
        "contract": "contracts/InspectorConsumer.sol:InspectorConsumer",
        "label": "sJobIdToFunctionSelector",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bytes4)"
      },
      {
        "astId": 1656,
        "contract": "contracts/InspectorConsumer.sol:InspectorConsumer",
        "label": "sRandomWord",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1658,
        "contract": "contracts/InspectorConsumer.sol:InspectorConsumer",
        "label": "sResponse",
        "offset": 0,
        "slot": "2",
        "type": "t_uint128"
      },
      {
        "astId": 1660,
        "contract": "contracts/InspectorConsumer.sol:InspectorConsumer",
        "label": "sOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1663,
        "contract": "contracts/InspectorConsumer.sol:InspectorConsumer",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IVRFCoordinator)351"
      },
      {
        "astId": 1666,
        "contract": "contracts/InspectorConsumer.sol:InspectorConsumer",
        "label": "router",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IAggregatorRouter)140"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IAggregatorRouter)140": {
        "encoding": "inplace",
        "label": "contract IAggregatorRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IVRFCoordinator)351": {
        "encoding": "inplace",
        "label": "contract IVRFCoordinator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bytes4)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes4)",
        "numberOfBytes": "32",
        "value": "t_bytes4"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}