generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id   BigInt @id @default(autoincrement()) @map("organization_id")
  name String @unique @db.VarChar(50)

  reporter Reporter[]

  @@map("organizations")
}

model Reporter {
  id             BigInt        @id @default(autoincrement())
  address        String        @unique @db.VarChar(42)
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId BigInt        @map("organization_id")
  contract       Contract[]    @relation(name: "WhitelistTable")
  transaction    Transaction[]

  @@map("reporters")
}

model Contract {
  id                BigInt        @id @default(autoincrement()) @map("contract_id")
  address           String        @unique @db.VarChar(42)
  allowAllFunctions Boolean?      @default(false)
  function          Function[]
  transaction       Transaction[]
  reporter          Reporter[]    @relation(name: "WhitelistTable")

  @@map("contracts")
}

model Function {
  id          BigInt        @id @default(autoincrement())
  name        String        @db.VarChar(100)
  encodedName String        @unique @db.VarChar(10)
  contract    Contract      @relation(fields: [contractId], references: [id])
  contractId  BigInt        @map("contract_id")
  transaction Transaction[]

  @@map("functions")
}

model Transaction {
  id          BigInt    @id @default(autoincrement()) @map("transaction_id")
  from        String    @db.VarChar(42)
  to          String    @db.VarChar(42)
  input       String    @db.VarChar(1024)
  gas         String    @db.VarChar(20)
  value       String    @db.VarChar(20)
  chainId     String    @db.VarChar(20)
  gasPrice    String    @db.VarChar(20)
  nonce       String    @db.VarChar(20)
  v           String    @db.VarChar(66)
  r           String    @db.VarChar(66)
  s           String    @db.VarChar(66)
  rawTx       String    @db.VarChar(1024)
  signedRawTx String?   @db.VarChar(1024)
  succeed     Boolean?
  function    Function? @relation(fields: [functionId], references: [id])
  functionId  BigInt?   @map("function_id")
  contract    Contract? @relation(fields: [contractId], references: [id])
  contractId  BigInt?   @map("contract_id")
  reporter    Reporter? @relation(fields: [reporterId], references: [id])
  reporterId  BigInt?   @map("reporterId")

  @@map("transactions")
}
