version: "3"

volumes:
  pgsql_volume:
    name: pgsql_volume

services:
  deploy-contract:
    build:
      context: .
      dockerfile: dockerfiles/local-data-feed/contracts.Dockerfile
    image: deploy-contract
    volumes:
      - ./contracts/v0.1/deployments:/app/contracts/v0.1/deployments
      - ./contracts/v0.1/migration:/app/contracts/v0.1/migration
      - ./dockerfiles/local-data-feed/tmp:/app/contracts/v0.1/scripts/tmp
      - ./dockerfiles/local-data-feed/scripts/deploy-contracts.sh:/deploy.sh
    command: /deploy.sh
    env_file:
      - ./dockerfiles/local-data-feed/envs/.contracts.env

  postgres:
    image: postgres:latest
    restart: always
    container_name: postgres
    env_file:
      - ./dockerfiles/local-data-feed/envs/.postgres.env
    expose:
      - "5432"
    volumes:
      - pgsql_volume:/var/lib/postgresql/data
      - ./dockerfiles/local-data-feed/scripts/create-schema.sql:/docker-entrypoint-initdb.d/create-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      [
        "bash",
        "-c",
        "rm -rf /var/lib/postgresql/data/* && docker-entrypoint.sh postgres",
      ]
    depends_on:
      deploy-contract:
        condition: service_completed_successfully

  redis:
    image: redis:latest
    container_name: redis
    expose:
      - "6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      deploy-contract:
        condition: service_completed_successfully

  api:
    build:
      context: .
      dockerfile: dockerfiles/orakl-api.Dockerfile
    image: orakl-api
    expose:
      - "3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./dockerfiles/local-data-feed/envs/.api.env
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "curl -s http://api:$${APP_PORT}/api/v1 | grep -q 'Orakl Network API'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  delegator:
    build:
      context: .
      dockerfile: dockerfiles/orakl-delegator.Dockerfile
    image: orakl-delegator
    expose:
      - "3002"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./dockerfiles/local-data-feed/envs/.delegator.env
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "curl -s http://delegator:$${APP_PORT}/api/v1 | grep -q 'Orakl Network Delegator'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  cli-insert:
    build:
      context: .
      dockerfile: dockerfiles/local-data-feed/cli.Dockerfile
    image: cli-insert
    volumes:
      - ./dockerfiles/local-data-feed/tmp:/app/tmp
      - ./dockerfiles/local-data-feed/scripts/cli-insert.sh:/insert.sh
    depends_on:
      api:
        condition: service_healthy
      delegator:
        condition: service_healthy
    command: /insert.sh
    env_file: ./dockerfiles/local-data-feed/envs/.cli.env

  listener:
    build:
      context: .
      dockerfile: dockerfiles/orakl-core.Dockerfile
    image: listener
    depends_on:
      cli-insert:
        condition: service_completed_successfully
    command: ["yarn", "start:listener:data_feed"]
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "curl -s http://listener:$${HEALTH_CHECK_PORT} | grep -q 'ok'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "4000"
    env_file: ./dockerfiles/local-data-feed/envs/.core.env

  worker:
    build:
      context: .
      dockerfile: dockerfiles/orakl-core.Dockerfile
    image: worker
    depends_on:
      cli-insert:
        condition: service_completed_successfully
    command: ["yarn", "start:worker:data_feed"]
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "curl -s http://worker:$${HEALTH_CHECK_PORT} | grep -q 'ok'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "5001"
    env_file: ./dockerfiles/local-data-feed/envs/.core.env

  reporter:
    build:
      context: .
      dockerfile: dockerfiles/orakl-core.Dockerfile
    image: reporter
    depends_on:
      cli-insert:
        condition: service_completed_successfully
    command: ["yarn", "start:reporter:data_feed"]
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "curl -s http://reporter:$${HEALTH_CHECK_PORT} | grep -q 'ok'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "6000"
    env_file: ./dockerfiles/local-data-feed/envs/.core.env

  fetcher:
    build:
      context: .
      dockerfile: dockerfiles/orakl-fetcher.Dockerfile
    image: fetcher
    depends_on:
      cli-insert:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "curl -s http://fetcher:$${APP_PORT}/api/v1 | grep -q 'Orakl Network Fetcher'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "3001"
    env_file: ./dockerfiles/local-data-feed/envs/.fetcher.env

  cli-activate:
    build:
      context: .
      dockerfile: dockerfiles/local-data-feed/cli.Dockerfile
    image: cli-activate
    volumes:
      - ./dockerfiles/local-data-feed/tmp:/app/tmp
      - ./dockerfiles/local-data-feed/scripts/cli-activate.sh:/activate.sh
    depends_on:
      listener:
        condition: service_healthy
      worker:
        condition: service_healthy
      reporter:
        condition: service_healthy
      fetcher:
        condition: service_healthy
    command: /activate.sh
    env_file: ./dockerfiles/local-data-feed/envs/.cli.env
