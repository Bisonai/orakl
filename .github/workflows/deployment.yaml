name: Dispatch Deploy
on:
  workflow_dispatch:
    inputs:
      network:
        description: "Network"
        required: true
        type: choice
        options:
          - "Baobab"
          - "Cypress"
      application:
        description: "Service"
        required: true
        type: choice
        options:
          - "cli"
          - "aggregator"
          - "vrf"
          - "api"
          - "request-response"
          - "delegator"
          - "fetcher"
          - "por"
          - "node"
          - "boot-api"
          - "sentinel"
          - "dal"
      image:
        description: "Image Version"
        required: true
        type: choice
        default: "new"
        options:
          - new
          - node:v0.0.1.20240708.0832.1a4d08d:OraklNode Define new chainhelp...
          - dal:v0.0.1.20240708.0944.4aa3dd7:DAL basic implementation to st...
          - node:v0.0.1.20240708.0954.0d869fa:OraklNode Rollback deviation t...
          - dal:v0.0.1.20240708.1003.920fd73:OraklNode Rollback deviation t...
          - dal:v0.0.1.20240708.1019.8328517:DAL APIKEY from secrets
          - sentinel:v0.0.1.20240709.0109.fa6cdc8:Sentinel remove datafeed redis...
          - sentinel:v0.0.1.20240709.0259.02a3c94:sentinel oversubmission in che...
          - node:v0.0.1.20240709.0426.36beb1a:OraklNode Remove lint  vet fro...
          - node:v0.0.1.20240709.0540.1c4a79b:OraklNode Remove lint  vet fro...
          - dal:v0.0.1.20240709.0802.c7cffb3:OraklNode Remove unused functi...
          - dal:v0.0.1.20240710.0242.a84f50c:DAL Add log for debugging
          - node:v0.0.1.20240710.0520.98648d0:fix type in SubmissionProxy mi...
          - node:v0.0.1.20240710.0739.4a70b71:remove pool integration from a...
          - dal:v0.0.1.20240711.0359.d657755:DAL Use separate db
          - dal:v0.0.1.20240712.0249.40a95d7:Add new option to deployment s...
          - dal:v0.0.1.20240712.0440.f9d9bd8:DAL Add description column to ...
          - node:v0.0.1.20240712.0451.9550617:DAL Add description column to ...
          - sentinel:v0.0.1.20240712.0745.072c71b:update sentinel signer expiry ...
          - sentinel:v0.0.1.20240712.1116.3b29b6c:update sentinel signer expiry ...
          - sentinel:v0.0.1.20240715.0443.6e850cb:fix oversubmission query times...
          - node:v0.0.1.20240715.0528.483b568:fix oversubmission query times...
          - node:v0.0.1.20240715.0716.fa898e4:Update auto tag doc generation
          - boot-api:v0.0.1.20240715.0740.ee80d13:Update auto tag doc generation
          - boot-api:v0.0.1.20240715.0937.9b09599:BootAPI Keep boot host alive
          - boot-api:v0.0.1.20240716.0831.b209fc6:Sentinel Group feed checks by ...
          - sentinel:v0.0.1.20240716.0840.291dccb:Sentinel Group feed checks by ...
          - sentinel:v0.0.1.20240716.0851.ac68b4d:Add logs for peer checks
          - node:v0.0.1.20240716.1308.a16e0b7:OraklNode Hotfix filter out in...
          - sentinel:v0.0.1.20240717.0112.b9db8f2:Sentinel Remove deprecated res...
          - dal:v0.0.1.20240717.0230.301dcf3:Sentinel Remove deprecated res...
          - dal:v0.0.1.20240717.0302.8b595e7:add ctx logs to dal middleware
jobs:
  prepare-taskflow:
    name: Prepare
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.image != 'new' }}
    outputs:
      service: ${{ steps.tag.outputs.service }}
      version: ${{ steps.package.outputs.version }}
      tag_date: ${{ steps.taskflow-tag.outputs.tag_date }}
      tag_git_hash: ${{ steps.taskflow-tag.outputs.tag_git_hash}}
      img_tag: ${{ steps.taskflow-tag.outputs.img_tag }}
    steps:
      - uses: actions/checkout@master
      - name: extract tags
        id: taskflow-tag
        run: "IMAGE_TAG=\"${{ github.event.inputs.image }}\"\nVERSION=$(echo \"${IMAGE_TAG}\" | cut -d':' -f2 | cut -d'.' -f1-3)\necho $VERSION\nTAG_DATE=$(echo \"${IMAGE_TAG}\" | cut -d':' -f2 | cut -d'.' -f4-5)\necho $TAG_DATE\nTAG_GIT_HASH=$(echo \"${IMAGE_TAG}\" | cut -d':' -f2 | cut -d'.' -f6)\nTAG=\"${VERSION}.${TAG_DATE}.${TAG_GIT_HASH}\"\necho $TAG;          \necho $TAG_GIT_HASH\necho \"version=${VERSION}\" >> $GITHUB_OUTPUT\necho \"tag_date=${TAG_DATE}\" >> $GITHUB_OUTPUT\necho \"tag_git_hash=${TAG_GIT_HASH}\" >> $GITHUB_OUTPUT\necho \"img_tag=${TAG}\" >> $GITHUB_OUTPUT\n"
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_PAT }}
  taskflow-image-update:
    name: Update Image Tag
    needs: [prepare-taskflow]
    uses: ./.github/workflows/update.image-tag.yaml
    with:
      network: "baobab"
      build: false
      project-name: ${{ github.event.inputs.application }}
      version: ${{ needs.prepare-taskflow.outputs.version }}
      image-tag: ${{ needs.prepare-taskflow.outputs.img_tag}}
      tag_date: ${{ needs.prepare-taskflow.outputs.tag_date }}
      tag_git_hash: ${{ needs.prepare-taskflow.outputs.tag_git_hash }}
    secrets:
      PAT: ${{ secrets.PAT }}
    if: ${{ github.event.inputs.image != 'new' }}
  post-slack-taskflow-image-upload:
    name: Slack message for image upload
    needs: [prepare-taskflow, taskflow-image-update]
    uses: ./.github/workflows/post.slack.yaml
    with:
      status: "Success"
      slack-message: "${{ github.event.inputs.network }} ${{ github.event.inputs.application }}* : *${{ needs.prepare-taskflow.outputs.img_tag}}* is updated"
      channel: "orakl-notification"
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    if: ${{ github.event.inputs.network == 'Baobab' && success() }}
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.network == 'Baobab' && github.event.inputs.image == 'new' }}
    outputs:
      tag_date: ${{ steps.tag.outputs.date }}
      tag_git_hash: ${{ steps.tag.outputs.git_hash }}
      service: ${{ steps.tag.outputs.service }}
      ecr_url: ${{ steps.tag.outputs.ecr_url }}
      version: ${{ steps.package.outputs.version }}
    steps:
      - uses: actions/checkout@master
      - name: get time tag
        id: tag
        run: "# Get the date and git hash\necho \"date=$(date +'%Y%m%d.%H%M')\" >> $GITHUB_OUTPUT\necho \"git_hash=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT\nservice=\"${{ github.event.inputs.application }}\"\n# Set the service name\nif [[ \"$service\" == \"vrf\" || \"$service\" == \"request-response\" || \"$service\" == \"aggregator\" ]]; then\n  service=\"core\"\nfi            \n# Set the ecr url\necho \"service=$service\" >> $GITHUB_OUTPUT\necho \"ecr_url=public.ecr.aws/bisonai/orakl-${service}\" >> $GITHUB_OUTPUT\n# end of the script\n"
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_PAT }}
      - name: get package version
        id: package
        run: "# Get the version from the package.json file\nif [[ \"${{ steps.tag.outputs.service }}\" == \"cli\" || \"${{ steps.tag.outputs.service }}\" == \"fetcher\" || \"${{ steps.tag.outputs.service }}\" == \"core\" ]]; then  \necho \"version=$(node -p -e \"require('./\"${{ steps.tag.outputs.service }}\"/package.json').version\")\" >> $GITHUB_OUTPUT\nelse \n  if [[ \"${{ steps.tag.outputs.service }}\" == \"boot-api\" || \"${{ steps.tag.outputs.service }}\" == \"node\" || \"${{ steps.tag.outputs.service }}\" == \"por\" || \"${{ steps.tag.outputs.service }}\" == \"dal\" ]]; then    \n    version=$(cat ./node/.version)  \n  else\n    version=$(cat ./${{ steps.tag.outputs.service }}/.version)\n  fi\n  echo \"version=$version\" >> $GITHUB_OUTPUT\nfi\n"
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_PAT }}
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event.inputs.network == 'Baobab' && github.event.inputs.image == 'new' }}
    permissions:
      id-token: write
      contents: read
    outputs:
      img_tag: ${{ steps.img-tag.outputs.img_tag }}
    steps:
      - uses: actions/checkout@master
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.3"
          check-latest: true
          cache-dependency-path: |
            ./${{ needs.prepare.outputs.service }}/go.sum
            ./${{ needs.prepare.outputs.service }}/go.mod
        if: ${{ needs.prepare.outputs.service != 'core' || needs.prepare.outputs.service != 'fetcher' || needs.prepare.outputs.service != 'cli' }}
      - name: docker build ${{ github.event.inputs.application }}
        run: SERVICE_NAME=orakl-${{ needs.prepare.outputs.service }} docker compose -f docker-compose.build.yaml build
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.ROLE_ARN }}
      - name: login to amazon ecr
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: publish image to ecr
        run: |
          docker tag orakl-${{ needs.prepare.outputs.service }} ${{ needs.prepare.outputs.ecr_url }}:latest
          docker push ${{ needs.prepare.outputs.ecr_url }}:latest
          docker tag ${{ needs.prepare.outputs.ecr_url }}:latest ${{ needs.prepare.outputs.ecr_url }}:v${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }}
          docker push ${{ needs.prepare.outputs.ecr_url }}:v${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }}
      - name: image tag output
        id: img-tag
        run: echo "img_tag=v${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }}" >> $GITHUB_OUTPUT
  post-slack-image-upload:
    name: Slack message for image upload
    needs: [prepare, build]
    uses: ./.github/workflows/post.slack.yaml
    with:
      status: "Success"
      slack-message: "${{ github.event.inputs.network }} ${{ github.event.inputs.application }}* : *${{ needs.prepare.outputs.service }}* ${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }} is uploaded"
      channel: "orakl-notification"
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    if: ${{ github.event.inputs.network == 'Baobab' && success() }}
  image-update:
    name: Update image tag
    needs: [prepare, build]
    uses: ./.github/workflows/update.image-tag.yaml
    with:
      network: "baobab"
      project-name: ${{ github.event.inputs.application }}
      version: ${{ needs.prepare.outputs.version }}
      image-tag: ${{ needs.build.outputs.img_tag }}
      tag_date: ${{ needs.prepare.outputs.tag_date }}
      tag_git_hash: ${{ needs.prepare.outputs.tag_git_hash }}
    secrets:
      PAT: ${{ secrets.PAT }}
    if: ${{ github.event.inputs.network == 'Baobab' && github.event.inputs.image == 'new' }}
  post-slack-baobab-tag-update-success:
    name: Post slack message for tag update success
    needs: [prepare, build, image-update]
    uses: ./.github/workflows/post.slack.yaml
    with:
      status: "Success"
      slack-message: "${{ github.event.inputs.network }} *${{ github.event.inputs.application }}* : *${{ needs.prepare.outputs.service }}* new image tag ${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }} is updated"
      channel: "orakl-notification"
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    if: ${{ github.event.inputs.network == 'Baobab' && github.event.inputs.image == 'new' && success() }}
  cypress-image-update:
    name: cypress image update
    uses: ./.github/workflows/update.image-tag.yaml
    with:
      network: "cypress"
      project-name: ${{ github.event.inputs.application }}
    secrets:
      PAT: ${{ secrets.PAT }}
    if: ${{ github.event.inputs.network == 'Cypress' }}
  post-slack-cypress-tag-update-success:
    name: Post slack message for tag update success
    needs: [cypress-image-update]
    uses: ./.github/workflows/post.slack.yaml
    with:
      status: "Success"
      slack-message: "${{ github.event.inputs.network }} *${{ github.event.inputs.application }}* is updated"
      channel: "orakl-notification"
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    if: ${{ github.event.inputs.network == 'Cypress' && success() }}
  post-slack-tag-update-failure:
    name: Post to a slack message for tag update failure
    needs: [prepare, build, image-update]
    uses: ./.github/workflows/post.slack.yaml
    with:
      status: "Failed"
      slack-message: "${{ github.event.inputs.network }} *${{ github.event.inputs.application }}* git action failed"
      channel: "orakl-notification"
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    if: ${{ github.event.inputs.network == 'Baobab' && github.event.inputs.image == 'new' && failure() }}
  update-workflow-and-readme:
    name: Update Workflow and README
    needs: [prepare, build, image-update]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pages: write
    outputs:
      new_tag: ${{ steps.tag_info.outputs.NEW_TAG }}
      pr_title: ${{ steps.pr_info.outputs.PR_TITLE }}
      truncated_title: ${{ steps.truncate_pr_title.outputs.truncated_title }}
    steps:
      - uses: actions/checkout@master
        with:
          token: ${{ secrets.WORKFLOW_PAT }}
      - name: get latest merged pull request
        id: pr_info
        run: |
          pr=$(gh pr list --state merged --json title -L 1)
          PR_TITLE=$(echo $pr | jq -r '.[0].title')
          PR_TITLE=$(echo "${PR_TITLE}" | sed 's/\\/\\\\/g; s/"/\\"/g; s/`/\\`/g; s/\$/\\$/g')
          PR_TITLE=$(echo "${PR_TITLE}" | sed 's/[^a-zA-Z0-9 ]//g')
          echo "PR_TITLE=${PR_TITLE}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_PAT }}
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
      - name: truncate PR title
        id: truncate_pr_title
        run: "TR_PR_TITLE=\"${{steps.pr_info.outputs.PR_TITLE}}\"\nMAX_LENGTH=30\nif [ ${#TR_PR_TITLE} -gt $MAX_LENGTH ]; then\n  TRUNCATED_TITLE=\"${TR_PR_TITLE:0:$MAX_LENGTH}...\"\nelse\n  TRUNCATED_TITLE=\"$TR_PR_TITLE\"\nfi\necho \"truncated_title=$TRUNCATED_TITLE\" >> $GITHUB_OUTPUT  \n"
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_PAT }}
      - name: Update Workflow Dispatch Options
        id: tag_info
        run: |
          # Update the deployment.yaml file with the new tag
          git pull

          # Get the new tag
          NEW_TAG=${{ github.event.inputs.application }}:${{ needs.build.outputs.img_tag }}
          TAG_WITH_DESCRIPTION="${NEW_TAG}:${{ steps.truncate_pr_title.outputs.truncated_title }}"

          CURRENT_OPTIONS=$(yq e '.on.workflow_dispatch.inputs.image.options[]' .github/workflows/deployment.yaml | sed 's/^- //')
          OPTIONS_ARRAY=()

          while IFS= read -r line; do
            OPTIONS_ARRAY+=("\"$line\"")
          done <<< "$CURRENT_OPTIONS"

          OPTIONS_ARRAY+=("\"$TAG_WITH_DESCRIPTION\"")

          yq eval 'del(.on.workflow_dispatch.inputs.image.options)' -i .github/workflows/deployment.yaml

          for option in "${OPTIONS_ARRAY[@]}"; do
            yq eval ".on.workflow_dispatch.inputs.image.options += [$option]" -i .github/workflows/deployment.yaml
          done

          git add .github/workflows/deployment.yaml
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_PAT }}
      - name: Update TAGS with Latest PR Info
        run: |
          echo "- **${{ github.event.inputs.application }}** ${{ needs.build.outputs.img_tag }} <br> *\`PR\`*: ${{steps.truncate_pr_title.outputs.truncated_title}} <br><br> " >> TAGS.md
          git add TAGS.md
      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.WORKFLOW_PAT }}
          branch: ${{ github.ref }}
          repository: ${{ github.repository }}
  post-slack-pr-update:
    name: Post to a slack message for tag update failure
    needs: [prepare, build, image-update, update-workflow-and-readme]
    uses: ./.github/workflows/post.image.slack.yaml
    with:
      slack-message: "\\n \\n> *Service:* ${{ github.event.inputs.application }} \\n> *Version:* ${{ needs.build.outputs.img_tag }} \\n> *PR:* ${{ needs.update-workflow-and-readme.outputs.pr_title}}"
      channel: "orakl-images"
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    if: ${{ success() }}
