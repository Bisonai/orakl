name: Core Deploy to Amazon ECR

on:
  push:
    branches:
      - master
    paths:
      - "core/package.json"
  workflow_dispatch:

env:
  ecr_url: public.ecr.aws/bisonai/orakl-core

jobs:
  prepare:
    name: Prepare Build
    runs-on: ubuntu-latest

    outputs:
      tag_date: ${{ steps.tag.outputs.date }}
      tag_git_hash: ${{ steps.tag.outputs.git_hash }}
      version: ${{ steps.package.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Get time TAG
        id: tag
        run: |
          echo "date=$(date +'%Y%m%d.%H%M')" >> $GITHUB_OUTPUT
          echo "git_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get package version
        id: package
        run: |
          echo "version=$(node -p -e "require('./core/package.json').version")" >> $GITHUB_OUTPUT

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: prepare

    permissions:
      id-token: write
      contents: read

    outputs:
      tag_date: ${{ steps.tag.outputs.date }}
      tag_git_hash: ${{ steps.tag.outputs.git_hash }}
      img_tag: ${{ steps.img-tag.outputs.img_tag }}

    steps:
      - uses: actions/checkout@v3

      - name: Docker build orakl-core
        run: SERVICE_NAME=orakl-core docker compose -f docker-compose.build.yaml build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Publish Image to ECR(core)
        run: |
          docker tag orakl-core ${{ env.ecr_url }}:latest
          docker push ${{ env.ecr_url }}:latest
          docker tag ${{ env.ecr_url }}:latest ${{ env.ecr_url }}:v${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }}
          docker push ${{ env.ecr_url }}:v${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }}

      - name: Image Tag Output
        id: img-tag
        run: echo "img_tag=v${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }}" >> $GITHUB_OUTPUT

  post-slack-image-upload:
    name: Post to a Slack ECR Image Upload
    needs: [prepare, build]
    uses: ./.github/workflows/post.slack.yaml
    with:
      status: "Success"
      slack-message: "*aggregator* v${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }} is uploaded to ECR"
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}  
    if: ${{ success() }}   

  image-update-aggregator:
    name: Update Image Tag
    needs: [prepare, build]
    uses: ./.github/workflows/update.image-tag.yaml
    with:
      project-name: "aggregator"
      version: ${{ needs.prepare.outputs.version }}
      image-tag: ${{ needs.build.outputs.img_tag }}
      tag_date: ${{ needs.prepare.outputs.tag_date }}
      tag_git_hash: ${{ needs.prepare.outputs.tag_git_hash }}
    secrets:
      PAT: ${{ secrets.PAT }}

  post-slack-tag-update-success-aggregator:
    name: Post to a Slack Helm Chart Image Tag Update
    needs: [prepare, build, image-update-aggregator]
    uses: ./.github/workflows/post.slack.yaml
    if: ${{ success() }}
    with:
      status: "Success"
      slack-message: "*aggregator* new image tag v${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }} is updated in Orakl Helm Charts"
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 

  image-update-vrf:
    name: Update Image Tag
    needs: [prepare, build]
    uses: ./.github/workflows/update.image-tag.yaml
    with:
      project-name: "vrf"
      version: ${{ needs.prepare.outputs.version }}
      image-tag: ${{ needs.build.outputs.img_tag }}
      tag_date: ${{ needs.prepare.outputs.tag_date }}
      tag_git_hash: ${{ needs.prepare.outputs.tag_git_hash }}
    secrets:
      PAT: ${{ secrets.PAT }}      

  post-slack-tag-update-success-vrf:
    name: Post to a Slack Helm Chart Image Tag Update
    needs: [prepare, build, image-update-vrf]
    uses: ./.github/workflows/post.slack.yaml
    if: ${{ success() }}
    with:
      status: "Success"
      slack-message: "*vrf* new image tag v${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }} is updated in Orakl Helm Charts"
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}   

  image-update-rr:
    name: Update Image Tag
    needs: [prepare, build]
    uses: ./.github/workflows/update.image-tag.yaml
    with:
      project-name: "request-response"
      version: ${{ needs.prepare.outputs.version }}
      image-tag: ${{ needs.build.outputs.img_tag }}
      tag_date: ${{ needs.prepare.outputs.tag_date }}
      tag_git_hash: ${{ needs.prepare.outputs.tag_git_hash }}
    secrets:
      PAT: ${{ secrets.PAT }}    

  post-slack-tag-update-success-rr:
    name: Post to a Slack Helm Chart Image Tag Update
    needs: [prepare, build, image-update-rr]
    uses: ./.github/workflows/post.slack.yaml
    if: ${{ success() }}
    with:
      status: "Success"
      slack-message: "*request-response* new image tag v${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }} is updated in Orakl Helm Charts"
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}        

  post-slack-tag-update-failure:
    name: Post to a Slack Helm Chart Image Tag Update Failure
    needs: [prepare, build, image-update-aggregator, image-update-vrf, image-update-rr]
    if: ${{ failure() }}
    uses: ./.github/workflows/post.slack.yaml
    with:
      status: "Failed"
      slack-message: "Failed to update image tag for *cli* v${{ needs.prepare.outputs.version }}.${{ needs.prepare.outputs.tag_date }}.${{ needs.prepare.outputs.tag_git_hash }} in Orakl Helm Charts"
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}         