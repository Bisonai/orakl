{
  "address": "0x3882Dd4ab0f70eEB5157C463dFE23214bCB2BB63",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "notOwner",
          "type": "address"
        }
      ],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract IRequestResponseCoordinator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "response",
          "type": "uint128"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "response",
          "type": "int256"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "response",
          "type": "string"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "response",
          "type": "bool"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "response",
          "type": "bytes32"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataBool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataBytes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataBytes32",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataInt256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataString",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataUint128",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseInt256",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseUint128",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe805b47ee6838d4b8eaa092c97aeee13667170b50bf32a9e06ec5825c4354244",
  "receipt": {
    "to": null,
    "from": "0xa195bE68Bd37EBFfB056279Dc3d236fAa6F23670",
    "contractAddress": "0x3882Dd4ab0f70eEB5157C463dFE23214bCB2BB63",
    "transactionIndex": 0,
    "gasUsed": "2082296",
    "logsBloom": "0x
    "blockHash": "0x9ea15e03eb75688c73e8ce18dacc5525002a41a95f97d8667bf0cc6bbb8d82e2",
    "transactionHash": "0xe805b47ee6838d4b8eaa092c97aeee13667170b50bf32a9e06ec5825c4354244",
    "logs": [],
    "blockNumber": 4425664,
    "cumulativeGasUsed": "2082296",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf22Ad573cf6d8036975ca83f4E9Cda16d0C4583F"
  ],
  "numDeployments": 2,
  "solcInputHash": "8916b0a6296a8f1eff24721c6bc5a8c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notOwner\",\"type\":\"address\"}],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract IRequestResponseCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"response\",\"type\":\"uint128\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"response\",\"type\":\"int256\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"response\",\"type\":\"bytes32\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataBool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataBytes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataBytes32\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataInt256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataString\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataUint128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseInt256\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseUint128\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/mocks/L2RequestResponseConsumerMock.sol\":\"L2RequestResponseConsumerMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"src/v0.1/RequestResponseConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/IRequestResponseCoordinator.sol\\\";\\n\\nabstract contract RequestResponseConsumerBase {\\n    using Orakl for Orakl.Request;\\n\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n\\n    mapping(bytes32 => bytes4) private sJobIdToFunctionSelector;\\n    IRequestResponseCoordinator public immutable COORDINATOR;\\n\\n    /**\\n     * @param _requestResponseCoordinator address of RequestResponseCoordinator contract\\n     */\\n    constructor(address _requestResponseCoordinator) {\\n        COORDINATOR = IRequestResponseCoordinator(_requestResponseCoordinator);\\n\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"uint128\\\"))] = COORDINATOR\\n            .fulfillDataRequestUint128\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"int256\\\"))] = COORDINATOR\\n            .fulfillDataRequestInt256\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bool\\\"))] = COORDINATOR\\n            .fulfillDataRequestBool\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"string\\\"))] = COORDINATOR\\n            .fulfillDataRequestString\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes32\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes32\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes\\n            .selector;\\n    }\\n\\n    /**\\n     * @notice Build a request using the Orakl library\\n     * @param jobId the job specification ID that the request is created for\\n     * @return req request in memory\\n     */\\n    function buildRequest(bytes32 jobId) internal view returns (Orakl.Request memory req) {\\n        return req.initialize(jobId, address(COORDINATOR), sJobIdToFunctionSelector[jobId]);\\n    }\\n\\n    modifier verifyRawFulfillment() {\\n        address coordinatorAddress = address(COORDINATOR);\\n        if (msg.sender != coordinatorAddress) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x067ffce4a5c64d0af5f1d0d4de4055d3746a2e1ed960fcee800f67b7fe85b61a\",\"license\":\"MIT\"},\"src/v0.1/RequestResponseConsumerFulfill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./RequestResponseConsumerBase.sol\\\";\\n\\nabstract contract RequestResponseConsumerFulfillUint128 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, uint128 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        uint128 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillInt256 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, int256 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        int256 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBool is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bool response) internal virtual;\\n\\n    function rawFulfillDataRequest(uint256 requestId, bool response) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillString is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, string memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        string memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBytes32 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes32 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes32 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBytes is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\",\"keccak256\":\"0x05d2cb95518c33778101579ab9a90853eebb005a9c64639ee8dd947fa5302edd\",\"license\":\"MIT\"},\"src/v0.1/interfaces/ICoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface ICoordinatorBase {\\n    // Fee configuration that separates fees based on the number of\\n    // requests created per account. This applies only to [regular]\\n    // account.\\n    struct FeeConfig {\\n        // Flat fee charged per fulfillment in millionths of KLAY\\n        // So fee range is [0, 2^32/10^6].\\n        uint32 fulfillmentFlatFeeKlayPPMTier1;\\n        uint32 fulfillmentFlatFeeKlayPPMTier2;\\n        uint32 fulfillmentFlatFeeKlayPPMTier3;\\n        uint32 fulfillmentFlatFeeKlayPPMTier4;\\n        uint32 fulfillmentFlatFeeKlayPPMTier5;\\n        uint24 reqsForTier2;\\n        uint24 reqsForTier3;\\n        uint24 reqsForTier4;\\n        uint24 reqsForTier5;\\n    }\\n\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting\\n     * after completing the gas measurement\\n     * @param feeConfig fee tier configuration\\n     */\\n    function setConfig(\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        FeeConfig memory feeConfig\\n    ) external;\\n\\n    /**\\n     * @notice Check to see if there exists a request commitment\\n     * consumers for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request\\n     * for the account, false otherwise.\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Get request commitment.\\n     * @param requestId id of request\\n     * @return commmitment value that can be used to determine whether\\n     * a request is fulfilled or not. If `requestId` is valid and\\n     * commitment equals to bytes32(0), the request was fulfilled.\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Canceling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n\\n    /**\\n     * @notice Access address for prepayment associated with\\n     * @notice coordinator.\\n     * @return prepayment address\\n     */\\n    function getPrepaymentAddress() external returns (address);\\n\\n    function estimateFee(\\n        uint64 reqCount,\\n        uint8 numSubmission,\\n        uint32 callbackGasLimit\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6de51eefb1bee236f7a8144f87c06b804f11375672f41543926a960b9d50f8b5\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IL2Endpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"../libraries/Orakl.sol\\\";\\n\\ninterface IL2Endpoint {\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external returns (uint256);\\n\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint64 accId,\\n        uint8 numSubmission\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5a7db5672d640416290b31a08862df3f6bf4aca31e4de73d00f104d99be9f069\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IRequestResponseCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IRequestResponseCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IRequestResponseCoordinator is IRequestResponseCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x7d924dc529b73fd5c60f0a4d972a12377f15c17fc331a82aa5218897f173d46a\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IRequestResponseCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/Orakl.sol\\\";\\n\\ninterface IRequestResponseCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint64 accId;\\n        uint8 numSubmission;\\n        uint32 callbackGasLimit;\\n        address sender;\\n        bool isDirectPayment;\\n        bytes32 jobId;\\n    }\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [regular] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param accId - The ID of the account. Must be funded with the\\n     * minimum account balance.\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     @return requestId - A unique * identifier of the request. Can be\\n     used to match a request to a * response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint64 accId,\\n        uint8 numSubmission\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [temporary] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     * @param refundRecipient recipient of an extra $KLAY amount that\\n     * was sent together with service request\\n     * @return requestId - A unique identifier of the request. Can be\\n     * used to match a request to a response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) external payable returns (uint256);\\n\\n    function fulfillDataRequestUint128(\\n        uint256 requestId,\\n        uint128 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestInt256(\\n        uint256 requestId,\\n        int256 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBool(\\n        uint256 requestId,\\n        bool response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestString(\\n        uint256 requestId,\\n        string memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes32(\\n        uint256 requestId,\\n        bytes32 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    /**\\n     * @notice Different jobs specified by jobId have allowed\\n     * different number of of requests for submissions that depends on\\n     * total number of registered oracles.\\n     */\\n    function validateNumSubmission(bytes32 jobId, uint8 numSubmission) external;\\n}\\n\",\"keccak256\":\"0xfa11f2677b8f2ea43e09077e1c18c22c4430c7630604a3ad4213955710b72a03\",\"license\":\"MIT\"},\"src/v0.1/libraries/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint256 capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Initializes a new buffer from an existing bytes object.\\n     *      Changes to the buffer may mutate the original value.\\n     * @param b The bytes object to initialize the buffer with.\\n     * @return A new buffer.\\n     */\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Sets buffer length to 0.\\n     * @param buf The buffer to truncate.\\n     * @return The original buffer, for chaining..\\n     */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint256 dest;\\n        uint256 src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(\\n        buffer memory buf,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write the byte at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeUint8(\\n        buffer memory buf,\\n        uint256 off,\\n        uint8 data\\n    ) internal pure returns (buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (left-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes32 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint256 mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeBytes20(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes20 data\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chhaining.\\n     */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeInt(\\n        buffer memory buf,\\n        uint256 off,\\n        uint256 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint256 mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(\\n        buffer memory buf,\\n        uint256 data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0x974280a1114bec25110c9c608e1c6c4dd7666c00e30f831f68b6d8a5b3bde420\",\"license\":\"MIT\"},\"src/v0.1/libraries/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/CBORChainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\n\\n// Encoding library for Binary Object Representation\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    // DECLARE TYPES FOR EASIER REFERENCE OF VARIABLE TYPE\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeFixedNumeric(Buffer.buffer memory buf, uint8 major, uint64 value) private pure {\\n        if (value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\\n        if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        }\\n    }\\n\\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\\n        if (value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, uint(value));\\n        } else if (value >= 0) {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(Buffer.buffer memory buf, uint value) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        encodeBytes(buf, abi.encode(value));\\n    }\\n\\n    function encodeSignedBigNum(Buffer.buffer memory buf, int input) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n        encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n    }\\n\\n    function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\",\"keccak256\":\"0x0712ea9c6408a41611eaa5ca843880d7d39c21cfe1dc3efea034bcedf244eae5\",\"license\":\"MIT\"},\"src/v0.1/libraries/Orakl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Chainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\nimport {CBOR} from \\\"./CBOR.sol\\\";\\n\\nlibrary Orakl {\\n    uint256 internal constant defaultBufferSize = 256;\\n\\n    using CBOR for Buffer.buffer;\\n\\n    // structure for storing requests done off-chain\\n    struct Request {\\n        bytes32 id;\\n        address callbackAddr;\\n        bytes4 callbackFunc;\\n        uint256 nonce;\\n        Buffer.buffer buf;\\n    }\\n\\n    /**\\n     * @notice Initializes a request\\n     * @dev Sets ID, callback address, and callback function\\n     * @param self The uninitialized request\\n     * @param jobId The Job Specification ID\\n     * @param callbackAddr The callback address\\n     * @param callbackFunc The callback function signature\\n     * @return The initialized request\\n     */\\n    function initialize(\\n        Request memory self,\\n        bytes32 jobId,\\n        address callbackAddr,\\n        bytes4 callbackFunc\\n    ) internal pure returns (Orakl.Request memory) {\\n        Buffer.init(self.buf, defaultBufferSize);\\n        self.id = jobId;\\n        self.callbackAddr = callbackAddr;\\n        self.callbackFunc = callbackFunc;\\n        return self;\\n    }\\n\\n    /**\\n     * @notice sets the data for buffer\\n     * @param _request the initialized request\\n     * @param _data the CBOR data\\n     */\\n    function setBuffer(Request memory _request, bytes memory _data) internal pure {\\n        Buffer.init(_request.buf, _data.length);\\n        Buffer.append(_request.buf, _data);\\n    }\\n\\n    /**\\n     * @notice Adds a string value to the request in a key - value pair format\\n     * @param self - the initalized request\\n     * @param key - the name of the key\\n     * @param value - the string value to add\\n     */\\n    function add(Request memory self, string memory key, string memory value) internal pure {\\n        self.buf.encodeString(key);\\n        self.buf.encodeString(value);\\n    }\\n\\n    /**\\n     * @notice Adds a byte value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the bytes value to add\\n     */\\n    function addBytes(\\n        Request memory _request,\\n        string memory _key,\\n        bytes memory _value\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeBytes(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a Int256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the int256 value to add\\n     */\\n    function addInt(Request memory _request, string memory _key, int256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a UInt256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the uint256 value to add\\n     */\\n    function addUInt(Request memory _request, string memory _key, uint256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeUInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds an array of string value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _values - the array of string value to add\\n     */\\n    function addStringArray(\\n        Request memory _request,\\n        string memory _key,\\n        string[] memory _values\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.startArray();\\n        for (uint256 i; i < _values.length; i++) {\\n            _request.buf.encodeString(_values[i]);\\n        }\\n        _request.buf.endSequence();\\n    }\\n}\\n\",\"keccak256\":\"0xd03570ddd458085535e258f75d684f76b2adbac7fccb718d11977562d4f3101a\",\"license\":\"MIT\"},\"src/v0.1/mocks/L2RequestResponseConsumerMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../RequestResponseConsumerFulfill.sol\\\";\\nimport \\\"../RequestResponseConsumerBase.sol\\\";\\nimport \\\"../interfaces/IL2Endpoint.sol\\\";\\n\\ncontract L2RequestResponseConsumerMock is\\n    RequestResponseConsumerFulfillUint128,\\n    RequestResponseConsumerFulfillInt256,\\n    RequestResponseConsumerFulfillBool,\\n    RequestResponseConsumerFulfillString,\\n    RequestResponseConsumerFulfillBytes32,\\n    RequestResponseConsumerFulfillBytes\\n{\\n    using Orakl for Orakl.Request;\\n    uint128 public sResponseUint128;\\n    int256 public sResponseInt256;\\n    bool public sResponseBool;\\n    string public sResponseString;\\n    bytes32 public sResponseBytes32;\\n    bytes public sResponseBytes;\\n    address private sOwner;\\n\\n    IL2Endpoint L2ENDPOINT;\\n\\n    error OnlyOwner(address notOwner);\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != sOwner) {\\n            revert OnlyOwner(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    constructor(address l2Endpoint) RequestResponseConsumerBase(l2Endpoint) {\\n        sOwner = msg.sender;\\n        L2ENDPOINT = IL2Endpoint(l2Endpoint);\\n    }\\n\\n    // Receive remaining payment from requestRandomWordsPayment\\n    receive() external payable {}\\n\\n    //request for uint128\\n    function requestDataUint128(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"uint128\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        //change here for your expected data\\n        req.add(\\n            \\\"get\\\",\\n            \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=KLAY&tsyms=USD\\\"\\n        );\\n        req.add(\\\"path\\\", \\\"RAW,KLAY,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n        requestId = L2ENDPOINT.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    // request for int256\\n    function requestDataInt256(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"int256\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        //change here for your expected data\\n        req.add(\\n            \\\"get\\\",\\n            \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=KLAY&tsyms=USD\\\"\\n        );\\n        req.add(\\\"path\\\", \\\"RAW,KLAY,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = L2ENDPOINT.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    // request for bool\\n    function requestDataBool(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bool\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\n            \\\"get\\\",\\n            \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=KLAY&tsyms=USD\\\"\\n        );\\n        req.add(\\\"path\\\", \\\"RAW,KLAY,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = L2ENDPOINT.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    // request for string\\n    function requestDataString(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"string\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\n            \\\"get\\\",\\n            \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=KLAY&tsyms=USD\\\"\\n        );\\n        req.add(\\\"path\\\", \\\"RAW,KLAY,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = L2ENDPOINT.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    // request for bytes32\\n    function requestDataBytes32(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bytes32\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\n            \\\"get\\\",\\n            \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=KLAY&tsyms=USD\\\"\\n        );\\n        req.add(\\\"path\\\", \\\"RAW,KLAY,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = L2ENDPOINT.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    // request for bytes\\n    function requestDataBytes(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bytes\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\n            \\\"get\\\",\\n            \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=KLAY&tsyms=USD\\\"\\n        );\\n        req.add(\\\"path\\\", \\\"RAW,KLAY,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = L2ENDPOINT.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, uint128 response) internal override {\\n        sResponseUint128 = response;\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, int256 response) internal override {\\n        sResponseInt256 = response;\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, bool response) internal override {\\n        sResponseBool = response;\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, string memory response) internal override {\\n        sResponseString = response;\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, bytes32 response) internal override {\\n        sResponseBytes32 = response;\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, bytes memory response) internal override {\\n        sResponseBytes = response;\\n    }\\n}\\n\",\"keccak256\":\"0xcf0204ecbfad04fd0b25ca4c045278f2fad6945a0a31a15acdb27f991860428d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161199438038061199483398101604081905261002f916101d4565b6001600160a01b0316608081905260408051660ead2dce86264760cb1b6020808301919091528251808303600790810182526027840185528151918301919091206000908152808352848120805463ffffffff1990811663a185c35f179091556534b73a191a9b60d11b60478601528551808603602d018152604d8601875280519085012082528184528582208054821663d1bf555c17905563189bdbdb60e21b606d86015285518086036051018152607186018752805190850120825281845285822080548216637961841717905565737472696e6760d01b60918601528551808603607701815260978601875280519085012082528184528582208054821663f30be55117905566313cba32b9999960c91b60b78601528551808603609e01815260be8601875280519085012082528184528582208054821663bf8542a917905564627974657360d81b60de860152855180860360c301815260e39095018652845194840194909420815291829052929020805490911663c6f340131790558054336001600160a01b031991821617909155600880549091169091179055610204565b6000602082840312156101e657600080fd5b81516001600160a01b03811681146101fd57600080fd5b9392505050565b608051611744610250600039600081816102170152818161071e015281816107f9015281816108f90152818161095b01528181610a8801528181610b5a0152610c1101526117446000f3fe6080604052600436106101485760003560e01c80635215b9d8116100c05780638708211111610074578063cd9a4e2911610059578063cd9a4e2914610386578063efcb1e79146103a6578063f40b4def146103f057600080fd5b8063870821111461034657806390d95efc1461036657600080fd5b806379b15008116100a557806379b15008146102f05780637b3d2ce91461031057806386314c7a1461033057600080fd5b80635215b9d8146102b05780636e2acda0146102d057600080fd5b806334ed9593116101175780633b68dad0116100fc5780633b68dad01461025157806343ff5be11461026657806345b9b6fb1461029057600080fd5b806334ed9593146101e55780633b2bcbf11461020557600080fd5b8063144eb1e81461015457806314f5c3831461017f5780631569e5d6146101a357806319e2cd2f146101c357600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b50610169610410565b604051610176919061114c565b60405180910390f35b34801561018b57600080fd5b5061019560025481565b604051908152602001610176565b3480156101af57600080fd5b506101956101be36600461115f565b61049e565b3480156101cf57600080fd5b506101e36101de366004611252565b61071c565b005b3480156101f157600080fd5b5061019561020036600461115f565b610786565b34801561021157600080fd5b506102397f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610176565b34801561025d57600080fd5b506101696107ea565b34801561027257600080fd5b506003546102809060ff1681565b6040519015158152602001610176565b34801561029c57600080fd5b506101e36102ab3660046112ad565b6107f7565b3480156102bc57600080fd5b506101956102cb36600461115f565b610893565b3480156102dc57600080fd5b506101e36102eb3660046112f2565b6108f7565b3480156102fc57600080fd5b506101e361030b366004611252565b610959565b34801561031c57600080fd5b5061019561032b36600461115f565b6109be565b34801561033c57600080fd5b5061019560055481565b34801561035257600080fd5b5061019561036136600461115f565b610a22565b34801561037257600080fd5b506101e3610381366004611314565b610a86565b34801561039257600080fd5b506101956103a136600461115f565b610af4565b3480156103b257600080fd5b506001546103cf906fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff9091168152602001610176565b3480156103fc57600080fd5b506101e361040b3660046112f2565b610b58565b6006805461041d9061133e565b80601f01602080910402602001604051908101604052809291908181526020018280546104499061133e565b80156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b505050505081565b6007546000906001600160a01b031633146104d357604051630543601560e11b81523360048201526024015b60405180910390fd5b6040517f696e74323536000000000000000000000000000000000000000000000000000060208201526000906026015b604051602081830303815290604052805190602001209050600061052682610bba565b90506105826040518060400160405280600381526020017f67657400000000000000000000000000000000000000000000000000000000008152506040518060800160405280604a81526020016116c5604a9139839190610c3f565b6106016040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506040518060400160405280601281526020017f5241572c4b4c41592c5553442c5052494345000000000000000000000000000081525083610c3f9092919063ffffffff16565b6106806040518060400160405280600581526020017f706f7731300000000000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525083610c3f9092919063ffffffff16565b6008546040517f752f8c140000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063752f8c14906106cf90849089908b908a90600401611372565b6020604051808303816000875af11580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190611430565b9695505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146107775760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b6107818383610c5d565b505050565b6007546000906001600160a01b031633146107b657604051630543601560e11b81523360048201526024016104ca565b6040517f75696e74313238000000000000000000000000000000000000000000000000006020820152600090602701610503565b6004805461041d9061133e565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146108525760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b600180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8416179055505050565b6007546000906001600160a01b031633146108c357604051630543601560e11b81523360048201526024016104ca565b6040517f626f6f6c000000000000000000000000000000000000000000000000000000006020820152600090602401610503565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146109525760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b5060025550565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146109b45760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b6107818383610c69565b6007546000906001600160a01b031633146109ee57604051630543601560e11b81523360048201526024016104ca565b6040517f62797465730000000000000000000000000000000000000000000000000000006020820152600090602501610503565b6007546000906001600160a01b03163314610a5257604051630543601560e11b81523360048201526024016104ca565b6040517f62797465733332000000000000000000000000000000000000000000000000006020820152600090602701610503565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610ae15760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b6003805460ff1916831515179055505050565b6007546000906001600160a01b03163314610b2457604051630543601560e11b81523360048201526024016104ca565b6040517f737472696e6700000000000000000000000000000000000000000000000000006020820152600090602601610503565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610bb35760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b5060055550565b610bf86040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b600082815260208190526040902054610c3990829084907f00000000000000000000000000000000000000000000000000000000000000009060e01b610c75565b92915050565b6080830151610c4e9083610d00565b60808301516107819082610d00565b60066107818282611497565b60046107818282611497565b610cb36040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b610cc38560800151610100610d17565b50509183526001600160a01b031660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b610d0d8260038351610d7c565b6107818282610e91565b604080518082019091526060815260006020820152610d37602083611557565b15610d5f57610d47602083611557565b610d5290602061158f565b610d5c90836115a2565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611610da757610da18360e0600585901b168317610ebf565b50505050565b60ff8167ffffffffffffffff1611610de557610dce836018611fe0600586901b1617610ebf565b50610da18367ffffffffffffffff83166001610ee4565b61ffff8167ffffffffffffffff1611610e2457610e0d836019611fe0600586901b1617610ebf565b50610da18367ffffffffffffffff83166002610ee4565b63ffffffff8167ffffffffffffffff1611610e6557610e4e83601a611fe0600586901b1617610ebf565b50610da18367ffffffffffffffff83166004610ee4565b610e7a83601b611fe0600586901b1617610ebf565b50610da18367ffffffffffffffff83166008610ee4565b604080518082019091526060815260006020820152610eb883846000015151848551610f12565b9392505050565b604080518082019091526060815260006020820152610eb88384600001515184610ffc565b604080518082019091526060815260006020820152610f0a848560000151518585611057565b949350505050565b6040805180820190915260608152600060208201528251821115610f3557600080fd5b6020850151610f4483866115a2565b1115610f7757610f7785610f6787602001518786610f6291906115a2565b6110d8565b610f729060026115b5565b6110ef565b600080865180518760208301019350808887011115610f965787860182525b505050602084015b60208410610fd65780518252610fb56020836115a2565b9150610fc26020826115a2565b9050610fcf60208561158f565b9350610f9e565b51815160001960208690036101000a019081169019919091161790525083949350505050565b60408051808201909152606081526000602082015283602001518310611031576110318485602001516002610f7291906115b5565b835180516020858301018481535080850361104d576001810182525b5093949350505050565b604080518082019091526060815260006020820152602085015161107b85846115a2565b111561108f5761108f85610f6786856115a2565b6000600161109f846101006116b8565b6110a9919061158f565b90508551838682010185831982511617815250805184870111156110cd5783860181525b509495945050505050565b6000818311156110e9575081610c39565b50919050565b81516110fb8383610d17565b50610da18382610e91565b6000815180845260005b8181101561112c57602081850181015186830182015201611110565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610eb86020830184611106565b60008060006060848603121561117457600080fd5b833567ffffffffffffffff8116811461118c57600080fd5b9250602084013563ffffffff811681146111a557600080fd5b9150604084013560ff811681146111bb57600080fd5b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156111f7576111f76111c6565b604051601f8501601f19908116603f0116810190828211818310171561121f5761121f6111c6565b8160405280935085815286868601111561123857600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561126557600080fd5b82359150602083013567ffffffffffffffff81111561128357600080fd5b8301601f8101851361129457600080fd5b6112a3858235602084016111dc565b9150509250929050565b600080604083850312156112c057600080fd5b8235915060208301356fffffffffffffffffffffffffffffffff811681146112e757600080fd5b809150509250929050565b6000806040838503121561130557600080fd5b50508035926020909101359150565b6000806040838503121561132757600080fd5b82359150602083013580151581146112e757600080fd5b600181811c9082168061135257607f821691505b6020821081036110e957634e487b7160e01b600052602260045260246000fd5b60808152845160808201526001600160a01b0360208601511660a08201527fffffffff0000000000000000000000000000000000000000000000000000000060408601511660c0820152606085015160e08201526000608086015160a0610100840152805160406101208501526113ed610160850182611106565b602092830151610140860152925061140e91840190508663ffffffff169052565b67ffffffffffffffff8416604083015260ff8316606083015295945050505050565b60006020828403121561144257600080fd5b5051919050565b601f82111561078157600081815260208120601f850160051c810160208610156114705750805b601f850160051c820191505b8181101561148f5782815560010161147c565b505050505050565b815167ffffffffffffffff8111156114b1576114b16111c6565b6114c5816114bf845461133e565b84611449565b602080601f8311600181146114fa57600084156114e25750858301515b600019600386901b1c1916600185901b17855561148f565b600085815260208120601f198616915b828110156115295788860151825594840194600190910190840161150a565b50858210156115475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008261157457634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c3957610c39611579565b80820180821115610c3957610c39611579565b60008160001904831182151516156115cf576115cf611579565b500290565b600181815b8085111561160f5781600019048211156115f5576115f5611579565b8085161561160257918102915b93841c93908002906115d9565b509250929050565b60008261162657506001610c39565b8161163357506000610c39565b816001811461164957600281146116535761166f565b6001915050610c39565b60ff84111561166457611664611579565b50506001821b610c39565b5060208310610133831016604e8410600b8410161715611692575081810a610c39565b61169c83836115d4565b80600019048211156116b0576116b0611579565b029392505050565b6000610eb8838361161756fe68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963656d756c746966756c6c3f6673796d733d4b4c4159267473796d733d555344a26469706673582212207b7942253db0e3022185fd95e53d63fc03c6e9dec4af1b095b866a8621bd45d264736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106101485760003560e01c80635215b9d8116100c05780638708211111610074578063cd9a4e2911610059578063cd9a4e2914610386578063efcb1e79146103a6578063f40b4def146103f057600080fd5b8063870821111461034657806390d95efc1461036657600080fd5b806379b15008116100a557806379b15008146102f05780637b3d2ce91461031057806386314c7a1461033057600080fd5b80635215b9d8146102b05780636e2acda0146102d057600080fd5b806334ed9593116101175780633b68dad0116100fc5780633b68dad01461025157806343ff5be11461026657806345b9b6fb1461029057600080fd5b806334ed9593146101e55780633b2bcbf11461020557600080fd5b8063144eb1e81461015457806314f5c3831461017f5780631569e5d6146101a357806319e2cd2f146101c357600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b50610169610410565b604051610176919061114c565b60405180910390f35b34801561018b57600080fd5b5061019560025481565b604051908152602001610176565b3480156101af57600080fd5b506101956101be36600461115f565b61049e565b3480156101cf57600080fd5b506101e36101de366004611252565b61071c565b005b3480156101f157600080fd5b5061019561020036600461115f565b610786565b34801561021157600080fd5b506102397f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610176565b34801561025d57600080fd5b506101696107ea565b34801561027257600080fd5b506003546102809060ff1681565b6040519015158152602001610176565b34801561029c57600080fd5b506101e36102ab3660046112ad565b6107f7565b3480156102bc57600080fd5b506101956102cb36600461115f565b610893565b3480156102dc57600080fd5b506101e36102eb3660046112f2565b6108f7565b3480156102fc57600080fd5b506101e361030b366004611252565b610959565b34801561031c57600080fd5b5061019561032b36600461115f565b6109be565b34801561033c57600080fd5b5061019560055481565b34801561035257600080fd5b5061019561036136600461115f565b610a22565b34801561037257600080fd5b506101e3610381366004611314565b610a86565b34801561039257600080fd5b506101956103a136600461115f565b610af4565b3480156103b257600080fd5b506001546103cf906fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff9091168152602001610176565b3480156103fc57600080fd5b506101e361040b3660046112f2565b610b58565b6006805461041d9061133e565b80601f01602080910402602001604051908101604052809291908181526020018280546104499061133e565b80156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b505050505081565b6007546000906001600160a01b031633146104d357604051630543601560e11b81523360048201526024015b60405180910390fd5b6040517f696e74323536000000000000000000000000000000000000000000000000000060208201526000906026015b604051602081830303815290604052805190602001209050600061052682610bba565b90506105826040518060400160405280600381526020017f67657400000000000000000000000000000000000000000000000000000000008152506040518060800160405280604a81526020016116c5604a9139839190610c3f565b6106016040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506040518060400160405280601281526020017f5241572c4b4c41592c5553442c5052494345000000000000000000000000000081525083610c3f9092919063ffffffff16565b6106806040518060400160405280600581526020017f706f7731300000000000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525083610c3f9092919063ffffffff16565b6008546040517f752f8c140000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063752f8c14906106cf90849089908b908a90600401611372565b6020604051808303816000875af11580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190611430565b9695505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146107775760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b6107818383610c5d565b505050565b6007546000906001600160a01b031633146107b657604051630543601560e11b81523360048201526024016104ca565b6040517f75696e74313238000000000000000000000000000000000000000000000000006020820152600090602701610503565b6004805461041d9061133e565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146108525760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b600180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8416179055505050565b6007546000906001600160a01b031633146108c357604051630543601560e11b81523360048201526024016104ca565b6040517f626f6f6c000000000000000000000000000000000000000000000000000000006020820152600090602401610503565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146109525760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b5060025550565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146109b45760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b6107818383610c69565b6007546000906001600160a01b031633146109ee57604051630543601560e11b81523360048201526024016104ca565b6040517f62797465730000000000000000000000000000000000000000000000000000006020820152600090602501610503565b6007546000906001600160a01b03163314610a5257604051630543601560e11b81523360048201526024016104ca565b6040517f62797465733332000000000000000000000000000000000000000000000000006020820152600090602701610503565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610ae15760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b6003805460ff1916831515179055505050565b6007546000906001600160a01b03163314610b2457604051630543601560e11b81523360048201526024016104ca565b6040517f737472696e6700000000000000000000000000000000000000000000000000006020820152600090602601610503565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610bb35760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044016104ca565b5060055550565b610bf86040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b600082815260208190526040902054610c3990829084907f00000000000000000000000000000000000000000000000000000000000000009060e01b610c75565b92915050565b6080830151610c4e9083610d00565b60808301516107819082610d00565b60066107818282611497565b60046107818282611497565b610cb36040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b610cc38560800151610100610d17565b50509183526001600160a01b031660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b610d0d8260038351610d7c565b6107818282610e91565b604080518082019091526060815260006020820152610d37602083611557565b15610d5f57610d47602083611557565b610d5290602061158f565b610d5c90836115a2565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611610da757610da18360e0600585901b168317610ebf565b50505050565b60ff8167ffffffffffffffff1611610de557610dce836018611fe0600586901b1617610ebf565b50610da18367ffffffffffffffff83166001610ee4565b61ffff8167ffffffffffffffff1611610e2457610e0d836019611fe0600586901b1617610ebf565b50610da18367ffffffffffffffff83166002610ee4565b63ffffffff8167ffffffffffffffff1611610e6557610e4e83601a611fe0600586901b1617610ebf565b50610da18367ffffffffffffffff83166004610ee4565b610e7a83601b611fe0600586901b1617610ebf565b50610da18367ffffffffffffffff83166008610ee4565b604080518082019091526060815260006020820152610eb883846000015151848551610f12565b9392505050565b604080518082019091526060815260006020820152610eb88384600001515184610ffc565b604080518082019091526060815260006020820152610f0a848560000151518585611057565b949350505050565b6040805180820190915260608152600060208201528251821115610f3557600080fd5b6020850151610f4483866115a2565b1115610f7757610f7785610f6787602001518786610f6291906115a2565b6110d8565b610f729060026115b5565b6110ef565b600080865180518760208301019350808887011115610f965787860182525b505050602084015b60208410610fd65780518252610fb56020836115a2565b9150610fc26020826115a2565b9050610fcf60208561158f565b9350610f9e565b51815160001960208690036101000a019081169019919091161790525083949350505050565b60408051808201909152606081526000602082015283602001518310611031576110318485602001516002610f7291906115b5565b835180516020858301018481535080850361104d576001810182525b5093949350505050565b604080518082019091526060815260006020820152602085015161107b85846115a2565b111561108f5761108f85610f6786856115a2565b6000600161109f846101006116b8565b6110a9919061158f565b90508551838682010185831982511617815250805184870111156110cd5783860181525b509495945050505050565b6000818311156110e9575081610c39565b50919050565b81516110fb8383610d17565b50610da18382610e91565b6000815180845260005b8181101561112c57602081850181015186830182015201611110565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610eb86020830184611106565b60008060006060848603121561117457600080fd5b833567ffffffffffffffff8116811461118c57600080fd5b9250602084013563ffffffff811681146111a557600080fd5b9150604084013560ff811681146111bb57600080fd5b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156111f7576111f76111c6565b604051601f8501601f19908116603f0116810190828211818310171561121f5761121f6111c6565b8160405280935085815286868601111561123857600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561126557600080fd5b82359150602083013567ffffffffffffffff81111561128357600080fd5b8301601f8101851361129457600080fd5b6112a3858235602084016111dc565b9150509250929050565b600080604083850312156112c057600080fd5b8235915060208301356fffffffffffffffffffffffffffffffff811681146112e757600080fd5b809150509250929050565b6000806040838503121561130557600080fd5b50508035926020909101359150565b6000806040838503121561132757600080fd5b82359150602083013580151581146112e757600080fd5b600181811c9082168061135257607f821691505b6020821081036110e957634e487b7160e01b600052602260045260246000fd5b60808152845160808201526001600160a01b0360208601511660a08201527fffffffff0000000000000000000000000000000000000000000000000000000060408601511660c0820152606085015160e08201526000608086015160a0610100840152805160406101208501526113ed610160850182611106565b602092830151610140860152925061140e91840190508663ffffffff169052565b67ffffffffffffffff8416604083015260ff8316606083015295945050505050565b60006020828403121561144257600080fd5b5051919050565b601f82111561078157600081815260208120601f850160051c810160208610156114705750805b601f850160051c820191505b8181101561148f5782815560010161147c565b505050505050565b815167ffffffffffffffff8111156114b1576114b16111c6565b6114c5816114bf845461133e565b84611449565b602080601f8311600181146114fa57600084156114e25750858301515b600019600386901b1c1916600185901b17855561148f565b600085815260208120601f198616915b828110156115295788860151825594840194600190910190840161150a565b50858210156115475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008261157457634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c3957610c39611579565b80820180821115610c3957610c39611579565b60008160001904831182151516156115cf576115cf611579565b500290565b600181815b8085111561160f5781600019048211156115f5576115f5611579565b8085161561160257918102915b93841c93908002906115d9565b509250929050565b60008261162657506001610c39565b8161163357506000610c39565b816001811461164957600281146116535761166f565b6001915050610c39565b60ff84111561166457611664611579565b50506001821b610c39565b5060208310610133831016604e8410600b8410161715611692575081810a610c39565b61169c83836115d4565b80600019048211156116b0576116b0611579565b029392505050565b6000610eb8838361161756fe68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963656d756c746966756c6c3f6673796d733d4b4c4159267473796d733d555344a26469706673582212207b7942253db0e3022185fd95e53d63fc03c6e9dec4af1b095b866a8621bd45d264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9225,
        "contract": "src/v0.1/mocks/L2RequestResponseConsumerMock.sol:L2RequestResponseConsumerMock",
        "label": "sJobIdToFunctionSelector",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bytes4)"
      },
      {
        "astId": 18435,
        "contract": "src/v0.1/mocks/L2RequestResponseConsumerMock.sol:L2RequestResponseConsumerMock",
        "label": "sResponseUint128",
        "offset": 0,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 18437,
        "contract": "src/v0.1/mocks/L2RequestResponseConsumerMock.sol:L2RequestResponseConsumerMock",
        "label": "sResponseInt256",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 18439,
        "contract": "src/v0.1/mocks/L2RequestResponseConsumerMock.sol:L2RequestResponseConsumerMock",
        "label": "sResponseBool",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 18441,
        "contract": "src/v0.1/mocks/L2RequestResponseConsumerMock.sol:L2RequestResponseConsumerMock",
        "label": "sResponseString",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 18443,
        "contract": "src/v0.1/mocks/L2RequestResponseConsumerMock.sol:L2RequestResponseConsumerMock",
        "label": "sResponseBytes32",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 18445,
        "contract": "src/v0.1/mocks/L2RequestResponseConsumerMock.sol:L2RequestResponseConsumerMock",
        "label": "sResponseBytes",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes_storage"
      },
      {
        "astId": 18447,
        "contract": "src/v0.1/mocks/L2RequestResponseConsumerMock.sol:L2RequestResponseConsumerMock",
        "label": "sOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 18450,
        "contract": "src/v0.1/mocks/L2RequestResponseConsumerMock.sol:L2RequestResponseConsumerMock",
        "label": "L2ENDPOINT",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IL2Endpoint)13255"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IL2Endpoint)13255": {
        "encoding": "inplace",
        "label": "contract IL2Endpoint",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes4)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes4)",
        "numberOfBytes": "32",
        "value": "t_bytes4"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      }
    }
  }
}