{
  "address": "0xcb3b4fdA5AA3e9cAb0dADAEc166DF6cE32744985",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "notOwner",
          "type": "address"
        }
      ],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sRandomWord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2ba2bb80b660f0bae3eee7c18060c2e2763dfad9cc75f95c7b79d2147de171de",
  "receipt": {
    "to": null,
    "from": "0xa195bE68Bd37EBFfB056279Dc3d236fAa6F23670",
    "contractAddress": "0xcb3b4fdA5AA3e9cAb0dADAEc166DF6cE32744985",
    "transactionIndex": 0,
    "gasUsed": "484491",
    "logsBloom": "0x
    "blockHash": "0xdbf8c9e655b90572e96cf477f3d13b7081da000f0ad226a8d88e49c237841134",
    "transactionHash": "0x2ba2bb80b660f0bae3eee7c18060c2e2763dfad9cc75f95c7b79d2147de171de",
    "logs": [],
    "blockNumber": 3337687,
    "cumulativeGasUsed": "484491",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xccD917Bb5312d42260CD77c8DFc105293a37F9B5"
  ],
  "numDeployments": 1,
  "solcInputHash": "9421958cbfcd39d8d02a58d162277796",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notOwner\",\"type\":\"address\"}],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sRandomWord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"rawFulfillRandomWords(uint256,uint256[])\":{\"params\":{\"randomWords\":\"the VRF output expanded to the requested number of words\",\"requestId\":\"The Id initially returned by requestRandomWords\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rawFulfillRandomWords(uint256,uint256[])\":{\"notice\":\"rawFulfillRandomWords is called by VRFCoordinator when itreceives a valid VRF proof. rawFulfillRandomWords then callsfulfillRandomWords, after validating the origin of the call\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/mocks/L2VRFConsumerMock.sol\":\"L2VRFConsumerMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"src/v0.1/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFConsumerBaseV2.sol\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create account, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev account management functions).\\n * @dev Call requestRandomWords(keyHash, accId,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomWords method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomWords method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomWords method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomWords\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBase {\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    address private immutable vrfCoordinator;\\n\\n    /**\\n     * @param _vrfCoordinator address of VRFCoordinator contract\\n     */\\n    constructor(address _vrfCoordinator) {\\n        vrfCoordinator = _vrfCoordinator;\\n    }\\n\\n    /**\\n     * @notice fulfillRandomWords handles the VRF response. Your contract must\\n     * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n     * @notice principles to keep in mind when implementing your fulfillRandomWords\\n     * @notice method.\\n     *\\n     * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n     * @dev signature, and will call it once it has verified the proof\\n     * @dev associated with the randomness. (It is triggered via a call to\\n     * @dev rawFulfillRandomWords, below.)\\n     *\\n     * @param requestId The Id initially returned by requestRandomWords\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n    /**\\n     * @notice rawFulfillRandomWords is called by VRFCoordinator when it\\n     * @notice receives a valid VRF proof. rawFulfillRandomWords then calls\\n     * @notice fulfillRandomWords, after validating the origin of the call\\n     *\\n     * @param requestId The Id initially returned by requestRandomWords\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n        if (msg.sender != vrfCoordinator) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n        }\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n}\\n\",\"keccak256\":\"0x8f25cf557237f53059663038b409a6a09210710ebc86bed6f416d418c02f6425\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IL2Endpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IL2Endpoint {\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x8b39759084f17351d93d2504ed5af900141335988d40408b5b1aa270063edeaf\",\"license\":\"MIT\"},\"src/v0.1/mocks/L2VRFConsumerMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../VRFConsumerBase.sol\\\";\\nimport \\\"../interfaces/IL2Endpoint.sol\\\";\\n\\ncontract L2VRFConsumerMock is VRFConsumerBase {\\n    uint256 public sRandomWord;\\n    address private sOwner;\\n\\n    IL2Endpoint L2ENDPOINT;\\n\\n    error OnlyOwner(address notOwner);\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != sOwner) {\\n            revert OnlyOwner(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    constructor(address l2Endpoint) VRFConsumerBase(l2Endpoint) {\\n        sOwner = msg.sender;\\n        L2ENDPOINT = IL2Endpoint(l2Endpoint);\\n    }\\n\\n    // Receive remaining payment from requestRandomWordsPayment\\n    receive() external payable {}\\n\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) public onlyOwner returns (uint256 requestId) {\\n        requestId = L2ENDPOINT.requestRandomWords(keyHash, accId, callbackGasLimit, numWords);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /* requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        sRandomWord = (randomWords[0] % 50) + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x9db68027d4728aff74a2ed326164980565d5455cf98322ba455df263bbd2fc54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161057638038061057683398101604081905261002f91610063565b6001600160a01b03166080819052600180546001600160a01b03199081163317909155600280549091169091179055610093565b60006020828403121561007557600080fd5b81516001600160a01b038116811461008c57600080fd5b9392505050565b6080516104c26100b46000396000818160c6015261012e01526104c26000f3fe6080604052600436106100385760003560e01c80630e5ff996146100445780631fe543e31461006c5780632f34077b1461008e57600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b5061005a60005481565b60405190815260200160405180910390f35b34801561007857600080fd5b5061008c6100873660046102d5565b6100ae565b005b34801561009a57600080fd5b5061005a6100a93660046103b8565b61016e565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610160576040517f1cf993f400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61016a8282610286565b5050565b60015460009073ffffffffffffffffffffffffffffffffffffffff1633146101c4576040517f0a86c02a000000000000000000000000000000000000000000000000000000008152336004820152602401610157565b6002546040517f2f34077b0000000000000000000000000000000000000000000000000000000081526004810187905267ffffffffffffffff8616602482015263ffffffff80861660448301528416606482015273ffffffffffffffffffffffffffffffffffffffff90911690632f34077b906084016020604051808303816000875af1158015610259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027d9190610414565b95945050505050565b60328160008151811061029b5761029b61042d565b60200260200101516102ad9190610443565b6102b8906001610465565b6000555050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156102e857600080fd5b8235915060208084013567ffffffffffffffff8082111561030857600080fd5b818601915086601f83011261031c57600080fd5b81358181111561032e5761032e6102bf565b8060051b604051601f19603f83011681018181108582111715610353576103536102bf565b60405291825284820192508381018501918983111561037157600080fd5b938501935b8285101561038f57843584529385019392850192610376565b8096505050505050509250929050565b803563ffffffff811681146103b357600080fd5b919050565b600080600080608085870312156103ce57600080fd5b84359350602085013567ffffffffffffffff811681146103ed57600080fd5b92506103fb6040860161039f565b91506104096060860161039f565b905092959194509250565b60006020828403121561042657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008261046057634e487b7160e01b600052601260045260246000fd5b500690565b8082018082111561048657634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220850c77274816e233074a3b3eae58a2ce6e9af76103a5ec77294f84ae8bdbc05c64736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c80630e5ff996146100445780631fe543e31461006c5780632f34077b1461008e57600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b5061005a60005481565b60405190815260200160405180910390f35b34801561007857600080fd5b5061008c6100873660046102d5565b6100ae565b005b34801561009a57600080fd5b5061005a6100a93660046103b8565b61016e565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610160576040517f1cf993f400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61016a8282610286565b5050565b60015460009073ffffffffffffffffffffffffffffffffffffffff1633146101c4576040517f0a86c02a000000000000000000000000000000000000000000000000000000008152336004820152602401610157565b6002546040517f2f34077b0000000000000000000000000000000000000000000000000000000081526004810187905267ffffffffffffffff8616602482015263ffffffff80861660448301528416606482015273ffffffffffffffffffffffffffffffffffffffff90911690632f34077b906084016020604051808303816000875af1158015610259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027d9190610414565b95945050505050565b60328160008151811061029b5761029b61042d565b60200260200101516102ad9190610443565b6102b8906001610465565b6000555050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156102e857600080fd5b8235915060208084013567ffffffffffffffff8082111561030857600080fd5b818601915086601f83011261031c57600080fd5b81358181111561032e5761032e6102bf565b8060051b604051601f19603f83011681018181108582111715610353576103536102bf565b60405291825284820192508381018501918983111561037157600080fd5b938501935b8285101561038f57843584529385019392850192610376565b8096505050505050509250929050565b803563ffffffff811681146103b357600080fd5b919050565b600080600080608085870312156103ce57600080fd5b84359350602085013567ffffffffffffffff811681146103ed57600080fd5b92506103fb6040860161039f565b91506104096060860161039f565b905092959194509250565b60006020828403121561042657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008261046057634e487b7160e01b600052601260045260246000fd5b500690565b8082018082111561048657634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220850c77274816e233074a3b3eae58a2ce6e9af76103a5ec77294f84ae8bdbc05c64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "rawFulfillRandomWords(uint256,uint256[])": {
        "params": {
          "randomWords": "the VRF output expanded to the requested number of words",
          "requestId": "The Id initially returned by requestRandomWords"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rawFulfillRandomWords(uint256,uint256[])": {
        "notice": "rawFulfillRandomWords is called by VRFCoordinator when itreceives a valid VRF proof. rawFulfillRandomWords then callsfulfillRandomWords, after validating the origin of the call"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1171,
        "contract": "src/v0.1/mocks/L2VRFConsumerMock.sol:L2VRFConsumerMock",
        "label": "sRandomWord",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1173,
        "contract": "src/v0.1/mocks/L2VRFConsumerMock.sol:L2VRFConsumerMock",
        "label": "sOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1176,
        "contract": "src/v0.1/mocks/L2VRFConsumerMock.sol:L2VRFConsumerMock",
        "label": "L2ENDPOINT",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IL2Endpoint)1033"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IL2Endpoint)1033": {
        "encoding": "inplace",
        "label": "contract IL2Endpoint",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}