{
  "address": "0xccD917Bb5312d42260CD77c8DFc105293a37F9B5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "InvalidAggregator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        }
      ],
      "name": "InvalidSubmitter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrant",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAggregator",
          "type": "address"
        }
      ],
      "name": "AggregatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAggregator",
          "type": "address"
        }
      ],
      "name": "AggregatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "RandomWordsFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preSeed",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RandomWordsRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "submission",
          "type": "int256"
        }
      ],
      "name": "Submitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSubmitter",
          "type": "address"
        }
      ],
      "name": "SubmitterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSubmitter",
          "type": "address"
        }
      ],
      "name": "SubmitterRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAggregator",
          "type": "address"
        }
      ],
      "name": "addAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSubmitter",
          "type": "address"
        }
      ],
      "name": "addSubmitter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "fulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "removeAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_submitter",
          "type": "address"
        }
      ],
      "name": "removeSubmitter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sAggregatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sSubmitterCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_submission",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "submit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa974522d286e52ca569db9e067c606190f15c1503696db79b3c964a205017bbf",
  "receipt": {
    "to": null,
    "from": "0xa195bE68Bd37EBFfB056279Dc3d236fAa6F23670",
    "contractAddress": "0xccD917Bb5312d42260CD77c8DFc105293a37F9B5",
    "transactionIndex": 0,
    "gasUsed": "1163720",
    "logsBloom": "0x
    "blockHash": "0x9bbb6ca2376c7f650d849015f2fc5c742d5c68f15881b74e356491a9ff60c30d",
    "transactionHash": "0xa974522d286e52ca569db9e067c606190f15c1503696db79b3c964a205017bbf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3274638,
        "transactionHash": "0xa974522d286e52ca569db9e067c606190f15c1503696db79b3c964a205017bbf",
        "address": "0xccD917Bb5312d42260CD77c8DFc105293a37F9B5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a195be68bd37ebffb056279dc3d236faa6f23670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9bbb6ca2376c7f650d849015f2fc5c742d5c68f15881b74e356491a9ff60c30d"
      }
    ],
    "blockNumber": 3274638,
    "cumulativeGasUsed": "1163720",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "9421958cbfcd39d8d02a58d162277796",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"InvalidAggregator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"InvalidSubmitter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAggregator\",\"type\":\"address\"}],\"name\":\"AggregatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAggregator\",\"type\":\"address\"}],\"name\":\"AggregatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"submission\",\"type\":\"int256\"}],\"name\":\"Submitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSubmitter\",\"type\":\"address\"}],\"name\":\"SubmitterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSubmitter\",\"type\":\"address\"}],\"name\":\"SubmitterRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAggregator\",\"type\":\"address\"}],\"name\":\"addAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSubmitter\",\"type\":\"address\"}],\"name\":\"addSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"removeAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_submitter\",\"type\":\"address\"}],\"name\":\"removeSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sAggregatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sSubmitterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_submission\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/L2endpoint.sol\":\"L2Endpoint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/v0.1/L2endpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IL2Aggregator.sol\\\";\\nimport \\\"./VRFConsumerBase.sol\\\";\\n\\ncontract L2Endpoint is Ownable {\\n    uint256 private constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n    uint256 public sAggregatorCount;\\n    uint256 public sSubmitterCount;\\n    uint64 sNonce;\\n    bool private sReentrancyLock;\\n    struct RequestInfo {\\n        address owner;\\n        uint32 callbackGasLimit;\\n    }\\n    mapping(address => bool) sSubmitters;\\n    mapping(address => bool) sAggregators;\\n\\n    mapping(uint256 => RequestInfo) internal sRequestDetail;\\n\\n    error InvalidSubmitter(address submitter);\\n    error InvalidAggregator(address aggregator);\\n    error Reentrant();\\n\\n    event SubmitterAdded(address newSubmitter);\\n    event SubmitterRemoved(address newSubmitter);\\n    event AggregatorAdded(address newAggregator);\\n    event AggregatorRemoved(address newAggregator);\\n    event Submitted(uint256 roundId, int256 submission);\\n    event RandomWordsRequested(\\n        bytes32 indexed keyHash,\\n        uint256 requestId,\\n        uint256 preSeed,\\n        uint64 indexed accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords,\\n        address indexed sender\\n    );\\n    event RandomWordsFulfilled(uint256 indexed requestId, uint256[] randomWords, bool success);\\n\\n    modifier nonReentrant() {\\n        if (sReentrancyLock) {\\n            revert Reentrant();\\n        }\\n        _;\\n    }\\n\\n    function addAggregator(address _newAggregator) external onlyOwner {\\n        if (sAggregators[_newAggregator]) revert InvalidAggregator(_newAggregator);\\n        sAggregators[_newAggregator] = true;\\n        sAggregatorCount += 1;\\n        emit AggregatorAdded(_newAggregator);\\n    }\\n\\n    function removeAggregator(address _aggregator) external onlyOwner {\\n        if (!sAggregators[_aggregator]) revert InvalidAggregator(_aggregator);\\n        delete sAggregators[_aggregator];\\n        sAggregatorCount -= 1;\\n        emit AggregatorRemoved(_aggregator);\\n    }\\n\\n    function addSubmitter(address _newSubmitter) external onlyOwner {\\n        if (sSubmitters[_newSubmitter]) revert InvalidSubmitter(_newSubmitter);\\n        sSubmitters[_newSubmitter] = true;\\n        sSubmitterCount += 1;\\n        emit SubmitterAdded(_newSubmitter);\\n    }\\n\\n    function removeSubmitter(address _submitter) external onlyOwner {\\n        if (!sSubmitters[_submitter]) revert InvalidSubmitter(_submitter);\\n        delete sSubmitters[_submitter];\\n        sSubmitterCount -= 1;\\n        emit SubmitterRemoved(_submitter);\\n    }\\n\\n    function submit(uint256 _roundId, int256 _submission, address _aggregator) external {\\n        if (!sSubmitters[msg.sender]) revert InvalidSubmitter(msg.sender);\\n        if (!sAggregators[_aggregator]) revert InvalidAggregator(_aggregator);\\n        IL2Aggregator(_aggregator).submit(_roundId, _submission);\\n        emit Submitted(_roundId, _submission);\\n    }\\n\\n    function computeRequestId(\\n        bytes32 keyHash,\\n        address sender,\\n        uint64 accId,\\n        uint64 nonce\\n    ) private pure returns (uint256, uint256) {\\n        uint256 preSeed = uint256(keccak256(abi.encode(keyHash, sender, accId, nonce)));\\n        uint256 requestId = uint256(keccak256(abi.encode(keyHash, preSeed)));\\n        return (requestId, preSeed);\\n    }\\n\\n    /**\\n     * @dev calls target address with exactly gasAmount gas and data as calldata\\n     * or reverts if at least gasAmount gas is not available.\\n     */\\n    function callWithExactGas(\\n        uint256 gasAmount,\\n        address target,\\n        bytes memory data\\n    ) internal returns (bool success) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let g := gas()\\n            // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\\n            // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\\n            // We want to ensure that we revert if gasAmount >  63//64*gas available\\n            // as we do not want to provide them with less, however that check itself costs\\n            // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\\n            // to revert if gasAmount >  63//64*gas available.\\n            if lt(g, GAS_FOR_CALL_EXACT_CHECK) {\\n                revert(0, 0)\\n            }\\n            g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\\n            // if g - g//64 <= gasAmount, revert\\n            // (we subtract g//64 because of EIP-150)\\n            if iszero(gt(sub(g, div(g, 64)), gasAmount)) {\\n                revert(0, 0)\\n            }\\n            // solidity calls check that a contract actually exists at the destination, so we do the same\\n            if iszero(extcodesize(target)) {\\n                revert(0, 0)\\n            }\\n            // call and return whether we succeeded. ignore return data\\n            // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n            success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\\n        }\\n        return success;\\n    }\\n\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external nonReentrant returns (uint256) {\\n        sNonce++;\\n        (uint256 requestId, uint256 preSeed) = computeRequestId(keyHash, msg.sender, accId, sNonce);\\n        sRequestDetail[requestId] = RequestInfo({\\n            owner: msg.sender,\\n            callbackGasLimit: callbackGasLimit\\n        });\\n        emit RandomWordsRequested(\\n            keyHash,\\n            requestId,\\n            preSeed,\\n            accId,\\n            callbackGasLimit,\\n            numWords,\\n            msg.sender\\n        );\\n\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) external nonReentrant {\\n        if (!sSubmitters[msg.sender]) revert InvalidSubmitter(msg.sender);\\n        RequestInfo memory detail = sRequestDetail[requestId];\\n        bytes memory resp = abi.encodeWithSelector(\\n            VRFConsumerBase.rawFulfillRandomWords.selector,\\n            requestId,\\n            randomWords\\n        );\\n        sReentrancyLock = true;\\n        bool success = callWithExactGas(detail.callbackGasLimit, detail.owner, resp);\\n        sReentrancyLock = false;\\n        emit RandomWordsFulfilled(requestId, randomWords, success);\\n    }\\n}\\n\",\"keccak256\":\"0x11a62073553bd303a7e30879dcc657175d233029b8449f39dd99a05b7f428c02\",\"license\":\"MIT\"},\"src/v0.1/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFConsumerBaseV2.sol\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create account, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev account management functions).\\n * @dev Call requestRandomWords(keyHash, accId,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomWords method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomWords method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomWords method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomWords\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBase {\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    address private immutable vrfCoordinator;\\n\\n    /**\\n     * @param _vrfCoordinator address of VRFCoordinator contract\\n     */\\n    constructor(address _vrfCoordinator) {\\n        vrfCoordinator = _vrfCoordinator;\\n    }\\n\\n    /**\\n     * @notice fulfillRandomWords handles the VRF response. Your contract must\\n     * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n     * @notice principles to keep in mind when implementing your fulfillRandomWords\\n     * @notice method.\\n     *\\n     * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n     * @dev signature, and will call it once it has verified the proof\\n     * @dev associated with the randomness. (It is triggered via a call to\\n     * @dev rawFulfillRandomWords, below.)\\n     *\\n     * @param requestId The Id initially returned by requestRandomWords\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n    /**\\n     * @notice rawFulfillRandomWords is called by VRFCoordinator when it\\n     * @notice receives a valid VRF proof. rawFulfillRandomWords then calls\\n     * @notice fulfillRandomWords, after validating the origin of the call\\n     *\\n     * @param requestId The Id initially returned by requestRandomWords\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n        if (msg.sender != vrfCoordinator) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n        }\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n}\\n\",\"keccak256\":\"0x8f25cf557237f53059663038b409a6a09210710ebc86bed6f416d418c02f6425\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IL2Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IL2Aggregator {\\n    function submit(uint256 _roundId, int256 _submission) external;\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x4ac828deb9bafa24b3b80568c31fd929a36cd6ad8c35359d9bdb099ba466968c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610dfa8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806369439e07116100815780638da5cb5b1161005b5780638da5cb5b1461017a578063c36f41e214610195578063f2fde38b146101a857600080fd5b806369439e071461014c578063715018a61461015f5780638c651f111461016757600080fd5b806338ba4614116100b257806338ba46141461011d57806350ae9443146101305780636520b0091461013957600080fd5b8063072900f9146100d95780632f34077b146100ee5780633728e0e614610114575b600080fd5b6100ec6100e7366004610b34565b6101bb565b005b6101016100fc366004610b6a565b61028b565b6040519081526020015b60405180910390f35b61010160025481565b6100ec61012b366004610bdc565b610437565b61010160015481565b6100ec610147366004610b34565b6105fb565b6100ec61015a366004610ca6565b6106bd565b6100ec6107ec565b6100ec610175366004610b34565b610800565b6000546040516001600160a01b03909116815260200161010b565b6100ec6101a3366004610b34565b6108bd565b6100ec6101b6366004610b34565b61097a565b6101c3610a0a565b6001600160a01b03811660009081526004602052604090205460ff161561020d57604051632ffe4f1760e21b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b0381166000908152600460205260408120805460ff191660019081179091556002805491929091610246908490610cf1565b90915550506040516001600160a01b03821681527fb079bc2cbde1f186e0b351d4a87c4597e3ed098f571548617449e73506428d8b906020015b60405180910390a150565b60035460009068010000000000000000900460ff16156102be5760405163769dd35360e11b815260040160405180910390fd5b6003805467ffffffffffffffff169060006102d883610d0a565b825467ffffffffffffffff91821661010093840a90810290830219909116179092556003546040805160208082018c905233828401528a86166060830152929094166080808601919091528151808603909101815260a08501825280519083012060c085018b905260e08086018290528251808703909101815294909301905282519201919091206000925082916040805180820182523380825263ffffffff8a811660208085018281526000898152600683528790209551865491518516600160a01b027fffffffffffffffff0000000000000000000000000000000000000000000000009092166001600160a01b03909116171790945584518781529384018690529383019390935291881660608201529294509092509067ffffffffffffffff88169089907f83435a10127d49580dea6415e92f6d97ce6dfed04f0e49a3ca3366a82716b8569060800160405180910390a45095945050505050565b60035468010000000000000000900460ff16156104675760405163769dd35360e11b815260040160405180910390fd5b3360009081526004602052604090205460ff1661049957604051632ffe4f1760e21b8152336004820152602401610204565b60008281526006602090815260408083208151808301835290546001600160a01b0381168252600160a01b900463ffffffff1692810192909252519091907f1fe543e300000000000000000000000000000000000000000000000000000000906105099086908690602401610d6c565b60408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092526003805468ff00000000000000001916680100000000000000001790559083015183519192506000916105a39163ffffffff169084610a64565b6003805468ff00000000000000001916905560405190915085907f969e72fbacf24da85b4bce2a3cef3d8dc2497b1750c4cc5a06b52c1041338337906105ec9087908590610d8d565b60405180910390a25050505050565b610603610a0a565b6001600160a01b03811660009081526005602052604090205460ff161561064857604051635c8bf34d60e01b81526001600160a01b0382166004820152602401610204565b6001600160a01b0381166000908152600560205260408120805460ff1916600190811790915580549091829161067f908390610cf1565b90915550506040516001600160a01b03821681527f6fe83d3564912d267f3f85c4a548ac36ea86d2bb44c5881a8c7e841e5a439a4490602001610280565b3360009081526004602052604090205460ff166106ef57604051632ffe4f1760e21b8152336004820152602401610204565b6001600160a01b03811660009081526005602052604090205460ff1661073357604051635c8bf34d60e01b81526001600160a01b0382166004820152602401610204565b6040517f202ee0ed00000000000000000000000000000000000000000000000000000000815260048101849052602481018390526001600160a01b0382169063202ee0ed90604401600060405180830381600087803b15801561079557600080fd5b505af11580156107a9573d6000803e3d6000fd5b505060408051868152602081018690527fa295ff9f7c0d4a3dc435d3ec6914c2c8dfd40c81683a4e8c1a48dfb8061c115e935001905060405180910390a1505050565b6107f4610a0a565b6107fe6000610ab0565b565b610808610a0a565b6001600160a01b03811660009081526005602052604090205460ff1661084c57604051635c8bf34d60e01b81526001600160a01b0382166004820152602401610204565b6001600160a01b0381166000908152600560205260408120805460ff19169055600180549091829161087f908390610db1565b90915550506040516001600160a01b03821681527fe57df70929b1c62badc06b12770e8aceca66ffc8c10367bbedb6b894445dbcd490602001610280565b6108c5610a0a565b6001600160a01b03811660009081526004602052604090205460ff1661090957604051632ffe4f1760e21b81526001600160a01b0382166004820152602401610204565b6001600160a01b0381166000908152600460205260408120805460ff19169055600280546001929061093c908490610db1565b90915550506040516001600160a01b03821681527ff84a004e1673d2f349a7c93c72b3794b8eba6d2f9338044d8c8cd260e51a57a190602001610280565b610982610a0a565b6001600160a01b0381166109fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610204565b610a0781610ab0565b50565b6000546001600160a01b031633146107fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610204565b60005a611388811015610a7657600080fd5b611388810390508460408204820311610a8e57600080fd5b50823b610a9a57600080fd5b60008083516020850160008789f1949350505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610b2f57600080fd5b919050565b600060208284031215610b4657600080fd5b610b4f82610b18565b9392505050565b803563ffffffff81168114610b2f57600080fd5b60008060008060808587031215610b8057600080fd5b84359350602085013567ffffffffffffffff81168114610b9f57600080fd5b9250610bad60408601610b56565b9150610bbb60608601610b56565b905092959194509250565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610bef57600080fd5b8235915060208084013567ffffffffffffffff80821115610c0f57600080fd5b818601915086601f830112610c2357600080fd5b813581811115610c3557610c35610bc6565b8060051b604051601f19603f83011681018181108582111715610c5a57610c5a610bc6565b604052918252848201925083810185019189831115610c7857600080fd5b938501935b82851015610c9657843584529385019392850192610c7d565b8096505050505050509250929050565b600080600060608486031215610cbb57600080fd5b8335925060208401359150610cd260408501610b18565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b80820180821115610d0457610d04610cdb565b92915050565b600067ffffffffffffffff808316818103610d2757610d27610cdb565b6001019392505050565b600081518084526020808501945080840160005b83811015610d6157815187529582019590820190600101610d45565b509495945050505050565b828152604060208201526000610d856040830184610d31565b949350505050565b604081526000610da06040830185610d31565b905082151560208301529392505050565b81810381811115610d0457610d04610cdb56fea2646970667358221220b3f34e67a144fbebdde8e89772dd3aac32ff0bd6403a3994533f26519ffadcd564736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c806369439e07116100815780638da5cb5b1161005b5780638da5cb5b1461017a578063c36f41e214610195578063f2fde38b146101a857600080fd5b806369439e071461014c578063715018a61461015f5780638c651f111461016757600080fd5b806338ba4614116100b257806338ba46141461011d57806350ae9443146101305780636520b0091461013957600080fd5b8063072900f9146100d95780632f34077b146100ee5780633728e0e614610114575b600080fd5b6100ec6100e7366004610b34565b6101bb565b005b6101016100fc366004610b6a565b61028b565b6040519081526020015b60405180910390f35b61010160025481565b6100ec61012b366004610bdc565b610437565b61010160015481565b6100ec610147366004610b34565b6105fb565b6100ec61015a366004610ca6565b6106bd565b6100ec6107ec565b6100ec610175366004610b34565b610800565b6000546040516001600160a01b03909116815260200161010b565b6100ec6101a3366004610b34565b6108bd565b6100ec6101b6366004610b34565b61097a565b6101c3610a0a565b6001600160a01b03811660009081526004602052604090205460ff161561020d57604051632ffe4f1760e21b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b0381166000908152600460205260408120805460ff191660019081179091556002805491929091610246908490610cf1565b90915550506040516001600160a01b03821681527fb079bc2cbde1f186e0b351d4a87c4597e3ed098f571548617449e73506428d8b906020015b60405180910390a150565b60035460009068010000000000000000900460ff16156102be5760405163769dd35360e11b815260040160405180910390fd5b6003805467ffffffffffffffff169060006102d883610d0a565b825467ffffffffffffffff91821661010093840a90810290830219909116179092556003546040805160208082018c905233828401528a86166060830152929094166080808601919091528151808603909101815260a08501825280519083012060c085018b905260e08086018290528251808703909101815294909301905282519201919091206000925082916040805180820182523380825263ffffffff8a811660208085018281526000898152600683528790209551865491518516600160a01b027fffffffffffffffff0000000000000000000000000000000000000000000000009092166001600160a01b03909116171790945584518781529384018690529383019390935291881660608201529294509092509067ffffffffffffffff88169089907f83435a10127d49580dea6415e92f6d97ce6dfed04f0e49a3ca3366a82716b8569060800160405180910390a45095945050505050565b60035468010000000000000000900460ff16156104675760405163769dd35360e11b815260040160405180910390fd5b3360009081526004602052604090205460ff1661049957604051632ffe4f1760e21b8152336004820152602401610204565b60008281526006602090815260408083208151808301835290546001600160a01b0381168252600160a01b900463ffffffff1692810192909252519091907f1fe543e300000000000000000000000000000000000000000000000000000000906105099086908690602401610d6c565b60408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092526003805468ff00000000000000001916680100000000000000001790559083015183519192506000916105a39163ffffffff169084610a64565b6003805468ff00000000000000001916905560405190915085907f969e72fbacf24da85b4bce2a3cef3d8dc2497b1750c4cc5a06b52c1041338337906105ec9087908590610d8d565b60405180910390a25050505050565b610603610a0a565b6001600160a01b03811660009081526005602052604090205460ff161561064857604051635c8bf34d60e01b81526001600160a01b0382166004820152602401610204565b6001600160a01b0381166000908152600560205260408120805460ff1916600190811790915580549091829161067f908390610cf1565b90915550506040516001600160a01b03821681527f6fe83d3564912d267f3f85c4a548ac36ea86d2bb44c5881a8c7e841e5a439a4490602001610280565b3360009081526004602052604090205460ff166106ef57604051632ffe4f1760e21b8152336004820152602401610204565b6001600160a01b03811660009081526005602052604090205460ff1661073357604051635c8bf34d60e01b81526001600160a01b0382166004820152602401610204565b6040517f202ee0ed00000000000000000000000000000000000000000000000000000000815260048101849052602481018390526001600160a01b0382169063202ee0ed90604401600060405180830381600087803b15801561079557600080fd5b505af11580156107a9573d6000803e3d6000fd5b505060408051868152602081018690527fa295ff9f7c0d4a3dc435d3ec6914c2c8dfd40c81683a4e8c1a48dfb8061c115e935001905060405180910390a1505050565b6107f4610a0a565b6107fe6000610ab0565b565b610808610a0a565b6001600160a01b03811660009081526005602052604090205460ff1661084c57604051635c8bf34d60e01b81526001600160a01b0382166004820152602401610204565b6001600160a01b0381166000908152600560205260408120805460ff19169055600180549091829161087f908390610db1565b90915550506040516001600160a01b03821681527fe57df70929b1c62badc06b12770e8aceca66ffc8c10367bbedb6b894445dbcd490602001610280565b6108c5610a0a565b6001600160a01b03811660009081526004602052604090205460ff1661090957604051632ffe4f1760e21b81526001600160a01b0382166004820152602401610204565b6001600160a01b0381166000908152600460205260408120805460ff19169055600280546001929061093c908490610db1565b90915550506040516001600160a01b03821681527ff84a004e1673d2f349a7c93c72b3794b8eba6d2f9338044d8c8cd260e51a57a190602001610280565b610982610a0a565b6001600160a01b0381166109fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610204565b610a0781610ab0565b50565b6000546001600160a01b031633146107fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610204565b60005a611388811015610a7657600080fd5b611388810390508460408204820311610a8e57600080fd5b50823b610a9a57600080fd5b60008083516020850160008789f1949350505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610b2f57600080fd5b919050565b600060208284031215610b4657600080fd5b610b4f82610b18565b9392505050565b803563ffffffff81168114610b2f57600080fd5b60008060008060808587031215610b8057600080fd5b84359350602085013567ffffffffffffffff81168114610b9f57600080fd5b9250610bad60408601610b56565b9150610bbb60608601610b56565b905092959194509250565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610bef57600080fd5b8235915060208084013567ffffffffffffffff80821115610c0f57600080fd5b818601915086601f830112610c2357600080fd5b813581811115610c3557610c35610bc6565b8060051b604051601f19603f83011681018181108582111715610c5a57610c5a610bc6565b604052918252848201925083810185019189831115610c7857600080fd5b938501935b82851015610c9657843584529385019392850192610c7d565b8096505050505050509250929050565b600080600060608486031215610cbb57600080fd5b8335925060208401359150610cd260408501610b18565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b80820180821115610d0457610d04610cdb565b92915050565b600067ffffffffffffffff808316818103610d2757610d27610cdb565b6001019392505050565b600081518084526020808501945080840160005b83811015610d6157815187529582019590820190600101610d45565b509495945050505050565b828152604060208201526000610d856040830184610d31565b949350505050565b604081526000610da06040830185610d31565b905082151560208301529392505050565b81810381811115610d0457610d04610cdb56fea2646970667358221220b3f34e67a144fbebdde8e89772dd3aac32ff0bd6403a3994533f26519ffadcd564736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 422,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sAggregatorCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 424,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sSubmitterCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 426,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sNonce",
        "offset": 0,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 428,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sReentrancyLock",
        "offset": 8,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 437,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sSubmitters",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 441,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sAggregators",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 446,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sRequestDetail",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(RequestInfo)433_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(RequestInfo)433_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct L2Endpoint.RequestInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestInfo)433_storage"
      },
      "t_struct(RequestInfo)433_storage": {
        "encoding": "inplace",
        "label": "struct L2Endpoint.RequestInfo",
        "members": [
          {
            "astId": 430,
            "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 432,
            "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
            "label": "callbackGasLimit",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}