{
  "address": "0x5fe8a7445bFDB2Cd6d9f1DcfB3B33D8c365FFdB0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prepayment",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EvenLengthList",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "have",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "want",
          "type": "uint32"
        }
      ],
      "name": "GasLimitTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleJobId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectCommitment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "have",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "want",
          "type": "uint256"
        }
      ],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccRequest",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "InvalidConsumer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidJobId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNumSubmission",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCorrespondingRequest",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "NoSuchOracle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotRequestOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleAlreadySubmitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrant",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RefundFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyOracles",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "UnregisteredOracleFulfillment",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier3",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier4",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier5",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier2",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier3",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier4",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier5",
              "type": "uint24"
            }
          ],
          "indexed": false,
          "internalType": "struct ICoordinatorBase.FeeConfig",
          "name": "feeConfig",
          "type": "tuple"
        }
      ],
      "name": "ConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "response",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledBool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledBytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "response",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledBytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "response",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledInt256",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "response",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledString",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "response",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledUint128",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "jobId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDirectPayment",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prepayment",
          "type": "address"
        }
      ],
      "name": "PrepaymentSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestCanceled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_ORACLES",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "cancelRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "deregisterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "reqCount",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "estimateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "reqCount",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "enum IAccount.AccountType",
          "name": "accType",
          "type": "uint8"
        }
      ],
      "name": "estimateFeeByAcc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "response",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "blockNum",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "numSubmission",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isDirectPayment",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "jobId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IRequestResponseCoordinatorBase.RequestCommitment",
          "name": "rc",
          "type": "tuple"
        }
      ],
      "name": "fulfillDataRequestBool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "blockNum",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "numSubmission",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isDirectPayment",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "jobId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IRequestResponseCoordinatorBase.RequestCommitment",
          "name": "rc",
          "type": "tuple"
        }
      ],
      "name": "fulfillDataRequestBytes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "response",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "blockNum",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "numSubmission",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isDirectPayment",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "jobId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IRequestResponseCoordinatorBase.RequestCommitment",
          "name": "rc",
          "type": "tuple"
        }
      ],
      "name": "fulfillDataRequestBytes32",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "response",
          "type": "int256"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "blockNum",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "numSubmission",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isDirectPayment",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "jobId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IRequestResponseCoordinatorBase.RequestCommitment",
          "name": "rc",
          "type": "tuple"
        }
      ],
      "name": "fulfillDataRequestInt256",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "response",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "blockNum",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "numSubmission",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isDirectPayment",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "jobId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IRequestResponseCoordinatorBase.RequestCommitment",
          "name": "rc",
          "type": "tuple"
        }
      ],
      "name": "fulfillDataRequestString",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "response",
          "type": "uint128"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "blockNum",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "numSubmission",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isDirectPayment",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "jobId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IRequestResponseCoordinatorBase.RequestCommitment",
          "name": "rc",
          "type": "tuple"
        }
      ],
      "name": "fulfillDataRequestUint128",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getCommitment",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier2",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier3",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier4",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier5",
          "type": "uint32"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier2",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier3",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier4",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier5",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrepaymentAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "isOracleRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "pendingRequestExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "registerOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callbackAddr",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "callbackFunc",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "buf",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "capacity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Buffer.buffer",
              "name": "buf",
              "type": "tuple"
            }
          ],
          "internalType": "struct Orakl.Request",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callbackAddr",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "callbackFunc",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "buf",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "capacity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Buffer.buffer",
              "name": "buf",
              "type": "tuple"
            }
          ],
          "internalType": "struct Orakl.Request",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "refundRecipient",
          "type": "address"
        }
      ],
      "name": "requestData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sOracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier3",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier4",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier5",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier2",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier3",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier4",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier5",
              "type": "uint24"
            }
          ],
          "internalType": "struct ICoordinatorBase.FeeConfig",
          "name": "feeConfig",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typeAndVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "jobId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "validateNumSubmission",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x50eb527aba6887bab6f91050c02f3fd58bc9f278bc4094a4196f1fd9ab1bd485",
  "receipt": {
    "to": null,
    "from": "0xa195bE68Bd37EBFfB056279Dc3d236fAa6F23670",
    "contractAddress": "0x5fe8a7445bFDB2Cd6d9f1DcfB3B33D8c365FFdB0",
    "transactionIndex": 0,
    "gasUsed": "6308047",
    "logsBloom": "0x
    "blockHash": "0xf7ba231e79e816c5b668a9dc5deefe7c77c6d30e012dc43169064849416fdc4a",
    "transactionHash": "0x50eb527aba6887bab6f91050c02f3fd58bc9f278bc4094a4196f1fd9ab1bd485",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 134040922,
        "transactionHash": "0x50eb527aba6887bab6f91050c02f3fd58bc9f278bc4094a4196f1fd9ab1bd485",
        "address": "0x5fe8a7445bFDB2Cd6d9f1DcfB3B33D8c365FFdB0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a195be68bd37ebffb056279dc3d236faa6f23670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf7ba231e79e816c5b668a9dc5deefe7c77c6d30e012dc43169064849416fdc4a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 134040922,
        "transactionHash": "0x50eb527aba6887bab6f91050c02f3fd58bc9f278bc4094a4196f1fd9ab1bd485",
        "address": "0x5fe8a7445bFDB2Cd6d9f1DcfB3B33D8c365FFdB0",
        "topics": [
          "0x9401527b1b86caed93cfabfbb71d3a9b28c5e923529aa86ebd183664194b013d"
        ],
        "data": "0x0000000000000000000000008d3a1663d10eeb0bc9c9e537e1bbea69383194e7",
        "logIndex": 1,
        "blockHash": "0xf7ba231e79e816c5b668a9dc5deefe7c77c6d30e012dc43169064849416fdc4a"
      }
    ],
    "blockNumber": 134040922,
    "cumulativeGasUsed": "6308047",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8d3A1663d10eEb0bC9C9e537e1BBeA69383194e7"
  ],
  "numDeployments": 2,
  "solcInputHash": "d643dfb4fd9af2eba004075813929e9c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prepayment\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EvenLengthList\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"have\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"want\",\"type\":\"uint32\"}],\"name\":\"GasLimitTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleJobId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectCommitment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"have\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"want\",\"type\":\"uint256\"}],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidJobId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNumSubmission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCorrespondingRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NoSuchOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRequestOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleAlreadySubmitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyOracles\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"UnregisteredOracleFulfillment\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"struct ICoordinatorBase.FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"response\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"response\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"response\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledUint128\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDirectPayment\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prepayment\",\"type\":\"address\"}],\"name\":\"PrepaymentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestCanceled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ORACLES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"deregisterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"estimateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"enum IAccount.AccountType\",\"name\":\"accType\",\"type\":\"uint8\"}],\"name\":\"estimateFeeByAcc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDirectPayment\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRequestResponseCoordinatorBase.RequestCommitment\",\"name\":\"rc\",\"type\":\"tuple\"}],\"name\":\"fulfillDataRequestBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDirectPayment\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRequestResponseCoordinatorBase.RequestCommitment\",\"name\":\"rc\",\"type\":\"tuple\"}],\"name\":\"fulfillDataRequestBytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"response\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDirectPayment\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRequestResponseCoordinatorBase.RequestCommitment\",\"name\":\"rc\",\"type\":\"tuple\"}],\"name\":\"fulfillDataRequestBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"response\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDirectPayment\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRequestResponseCoordinatorBase.RequestCommitment\",\"name\":\"rc\",\"type\":\"tuple\"}],\"name\":\"fulfillDataRequestInt256\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDirectPayment\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRequestResponseCoordinatorBase.RequestCommitment\",\"name\":\"rc\",\"type\":\"tuple\"}],\"name\":\"fulfillDataRequestString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"response\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDirectPayment\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRequestResponseCoordinatorBase.RequestCommitment\",\"name\":\"rc\",\"type\":\"tuple\"}],\"name\":\"fulfillDataRequestUint128\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrepaymentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"isOracleRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"registerOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct Buffer.buffer\",\"name\":\"buf\",\"type\":\"tuple\"}],\"internalType\":\"struct Orakl.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct Buffer.buffer\",\"name\":\"buf\",\"type\":\"tuple\"}],\"internalType\":\"struct Orakl.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"}],\"name\":\"requestData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sOracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"internalType\":\"struct ICoordinatorBase.FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"validateNumSubmission\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bisonai\",\"kind\":\"dev\",\"methods\":{\"cancelRequest(uint256)\":{\"params\":{\"requestId\":\"- ID of the Oracle Request\"}},\"deregisterOracle(address)\":{\"params\":{\"oracle\":\"address of the oracle\"}},\"getCommitment(uint256)\":{\"params\":{\"requestId\":\"id of request\"},\"returns\":{\"_0\":\"commmitment value that can be used to determine whether a request is fulfilled or not. If `requestId` is valid and commitment equals to bytes32(0), the request was fulfilled.\"}},\"getPrepaymentAddress()\":{\"returns\":{\"_0\":\"prepayment address\"}},\"isOracleRegistered(address)\":{\"returns\":{\"_0\":\"true when oracle address registered, otherwise false\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingRequestExists(address,uint64,uint64)\":{\"params\":{\"accId\":\"- ID of the account\"},\"returns\":{\"_0\":\"true if there exists at least one unfulfilled request for the account, false otherwise.\"}},\"registerOracle(address)\":{\"params\":{\"oracle\":\"address of the oracle\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint64,uint8)\":{\"details\":\"Generates and stores a request ID, increments the local nonce, creates a request on the target oracle contract.Emits Requested event.\",\"params\":{\"accId\":\"- The ID of the account. Must be funded with the minimum account balance.\",\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRequest callback. Note that gasleft() inside fulfillRequest may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRequest. The acceptable range is [0, maxGasLimit]\",\"numSubmission\":\"number of requested submission to compute the final aggregate value\",\"req\":\"The initialized Request\"},\"returns\":{\"_0\":\"requestId - A unique * identifier of the request. Can be used to match a request to a * response in fulfillRequest.\"}},\"requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint8,address)\":{\"details\":\"Generates and stores a request ID, increments the local nonce, creates a request on the target oracle contract.Emits Requested event.\",\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRequest callback. Note that gasleft() inside fulfillRequest may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRequest. The acceptable range is [0, maxGasLimit]\",\"numSubmission\":\"number of requested submission to compute the final aggregate value\",\"refundRecipient\":\"recipient of an extra $KLAY amount that was sent together with service request\",\"req\":\"The initialized Request\"},\"returns\":{\"_0\":\"requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\"}},\"setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))\":{\"params\":{\"feeConfig\":\"fee tier configuration\",\"gasAfterPaymentCalculation\":\"gas used in doing accounting after completing the gas measurement\",\"maxGasLimit\":\"global max for request gas limit\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"typeAndVersion()\":{\"returns\":{\"_0\":\"Type and version string\"}}},\"title\":\"Orakl Network RequestResponseCoordinator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelRequest(uint256)\":{\"notice\":\"Canceling oracle request\"},\"deregisterOracle(address)\":{\"notice\":\"Deregister an oracle\"},\"getCommitment(uint256)\":{\"notice\":\"Get request commitment.\"},\"getPrepaymentAddress()\":{\"notice\":\"Access address for prepayment associated withcoordinator.\"},\"isOracleRegistered(address)\":{\"notice\":\"Find out whether given oracle address was registered.\"},\"pendingRequestExists(address,uint64,uint64)\":{\"notice\":\"Check to see if there exists a request commitment consumers for all consumers and keyhashes for a given acc.\"},\"registerOracle(address)\":{\"notice\":\"Register an oracle\"},\"requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint64,uint8)\":{\"notice\":\"Creates a request to RequestResponse oracle using a [regular] account.\"},\"requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint8,address)\":{\"notice\":\"Creates a request to RequestResponse oracle using a [temporary] account.\"},\"setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))\":{\"notice\":\"Sets the configuration of the VRF coordinator\"},\"typeAndVersion()\":{\"notice\":\"The type and version of this contract\"},\"validateNumSubmission(bytes32,uint8)\":{\"notice\":\"Different jobs specified by jobId have allowed different number of of requests for submissions that depends on total number of registered oracles.\"}},\"notice\":\"Accepts requests for off-chain data either through [regular] or [temporary] account by calling `requestData` function. Consumers can choose what data type (`jobId`) they want to receive the requested data in, and how many oracles (`numSubmission`) they want to participate on an aggregated answer. Consumers can define the data source and postprocessing steps that should be applied on data received from API. The request is concluded by emitting `DataRequested` event which includes all necessary metadata to provide the requested off-chain data. Off-chain oracles that are registered within the `RequestResponseCoordinator` then compete for delivering the requested data back to on-chain because only a limited number of oracle can submit the requested answer. Answers from off-chain oracles are being collected in contract storage, and the last requested off-chain oracle that submits its answer will also execute consumer's fulfillment function, distributes reward to all participating oracles, and cleanup the storage.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/RequestResponseCoordinator.sol\":\"RequestResponseCoordinator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/v0.1/CoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ICoordinatorBase.sol\\\";\\nimport \\\"./interfaces/IPrepayment.sol\\\";\\nimport \\\"./interfaces/IAccount.sol\\\";\\n\\nabstract contract CoordinatorBase is Ownable, ICoordinatorBase {\\n    // 5k is plenty for an EXTCODESIZE call (2600) + warm CALL (100)\\n    // and some arithmetic operations.\\n    uint256 private constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n\\n    address[] public sOracles;\\n\\n    /* requestID */\\n    /* commitment */\\n    mapping(uint256 => bytes32) internal sRequestIdToCommitment;\\n\\n    /* requestID */\\n    /* owner */\\n    mapping(uint256 => address) internal sRequestOwner;\\n\\n    IPrepayment internal sPrepayment;\\n\\n    struct Config {\\n        uint32 maxGasLimit;\\n        bool reentrancyLock;\\n        // Gas to cover oracle payment after we calculate the payment.\\n        // We make it configurable in case those operations are repriced.\\n        uint32 gasAfterPaymentCalculation;\\n    }\\n    Config internal sConfig;\\n\\n    FeeConfig private sFeeConfig;\\n\\n    error Reentrant();\\n    error NoCorrespondingRequest();\\n    error NotRequestOwner();\\n    error OracleAlreadyRegistered(address oracle);\\n    error NoSuchOracle(address oracle);\\n    error RefundFailure();\\n    error InvalidConsumer(uint64 accId, address consumer);\\n    error IncorrectCommitment();\\n    error GasLimitTooBig(uint32 have, uint32 want);\\n    error InsufficientPayment(uint256 have, uint256 want);\\n\\n    event ConfigSet(uint32 maxGasLimit, uint32 gasAfterPaymentCalculation, FeeConfig feeConfig);\\n    event RequestCanceled(uint256 indexed requestId);\\n\\n    modifier nonReentrant() {\\n        if (sConfig.reentrancyLock) {\\n            revert Reentrant();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc ICoordinatorBase\\n     */\\n    function setConfig(\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        FeeConfig memory feeConfig\\n    ) external onlyOwner {\\n        sConfig = Config({\\n            maxGasLimit: maxGasLimit,\\n            gasAfterPaymentCalculation: gasAfterPaymentCalculation,\\n            reentrancyLock: false\\n        });\\n        sFeeConfig = feeConfig;\\n        emit ConfigSet(maxGasLimit, gasAfterPaymentCalculation, sFeeConfig);\\n    }\\n\\n    function getConfig()\\n        external\\n        view\\n        returns (uint32 maxGasLimit, uint32 gasAfterPaymentCalculation)\\n    {\\n        return (sConfig.maxGasLimit, sConfig.gasAfterPaymentCalculation);\\n    }\\n\\n    function getFeeConfig()\\n        external\\n        view\\n        returns (\\n            uint32 fulfillmentFlatFeeKlayPPMTier1,\\n            uint32 fulfillmentFlatFeeKlayPPMTier2,\\n            uint32 fulfillmentFlatFeeKlayPPMTier3,\\n            uint32 fulfillmentFlatFeeKlayPPMTier4,\\n            uint32 fulfillmentFlatFeeKlayPPMTier5,\\n            uint24 reqsForTier2,\\n            uint24 reqsForTier3,\\n            uint24 reqsForTier4,\\n            uint24 reqsForTier5\\n        )\\n    {\\n        return (\\n            sFeeConfig.fulfillmentFlatFeeKlayPPMTier1,\\n            sFeeConfig.fulfillmentFlatFeeKlayPPMTier2,\\n            sFeeConfig.fulfillmentFlatFeeKlayPPMTier3,\\n            sFeeConfig.fulfillmentFlatFeeKlayPPMTier4,\\n            sFeeConfig.fulfillmentFlatFeeKlayPPMTier5,\\n            sFeeConfig.reqsForTier2,\\n            sFeeConfig.reqsForTier3,\\n            sFeeConfig.reqsForTier4,\\n            sFeeConfig.reqsForTier5\\n        );\\n    }\\n\\n    function getPrepaymentAddress() external view returns (address) {\\n        return address(sPrepayment);\\n    }\\n\\n    /**\\n     * @inheritdoc ICoordinatorBase\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32) {\\n        return sRequestIdToCommitment[requestId];\\n    }\\n\\n    /**\\n     * @inheritdoc ICoordinatorBase\\n     */\\n    function cancelRequest(uint256 requestId) external {\\n        if (!isValidRequestId(requestId)) {\\n            revert NoCorrespondingRequest();\\n        }\\n\\n        if (sRequestOwner[requestId] != msg.sender) {\\n            revert NotRequestOwner();\\n        }\\n\\n        delete sRequestIdToCommitment[requestId];\\n        delete sRequestOwner[requestId];\\n\\n        emit RequestCanceled(requestId);\\n    }\\n\\n    function estimateFee(\\n        uint64 reqCount,\\n        uint8 numSubmission,\\n        uint32 callbackGasLimit\\n    ) public view returns (uint256) {\\n        uint256 serviceFee = calculateServiceFee(reqCount) * numSubmission;\\n        uint256 maxGasCost = tx.gasprice * callbackGasLimit;\\n        return serviceFee + maxGasCost;\\n    }\\n\\n    function estimateFeeByAcc(\\n        uint64 reqCount,\\n        uint8 numSubmission,\\n        uint32 callbackGasLimit,\\n        uint64 accId,\\n        IAccount.AccountType accType\\n    ) public view returns (uint256) {\\n        (, , , uint256 subscriptionPrice) = sPrepayment.getAccountDetail(accId);\\n        uint256 minBalance;\\n        if (accType == IAccount.AccountType.KLAY_DISCOUNT) {\\n            uint256 feeRatio = sPrepayment.getFeeRatio(accId);\\n            uint256 baseFee = estimateFee(reqCount, numSubmission, callbackGasLimit);\\n            minBalance = (baseFee * feeRatio) / 10_000;\\n        } else if (accType == IAccount.AccountType.KLAY_SUBSCRIPTION) {\\n            if (!sPrepayment.getSubscriptionPaid(accId)) {\\n                minBalance = subscriptionPrice;\\n            }\\n        } else if (accType == IAccount.AccountType.KLAY_REGULAR) {\\n            minBalance = estimateFee(reqCount, numSubmission, callbackGasLimit);\\n        }\\n        return minBalance;\\n    }\\n\\n    /**\\n     * @notice Calculate service fee based on tier system of the\\n     * coordinator.\\n     */\\n    function calculateServiceFee(uint64 reqCount) internal view returns (uint256) {\\n        uint32 fulfillmentFlatFeeKlayPPM = getFeeTier(reqCount);\\n        return 1e12 * uint256(fulfillmentFlatFeeKlayPPM);\\n    }\\n\\n    function calculateGasCost(uint256 startGas) internal view returns (uint256) {\\n        return tx.gasprice * (sConfig.gasAfterPaymentCalculation + startGas - gasleft());\\n    }\\n\\n    /**\\n     * @notice Compute fee based on the request count\\n     * @param reqCount number of requests\\n     * @return feePPM fee in KLAY PPM\\n     */\\n    function getFeeTier(uint64 reqCount) internal view returns (uint32) {\\n        FeeConfig memory fc = sFeeConfig;\\n        if (0 <= reqCount && reqCount <= fc.reqsForTier2) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier1;\\n        }\\n        if (fc.reqsForTier2 < reqCount && reqCount <= fc.reqsForTier3) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier2;\\n        }\\n        if (fc.reqsForTier3 < reqCount && reqCount <= fc.reqsForTier4) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier3;\\n        }\\n        if (fc.reqsForTier4 < reqCount && reqCount <= fc.reqsForTier5) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier4;\\n        }\\n        return fc.fulfillmentFlatFeeKlayPPMTier5;\\n    }\\n\\n    /**\\n     * @dev calls target address with exactly gasAmount gas and data as calldata\\n     * or reverts if at least gasAmount gas is not available.\\n     */\\n    function callWithExactGas(\\n        uint256 gasAmount,\\n        address target,\\n        bytes memory data\\n    ) internal returns (bool success) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let g := gas()\\n            // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\\n            // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\\n            // We want to ensure that we revert if gasAmount >  63//64*gas available\\n            // as we do not want to provide them with less, however that check itself costs\\n            // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\\n            // to revert if gasAmount >  63//64*gas available.\\n            if lt(g, GAS_FOR_CALL_EXACT_CHECK) {\\n                revert(0, 0)\\n            }\\n            g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\\n            // if g - g//64 <= gasAmount, revert\\n            // (we subtract g//64 because of EIP-150)\\n            if iszero(gt(sub(g, div(g, 64)), gasAmount)) {\\n                revert(0, 0)\\n            }\\n            // solidity calls check that a contract actually exists at the destination, so we do the same\\n            if iszero(extcodesize(target)) {\\n                revert(0, 0)\\n            }\\n            // call and return whether we succeeded. ignore return data\\n            // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n            success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\\n        }\\n        return success;\\n    }\\n\\n    function isValidRequestId(uint256 requestId) internal view returns (bool) {\\n        if (sRequestIdToCommitment[requestId] != 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function serviceFeeByAcc(uint64 accId, uint32 numSubmission) internal returns (uint256) {\\n        (, uint64 reqCount, , , IAccount.AccountType accType) = sPrepayment.getAccount(accId);\\n        (, , , uint256 subscriptionPrice) = sPrepayment.getAccountDetail(accId);\\n\\n        if (accType == IAccount.AccountType.FIAT_SUBSCRIPTION) {\\n            sPrepayment.increaseSubReqCount(accId);\\n            return 0;\\n        } else {\\n            if (accType == IAccount.AccountType.KLAY_SUBSCRIPTION) {\\n                sPrepayment.increaseSubReqCount(accId);\\n            }\\n            uint256 serviceFee = calculateServiceFee(reqCount) * numSubmission;\\n            if (accType == IAccount.AccountType.KLAY_SUBSCRIPTION) {\\n                if (!sPrepayment.getSubscriptionPaid(accId)) {\\n                    serviceFee = subscriptionPrice;\\n                    sPrepayment.setSubscriptionPaid(accId);\\n                } else {\\n                    return 0;\\n                }\\n            } else if (accType == IAccount.AccountType.KLAY_DISCOUNT) {\\n                serviceFee = (serviceFee * sPrepayment.getFeeRatio(accId)) / 10_000;\\n            }\\n            return serviceFee;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x03be0f177acab30f01798ed9726c821d3b2bea46d1f01a7b2594893184568fa6\",\"license\":\"MIT\"},\"src/v0.1/RequestResponseConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/IRequestResponseCoordinator.sol\\\";\\n\\nabstract contract RequestResponseConsumerBase {\\n    using Orakl for Orakl.Request;\\n\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n\\n    mapping(bytes32 => bytes4) private sJobIdToFunctionSelector;\\n    IRequestResponseCoordinator public immutable COORDINATOR;\\n\\n    /**\\n     * @param _requestResponseCoordinator address of RequestResponseCoordinator contract\\n     */\\n    constructor(address _requestResponseCoordinator) {\\n        COORDINATOR = IRequestResponseCoordinator(_requestResponseCoordinator);\\n\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"uint128\\\"))] = COORDINATOR\\n            .fulfillDataRequestUint128\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"int256\\\"))] = COORDINATOR\\n            .fulfillDataRequestInt256\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bool\\\"))] = COORDINATOR\\n            .fulfillDataRequestBool\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"string\\\"))] = COORDINATOR\\n            .fulfillDataRequestString\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes32\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes32\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes\\n            .selector;\\n    }\\n\\n    /**\\n     * @notice Build a request using the Orakl library\\n     * @param jobId the job specification ID that the request is created for\\n     * @return req request in memory\\n     */\\n    function buildRequest(bytes32 jobId) internal view returns (Orakl.Request memory req) {\\n        return req.initialize(jobId, address(COORDINATOR), sJobIdToFunctionSelector[jobId]);\\n    }\\n\\n    modifier verifyRawFulfillment() {\\n        address coordinatorAddress = address(COORDINATOR);\\n        if (msg.sender != coordinatorAddress) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x067ffce4a5c64d0af5f1d0d4de4055d3746a2e1ed960fcee800f67b7fe85b61a\",\"license\":\"MIT\"},\"src/v0.1/RequestResponseConsumerFulfill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./RequestResponseConsumerBase.sol\\\";\\n\\nabstract contract RequestResponseConsumerFulfillUint128 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, uint128 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        uint128 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillInt256 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, int256 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        int256 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBool is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bool response) internal virtual;\\n\\n    function rawFulfillDataRequest(uint256 requestId, bool response) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillString is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, string memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        string memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBytes32 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes32 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes32 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBytes is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\",\"keccak256\":\"0x05d2cb95518c33778101579ab9a90853eebb005a9c64639ee8dd947fa5302edd\",\"license\":\"MIT\"},\"src/v0.1/RequestResponseCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/IPrepayment.sol\\\";\\nimport \\\"./interfaces/ITypeAndVersion.sol\\\";\\nimport \\\"./interfaces/IRequestResponseCoordinatorBase.sol\\\";\\nimport \\\"./RequestResponseConsumerFulfill.sol\\\";\\nimport \\\"./CoordinatorBase.sol\\\";\\nimport \\\"./libraries/Orakl.sol\\\";\\nimport \\\"./libraries/Median.sol\\\";\\nimport \\\"./libraries/MajorityVoting.sol\\\";\\n\\n/// @title Orakl Network RequestResponseCoordinator\\n/// @author Bisonai\\n/// @notice Accepts requests for off-chain data either through\\n/// [regular] or [temporary] account by calling `requestData`\\n/// function. Consumers can choose what data type (`jobId`) they want\\n/// to receive the requested data in, and how many oracles\\n/// (`numSubmission`) they want to participate on an aggregated\\n/// answer. Consumers can define the data source and postprocessing\\n/// steps that should be applied on data received from API. The request is\\n/// concluded by emitting `DataRequested` event which includes all\\n/// necessary metadata to provide the requested off-chain\\n/// data. Off-chain oracles that are registered within the\\n/// `RequestResponseCoordinator` then compete for delivering the\\n/// requested data back to on-chain because only a limited number of\\n/// oracle can submit the requested answer. Answers from off-chain oracles\\n/// are being collected in contract storage, and the last requested\\n/// off-chain oracle that submits its answer will also execute\\n/// consumer's fulfillment function, distributes reward to all\\n/// participating oracles, and cleanup the storage.\\ncontract RequestResponseCoordinator is\\n    CoordinatorBase,\\n    IRequestResponseCoordinatorBase,\\n    ITypeAndVersion\\n{\\n    uint8 public constant MAX_ORACLES = 255;\\n\\n    using Orakl for Orakl.Request;\\n\\n    struct Submission {\\n        address[] oracles; // oracles that submitted response\\n        mapping(address => bool) submitted;\\n    }\\n\\n    /* requestId */\\n    /* submission details */\\n    mapping(uint256 => Submission) sSubmission;\\n\\n    /* oracle */\\n    /* registration status */\\n    mapping(address => bool) private sIsOracleRegistered;\\n\\n    /* jobId */\\n    /* ability to request for the job */\\n    mapping(bytes32 => bool) private sJobId;\\n\\n    mapping(uint256 => int256[]) private sRequestToSubmissionInt256;\\n    mapping(uint256 => uint128[]) private sRequestToSubmissionUint128;\\n    mapping(uint256 => bool[]) private sRequestToSubmissionBool;\\n\\n    error TooManyOracles();\\n    error UnregisteredOracleFulfillment(address oracle);\\n    error InvalidJobId();\\n    error InvalidNumSubmission();\\n    error OracleAlreadySubmitted();\\n    error IncompatibleJobId();\\n    error InvalidAccRequest();\\n\\n    event OracleRegistered(address oracle);\\n    event OracleDeregistered(address oracle);\\n    event PrepaymentSet(address prepayment);\\n    event DataRequested(\\n        uint256 indexed requestId,\\n        bytes32 jobId,\\n        uint64 indexed accId,\\n        uint32 callbackGasLimit,\\n        address indexed sender,\\n        bool isDirectPayment,\\n        uint8 numSubmission,\\n        bytes data\\n    );\\n    event DataRequestFulfilledUint128(\\n        uint256 indexed requestId,\\n        uint256 response,\\n        uint256 payment,\\n        bool success\\n    );\\n    event DataRequestFulfilledInt256(\\n        uint256 indexed requestId,\\n        int256 response,\\n        uint256 payment,\\n        bool success\\n    );\\n    event DataRequestFulfilledBool(\\n        uint256 indexed requestId,\\n        bool response,\\n        uint256 payment,\\n        bool success\\n    );\\n    event DataRequestFulfilledString(\\n        uint256 indexed requestId,\\n        string response,\\n        uint256 payment,\\n        bool success\\n    );\\n    event DataRequestFulfilledBytes32(\\n        uint256 indexed requestId,\\n        bytes32 response,\\n        uint256 payment,\\n        bool success\\n    );\\n    event DataRequestFulfilledBytes(\\n        uint256 indexed requestId,\\n        bytes response,\\n        uint256 payment,\\n        bool success\\n    );\\n    event DataSubmitted(address oracle, uint256 requestId);\\n\\n    constructor(address prepayment) {\\n        sJobId[keccak256(abi.encodePacked(\\\"uint128\\\"))] = true;\\n        sJobId[keccak256(abi.encodePacked(\\\"int256\\\"))] = true;\\n        sJobId[keccak256(abi.encodePacked(\\\"bool\\\"))] = true;\\n        sJobId[keccak256(abi.encodePacked(\\\"string\\\"))] = true;\\n        sJobId[keccak256(abi.encodePacked(\\\"bytes32\\\"))] = true;\\n        sJobId[keccak256(abi.encodePacked(\\\"bytes\\\"))] = true;\\n\\n        sPrepayment = IPrepayment(prepayment);\\n        emit PrepaymentSet(prepayment);\\n    }\\n\\n    /**\\n     * @notice Register an oracle\\n     * @param oracle address of the oracle\\n     */\\n    function registerOracle(address oracle) external onlyOwner {\\n        if (sOracles.length >= MAX_ORACLES) {\\n            revert TooManyOracles();\\n        }\\n\\n        if (sIsOracleRegistered[oracle]) {\\n            revert OracleAlreadyRegistered(oracle);\\n        }\\n        sOracles.push(oracle);\\n        sIsOracleRegistered[oracle] = true;\\n        emit OracleRegistered(oracle);\\n    }\\n\\n    /**\\n     * @notice Deregister an oracle\\n     * @param oracle address of the oracle\\n     */\\n    function deregisterOracle(address oracle) external onlyOwner {\\n        if (!sIsOracleRegistered[oracle]) {\\n            revert NoSuchOracle(oracle);\\n        }\\n        delete sIsOracleRegistered[oracle];\\n\\n        uint256 oraclesLength = sOracles.length;\\n        for (uint256 i = 0; i < oraclesLength; ++i) {\\n            if (sOracles[i] == oracle) {\\n                address last = sOracles[oraclesLength - 1];\\n                sOracles[i] = last;\\n                sOracles.pop();\\n                break;\\n            }\\n        }\\n\\n        emit OracleDeregistered(oracle);\\n    }\\n\\n    /**\\n     * @inheritdoc IRequestResponseCoordinatorBase\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint64 accId,\\n        uint8 numSubmission\\n    ) external nonReentrant returns (uint256) {\\n        (uint256 balance, uint64 reqCount, , , IAccount.AccountType accType) = sPrepayment\\n            .getAccount(accId);\\n        bool isValidReq = sPrepayment.isValidReq(accId);\\n        if (!isValidReq) {\\n            revert InvalidAccRequest();\\n        }\\n        uint256 minBalance = estimateFeeByAcc(\\n            reqCount,\\n            numSubmission,\\n            callbackGasLimit,\\n            accId,\\n            accType\\n        );\\n\\n        if (balance < minBalance) {\\n            revert InsufficientPayment(balance, minBalance);\\n        }\\n\\n        bool isDirectPayment = false;\\n        uint256 requestId = requestData(\\n            req,\\n            accId,\\n            callbackGasLimit,\\n            numSubmission,\\n            isDirectPayment\\n        );\\n\\n        return requestId;\\n    }\\n\\n    /**\\n     * @inheritdoc IRequestResponseCoordinatorBase\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) external payable nonReentrant returns (uint256) {\\n        uint64 reqCount = 0;\\n        uint256 fee = estimateFee(reqCount, numSubmission, callbackGasLimit);\\n        if (msg.value < fee) {\\n            revert InsufficientPayment(msg.value, fee);\\n        }\\n\\n        uint64 accId = sPrepayment.createTemporaryAccount(msg.sender);\\n        bool isDirectPayment = true;\\n        uint256 requestId = requestData(\\n            req,\\n            accId,\\n            callbackGasLimit,\\n            numSubmission,\\n            isDirectPayment\\n        );\\n        sPrepayment.depositTemporary{value: fee}(accId);\\n\\n        // Refund extra $KLAY\\n        uint256 remaining = msg.value - fee;\\n        if (remaining > 0) {\\n            (bool sent, ) = refundRecipient.call{value: remaining}(\\\"\\\");\\n            if (!sent) {\\n                revert RefundFailure();\\n            }\\n        }\\n\\n        return requestId;\\n    }\\n\\n    function fulfillDataRequestUint128(\\n        uint256 requestId,\\n        uint128 response,\\n        RequestCommitment memory rc\\n    ) external nonReentrant {\\n        uint256 startGas = gasleft();\\n        if (rc.jobId != keccak256(abi.encodePacked(\\\"uint128\\\"))) {\\n            revert IncompatibleJobId();\\n        }\\n        validateDataResponse(rc, requestId);\\n\\n        uint128[] storage arrRes = sRequestToSubmissionUint128[requestId];\\n        arrRes.push(response);\\n\\n        sSubmission[requestId].submitted[msg.sender] = true;\\n        address[] storage oracles = sSubmission[requestId].oracles;\\n        oracles.push(msg.sender);\\n\\n        if (arrRes.length < rc.numSubmission) {\\n            emit DataSubmitted(msg.sender, requestId);\\n            return;\\n        }\\n\\n        int256[] memory responses = uint128ToInt256(arrRes);\\n        uint128 aggregatedResponse = uint128(uint256((Median.calculate(responses))));\\n\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillUint128.rawFulfillDataRequest.selector,\\n            requestId,\\n            aggregatedResponse\\n        );\\n        bool success = fulfill(resp, rc);\\n        address[] memory oraclesToPay = cleanupAfterFulfillment(requestId);\\n        delete sRequestToSubmissionUint128[requestId];\\n        uint256 payment = pay(rc, startGas, oraclesToPay);\\n\\n        emit DataRequestFulfilledUint128(requestId, response, payment, success);\\n    }\\n\\n    function fulfillDataRequestInt256(\\n        uint256 requestId,\\n        int256 response,\\n        RequestCommitment memory rc\\n    ) external nonReentrant {\\n        uint256 startGas = gasleft();\\n        if (rc.jobId != keccak256(abi.encodePacked(\\\"int256\\\"))) {\\n            revert IncompatibleJobId();\\n        }\\n        validateDataResponse(rc, requestId);\\n\\n        sSubmission[requestId].submitted[msg.sender] = true;\\n        int256[] storage arrRes = sRequestToSubmissionInt256[requestId];\\n        arrRes.push(response);\\n\\n        address[] storage oracles = sSubmission[requestId].oracles;\\n        oracles.push(msg.sender);\\n\\n        if (arrRes.length < rc.numSubmission) {\\n            emit DataSubmitted(msg.sender, requestId);\\n            return;\\n        }\\n\\n        int256 aggregatedResponse = Median.calculate(arrRes);\\n\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillInt256.rawFulfillDataRequest.selector,\\n            requestId,\\n            aggregatedResponse\\n        );\\n        bool success = fulfill(resp, rc);\\n        address[] memory oraclesToPay = cleanupAfterFulfillment(requestId);\\n        delete sRequestToSubmissionInt256[requestId];\\n        uint256 payment = pay(rc, startGas, oraclesToPay);\\n\\n        emit DataRequestFulfilledInt256(requestId, response, payment, success);\\n    }\\n\\n    function fulfillDataRequestBool(\\n        uint256 requestId,\\n        bool response,\\n        RequestCommitment memory rc\\n    ) external nonReentrant {\\n        uint256 startGas = gasleft();\\n        if (rc.jobId != keccak256(abi.encodePacked(\\\"bool\\\"))) {\\n            revert IncompatibleJobId();\\n        }\\n        validateDataResponse(rc, requestId);\\n\\n        sSubmission[requestId].submitted[msg.sender] = true;\\n        bool[] storage arrRes = sRequestToSubmissionBool[requestId];\\n        arrRes.push(response);\\n\\n        address[] storage oracles = sSubmission[requestId].oracles;\\n        oracles.push(msg.sender);\\n\\n        if (arrRes.length < rc.numSubmission) {\\n            emit DataSubmitted(msg.sender, requestId);\\n            return;\\n        }\\n\\n        bool aggregatedResponse = MajorityVoting.voting(arrRes);\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillBool.rawFulfillDataRequest.selector,\\n            requestId,\\n            aggregatedResponse\\n        );\\n        bool success = fulfill(resp, rc);\\n        address[] memory oraclesToPay = cleanupAfterFulfillment(requestId);\\n        delete sRequestToSubmissionBool[requestId];\\n        uint256 payment = pay(rc, startGas, oraclesToPay);\\n\\n        emit DataRequestFulfilledBool(requestId, response, payment, success);\\n    }\\n\\n    function fulfillDataRequestString(\\n        uint256 requestId,\\n        string memory response,\\n        RequestCommitment memory rc\\n    ) external nonReentrant {\\n        uint256 startGas = gasleft();\\n        if (rc.jobId != keccak256(abi.encodePacked(\\\"string\\\"))) {\\n            revert IncompatibleJobId();\\n        }\\n        validateDataResponse(rc, requestId);\\n\\n        sSubmission[requestId].submitted[msg.sender] = true;\\n        address[] storage oracles = sSubmission[requestId].oracles;\\n        oracles.push(msg.sender);\\n\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillString.rawFulfillDataRequest.selector,\\n            requestId,\\n            response\\n        );\\n        bool success = fulfill(resp, rc);\\n        address[] memory oraclesToPay = cleanupAfterFulfillment(requestId);\\n        uint256 payment = pay(rc, startGas, oraclesToPay);\\n\\n        emit DataRequestFulfilledString(requestId, response, payment, success);\\n    }\\n\\n    function fulfillDataRequestBytes32(\\n        uint256 requestId,\\n        bytes32 response,\\n        RequestCommitment memory rc\\n    ) external nonReentrant {\\n        uint256 startGas = gasleft();\\n        if (rc.jobId != keccak256(abi.encodePacked(\\\"bytes32\\\"))) {\\n            revert IncompatibleJobId();\\n        }\\n        validateDataResponse(rc, requestId);\\n\\n        sSubmission[requestId].submitted[msg.sender] = true;\\n        address[] storage oracles = sSubmission[requestId].oracles;\\n        oracles.push(msg.sender);\\n\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillBytes32.rawFulfillDataRequest.selector,\\n            requestId,\\n            response\\n        );\\n        bool success = fulfill(resp, rc);\\n        address[] memory oraclesToPay = cleanupAfterFulfillment(requestId);\\n        uint256 payment = pay(rc, startGas, oraclesToPay);\\n\\n        emit DataRequestFulfilledBytes32(requestId, response, payment, success);\\n    }\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response,\\n        RequestCommitment memory rc\\n    ) external nonReentrant {\\n        uint256 startGas = gasleft();\\n        if (rc.jobId != keccak256(abi.encodePacked(\\\"bytes\\\"))) {\\n            revert IncompatibleJobId();\\n        }\\n        validateDataResponse(rc, requestId);\\n\\n        sSubmission[requestId].submitted[msg.sender] = true;\\n        address[] storage oracles = sSubmission[requestId].oracles;\\n        oracles.push(msg.sender);\\n\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillBytes.rawFulfillDataRequest.selector,\\n            requestId,\\n            response\\n        );\\n        bool success = fulfill(resp, rc);\\n        address[] memory oraclesToPay = cleanupAfterFulfillment(requestId);\\n        uint256 payment = pay(rc, startGas, oraclesToPay);\\n\\n        emit DataRequestFulfilledBytes(requestId, response, payment, success);\\n    }\\n\\n    /**\\n     * @notice The type and version of this contract\\n     * @return Type and version string\\n     */\\n    function typeAndVersion() external pure virtual override returns (string memory) {\\n        return \\\"RequestResponseCoordinator v0.1\\\";\\n    }\\n\\n    /**\\n     * @notice Find out whether given oracle address was registered.\\n     * @return true when oracle address registered, otherwise false\\n     */\\n    function isOracleRegistered(address oracle) external view returns (bool) {\\n        return sIsOracleRegistered[oracle];\\n    }\\n\\n    /**\\n     * @inheritdoc IRequestResponseCoordinatorBase\\n     */\\n    function validateNumSubmission(bytes32 jobId, uint8 numSubmission) public view {\\n        if (!sJobId[jobId]) {\\n            revert InvalidJobId();\\n        }\\n\\n        if (numSubmission == 0) {\\n            revert InvalidNumSubmission();\\n        } else if (jobId == keccak256(abi.encodePacked(\\\"bool\\\")) && numSubmission % 2 == 0) {\\n            revert InvalidNumSubmission();\\n        } else if (\\n            jobId == keccak256(abi.encodePacked(\\\"uint128\\\")) ||\\n            jobId == keccak256(abi.encodePacked(\\\"int256\\\")) ||\\n            jobId == keccak256(abi.encodePacked(\\\"bool\\\"))\\n        ) {\\n            uint8 maxSubmission = uint8(sOracles.length / 2);\\n            if (numSubmission != 1 && numSubmission > maxSubmission) {\\n                revert InvalidNumSubmission();\\n            }\\n        }\\n    }\\n\\n    function computeRequestId(\\n        address sender,\\n        uint64 accId,\\n        uint64 nonce\\n    ) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(sender, accId, nonce)));\\n    }\\n\\n    /**\\n     * @inheritdoc ICoordinatorBase\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) public view returns (bool) {\\n        uint256 oraclesLength = sOracles.length;\\n        for (uint256 i = 0; i < oraclesLength; ++i) {\\n            uint256 requestId = computeRequestId(consumer, accId, nonce);\\n            if (isValidRequestId(requestId)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        bool isDirectPayment\\n    ) private returns (uint256) {\\n        validateNumSubmission(req.id, numSubmission);\\n\\n        if (!sPrepayment.isValidAccount(accId, msg.sender)) {\\n            revert InvalidConsumer(accId, msg.sender);\\n        }\\n\\n        if (callbackGasLimit > sConfig.maxGasLimit) {\\n            revert GasLimitTooBig(callbackGasLimit, sConfig.maxGasLimit);\\n        }\\n\\n        uint64 nonce = sPrepayment.increaseNonce(accId, msg.sender);\\n\\n        uint256 requestId = computeRequestId(msg.sender, accId, nonce);\\n        sRequestIdToCommitment[requestId] = computeCommitment(\\n            requestId,\\n            block.number,\\n            accId,\\n            numSubmission,\\n            callbackGasLimit,\\n            msg.sender,\\n            isDirectPayment,\\n            req.id\\n        );\\n\\n        sRequestOwner[requestId] = msg.sender;\\n\\n        emit DataRequested(\\n            requestId,\\n            req.id,\\n            accId,\\n            callbackGasLimit,\\n            msg.sender,\\n            isDirectPayment,\\n            numSubmission,\\n            req.buf.buf\\n        );\\n\\n        return requestId;\\n    }\\n\\n    function validateDataResponse(RequestCommitment memory rc, uint256 requestId) private view {\\n        if (!sIsOracleRegistered[msg.sender]) {\\n            revert UnregisteredOracleFulfillment(msg.sender);\\n        }\\n\\n        if (sSubmission[requestId].submitted[msg.sender]) {\\n            revert OracleAlreadySubmitted();\\n        }\\n\\n        bytes32 commitment = sRequestIdToCommitment[requestId];\\n        if (commitment == 0) {\\n            revert NoCorrespondingRequest();\\n        }\\n\\n        if (\\n            commitment !=\\n            computeCommitment(\\n                requestId,\\n                rc.blockNum,\\n                rc.accId,\\n                rc.numSubmission,\\n                rc.callbackGasLimit,\\n                rc.sender,\\n                rc.isDirectPayment,\\n                rc.jobId\\n            )\\n        ) {\\n            revert IncorrectCommitment();\\n        }\\n    }\\n\\n    function fulfill(bytes memory resp, RequestCommitment memory rc) private returns (bool) {\\n        // Call with explicitly the amount of callback gas requested\\n        // Important to not let them exhaust the gas budget and avoid oracle payment.\\n        // Do not allow any non-view/non-pure coordinator functions to be called\\n        // during the consumers callback code via reentrancyLock.\\n        // Note that callWithExactGas will revert if we do not have sufficient gas\\n        // to give the callee their requested amount.\\n        sConfig.reentrancyLock = true;\\n        bool success = callWithExactGas(rc.callbackGasLimit, rc.sender, resp);\\n        sConfig.reentrancyLock = false;\\n        return success;\\n    }\\n\\n    function pay(\\n        RequestCommitment memory rc,\\n        uint256 startGas,\\n        address[] memory oracles\\n    ) private returns (uint256) {\\n        uint256 oraclesLength = oracles.length;\\n\\n        if (rc.isDirectPayment) {\\n            // [temporary] account\\n            (uint256 totalFee, uint256 operatorFee) = sPrepayment.chargeFeeTemporary(rc.accId);\\n\\n            if (operatorFee > 0) {\\n                uint256 paid;\\n                uint256 feePerOperator = operatorFee / oraclesLength;\\n\\n                for (uint8 i = 0; i < oraclesLength - 1; ++i) {\\n                    sPrepayment.chargeOperatorFeeTemporary(feePerOperator, oracles[i]);\\n                    paid += feePerOperator;\\n                }\\n\\n                sPrepayment.chargeOperatorFeeTemporary(\\n                    operatorFee - paid,\\n                    oracles[oraclesLength - 1]\\n                );\\n            }\\n\\n            return totalFee;\\n        } else {\\n            // [regular] account\\n\\n            uint256 serviceFee = serviceFeeByAcc(rc.accId, rc.numSubmission);\\n            if (serviceFee > 0) {\\n                uint256 operatorFee = sPrepayment.chargeFee(rc.accId, serviceFee);\\n                uint256 feePerOperator = operatorFee / oraclesLength;\\n                uint256 paid;\\n                for (uint256 i = 0; i < oraclesLength - 1; ++i) {\\n                    sPrepayment.chargeOperatorFee(rc.accId, feePerOperator, oracles[i]);\\n                    paid += feePerOperator;\\n                }\\n                uint256 gasFee = calculateGasCost(startGas);\\n                sPrepayment.chargeOperatorFee(\\n                    rc.accId,\\n                    (operatorFee - paid) + gasFee,\\n                    oracles[oraclesLength - 1]\\n                );\\n                return gasFee + serviceFee;\\n            } else return 0;\\n        }\\n    }\\n\\n    function cleanupAfterFulfillment(uint256 requestId) private returns (address[] memory) {\\n        address[] memory oracles = sSubmission[requestId].oracles;\\n\\n        for (uint8 i = 0; i < oracles.length; ++i) {\\n            delete sSubmission[requestId].submitted[oracles[i]];\\n        }\\n\\n        delete sSubmission[requestId];\\n        delete sRequestIdToCommitment[requestId];\\n        delete sRequestOwner[requestId];\\n\\n        return oracles;\\n    }\\n\\n    /**\\n     * @notice Loss-less conversion of array items from uint128 to int256.\\n     * @dev uint128: 0     - 2^128-1\\n     * @dev int256:  2^128 - 2^128-1\\n     * @param arr - array of uint128 values\\n     * @return array of int256 values\\n     */\\n    function uint128ToInt256(uint128[] memory arr) private pure returns (int256[] memory) {\\n        int256[] memory responses = new int256[](arr.length);\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            responses[i] = int256(uint256(arr[i]));\\n        }\\n        return responses;\\n    }\\n\\n    function computeCommitment(\\n        uint256 requestId,\\n        uint256 blockNumber,\\n        uint64 accId,\\n        uint8 numSubmission,\\n        uint32 callbackGasLimit,\\n        address sender,\\n        bool isDirectPayment,\\n        bytes32 jobId\\n    ) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    requestId,\\n                    blockNumber,\\n                    accId,\\n                    callbackGasLimit,\\n                    numSubmission,\\n                    sender,\\n                    isDirectPayment,\\n                    jobId\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x71292483f939d7363d58f522759bcfa9e2403891239ec7a5a4759e1fb227a948\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IAccount {\\n    /// READ-ONLY FUNCTIONS /////////////////////////////////////////////////////\\n    enum AccountType {\\n        TEMPORARY,\\n        FIAT_SUBSCRIPTION,\\n        KLAY_SUBSCRIPTION,\\n        KLAY_DISCOUNT,\\n        KLAY_REGULAR\\n    }\\n\\n    /**\\n     * @notice Get an account information.\\n     * @return balance - KLAY balance of the account in juels.\\n     * @return reqCount - number of requests for this account, determines fee tier.\\n     * @return owner - owner of the account.\\n     * @return consumers - list of consumer address which are able to use this account.\\n     * @return accType\\n     */\\n    function getAccount()\\n        external\\n        view\\n        returns (\\n            uint256 balance,\\n            uint64 reqCount,\\n            address owner,\\n            address[] memory consumers,\\n            AccountType accType\\n        );\\n\\n    /**\\n     * @notice Return an account ID that is associated with this account.\\n     * @return account ID\\n     */\\n    function getAccountId() external returns (uint64);\\n\\n    /**\\n     * @notice Return an amount of KLAY held in the Account contract.\\n     * @return balance of account\\n     */\\n    function getBalance() external returns (uint256);\\n\\n    /**\\n     * @notice Return the number of requests created through the\\n     * @notice account.\\n     * @return number of requests\\n     */\\n    function getReqCount() external returns (uint64);\\n\\n    /**\\n     * @notice Return the current owner of account.\\n     * @return owner address\\n     */\\n    function getOwner() external returns (address);\\n\\n    /**\\n     * @notice Return the consumers assigned to the account.\\n     * @return list of consumer addresses\\n     */\\n    function getConsumers() external returns (address[] memory);\\n\\n    /**\\n     * @notice Return the requested owner of account.\\n     * @return requested owner address\\n     */\\n    function getRequestedOwner() external returns (address);\\n\\n    /**\\n     * @notice Return the current nonce of given consumer.\\n     * @return consumer nonce\\n     */\\n    function getNonce(address consumer) external view returns (uint64);\\n\\n    /**\\n     * @notice Return the address of payment solution associated with account.\\n     * @return address of payment solution\\n     */\\n    function getPaymentSolution() external view returns (address);\\n\\n    /// STATE-ALTERING FUNCTIONS ////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Increase nonce for given consumer.\\n     * @param consumer - Address of consumer\\n     */\\n    function increaseNonce(address consumer) external returns (uint64);\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @param newOwner - proposed new owner of the account\\n     */\\n    function requestAccountOwnerTransfer(address newOwner) external;\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @dev will revert if original owner of accId has\\n     * not requested that msg.sender become the new owner.\\n     * @param newOwner - proposed new owner of the account\\n     */\\n    function acceptAccountOwnerTransfer(address newOwner) external;\\n\\n    /**\\n     * @notice Add a consumer to an account.\\n     * @param consumer - New consumer which can use the account\\n     */\\n    function addConsumer(address consumer) external;\\n\\n    /**\\n     * @notice Remove a consumer from a account.\\n     * @param consumer - Consumer to remove from the account\\n     */\\n    function removeConsumer(address consumer) external;\\n\\n    /**\\n     * @notice Withdraw KLAY from account.\\n     * @dev Only account owner can withdraw KLAY.\\n     * @param amount - KLAY amount to be withdrawn\\n     */\\n    function withdraw(uint256 amount) external returns (bool, uint256);\\n\\n    /**\\n     * @notice Burn part of fee and charge protocol fee for a service\\n     * connected to account.\\n     * @param burnFee - $KLAY amount to be burnt\\n     * @param protocolFee - $KLAY amount to be sent to protocol fee recipient\\n     * @param protocolFeeRecipient - address of Orakl Network\\n     */\\n    function chargeFee(uint256 burnFee, uint256 protocolFee, address protocolFeeRecipient) external;\\n\\n    /**\\n     * @notice Charge operator fee for a service connected to account.\\n     * @param operatorFee - $KLAY amount to be send to oracle operator\\n     * fee recipient\\n     * @param operatorFeeRecipient - address of Orakl Network\\n     */\\n    function chargeOperatorFee(uint256 operatorFee, address operatorFeeRecipient) external;\\n\\n    /**\\n     * @notice Destroy the smart contract and send the remaining $KLAY\\n     * @notice to `to` address.\\n     * @param to - Where to send the remaining KLAY to\\n     */\\n    function cancelAccount(address to) external;\\n\\n    function getAccountDetail() external view returns (uint256, uint256, uint256, uint256);\\n\\n    function getSubscriptionPaid() external view returns (bool);\\n\\n    function updateAccountDetail(\\n        uint256 startDate,\\n        uint256 period,\\n        uint256 reqPeriodCount,\\n        uint256 subscriptionPrice\\n    ) external;\\n\\n    function setSubscriptionPaid() external;\\n\\n    function isValidReq() external view returns (bool);\\n\\n    function getFeeRatio() external view returns (uint256);\\n\\n    function setFeeRatio(uint256 disCount) external;\\n\\n    function increaseSubReqCount() external;\\n}\\n\",\"keccak256\":\"0xbe360ed3c03e7a26ae6b20f9b4c2d7428d516873eab21e780ed8d315a658063d\",\"license\":\"MIT\"},\"src/v0.1/interfaces/ICoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface ICoordinatorBase {\\n    // Fee configuration that separates fees based on the number of\\n    // requests created per account. This applies only to [regular]\\n    // account.\\n    struct FeeConfig {\\n        // Flat fee charged per fulfillment in millionths of KLAY\\n        // So fee range is [0, 2^32/10^6].\\n        uint32 fulfillmentFlatFeeKlayPPMTier1;\\n        uint32 fulfillmentFlatFeeKlayPPMTier2;\\n        uint32 fulfillmentFlatFeeKlayPPMTier3;\\n        uint32 fulfillmentFlatFeeKlayPPMTier4;\\n        uint32 fulfillmentFlatFeeKlayPPMTier5;\\n        uint24 reqsForTier2;\\n        uint24 reqsForTier3;\\n        uint24 reqsForTier4;\\n        uint24 reqsForTier5;\\n    }\\n\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting\\n     * after completing the gas measurement\\n     * @param feeConfig fee tier configuration\\n     */\\n    function setConfig(\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        FeeConfig memory feeConfig\\n    ) external;\\n\\n    /**\\n     * @notice Check to see if there exists a request commitment\\n     * consumers for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request\\n     * for the account, false otherwise.\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Get request commitment.\\n     * @param requestId id of request\\n     * @return commmitment value that can be used to determine whether\\n     * a request is fulfilled or not. If `requestId` is valid and\\n     * commitment equals to bytes32(0), the request was fulfilled.\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Canceling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n\\n    /**\\n     * @notice Access address for prepayment associated with\\n     * @notice coordinator.\\n     * @return prepayment address\\n     */\\n    function getPrepaymentAddress() external returns (address);\\n}\\n\",\"keccak256\":\"0xfe05fee3374629efcc792974be00bf20bcc87e3b5dd6ed9791461bcc5e6caf43\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IPrepayment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"./IAccount.sol\\\";\\n\\ninterface IPrepayment {\\n    /// READ-ONLY FUNCTIONS /////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Returns `true` when a `consumer` is registered under\\n     * @notice `accId`, otherwise returns `false`.\\n     * @dev This function can be used for checking validity of both\\n     * @dev [regular] and [temporary] account.\\n     * @param accId - ID of the account\\n     */\\n    function isValidAccount(uint64 accId, address consumer) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the balance of given account.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account. If invalid `accId` (ID not assigned to any\\n     * @dev account) is passed, zero balance will be always returned.\\n     * @param accId - ID of the account\\n     * @return balance of account\\n     */\\n    function getBalance(uint64 accId) external view returns (uint256);\\n\\n    /**\\n     * @notice Return the number of requests created through the\\n     * @notice account.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account.\\n     * @param accId - ID of the account\\n     * @return number of requests\\n     */\\n    function getReqCount(uint64 accId) external view returns (uint64);\\n\\n    /**\\n     * @notice Get an account information.\\n     * @dev This function can be used for both [regular] and\\n     * @dev [temporary] account.\\n     * @param accId - ID of the account\\n     * @return balance - $KLAY balance of the account in juels.\\n     * @return reqCount - number of requests for this account, determines fee tier.\\n     * @return owner - owner of the account.\\n     * @return consumers - list of consumer address which are able to use this account.\\n     */\\n    function getAccount(\\n        uint64 accId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 balance,\\n            uint64 reqCount,\\n            address owner,\\n            address[] memory consumers,\\n            IAccount.AccountType accType\\n        );\\n\\n    /**\\n     * @notice Get address of account owner.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account.\\n     * @param accId - ID of the account\\n     */\\n    function getAccountOwner(uint64 accId) external returns (address);\\n\\n    /**\\n     * @notice Get nonce for specified `consumer` in account denoted by `accId`.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account. [temporary] account does not have a notion of a nonce.\\n     * @dev When an invalid `accId` is passed, transaction is\\n     * @dev reverted. When an invalid `consumer` is passed, 0 zero\\n     * @dev nonce is returned that represents an unregistered consumer.\\n     * @param accId - ID of the account\\n     * @param consumer - consumer address\\n     */\\n    function getNonce(uint64 accId, address consumer) external view returns (uint64);\\n\\n    /*\\n     * @notice Check to see if there exists a request commitment\\n     * @notice for all consumers and coordinators for a given\\n     * @notice [permanent] account.\\n     * @dev Use to reject account cancelation while outstanding\\n     * @dev request are present.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request for the account, false\\n     * otherwise.\\n     */\\n    function pendingRequestExists(uint64 accId) external view returns (bool);\\n\\n    /*\\n     * @notice Check to see if there exists a request commitment\\n     * @notice for an account owner of [temporary] account across\\n     * @notice all coordinators.\\n     * @dev Use to reject balance withdrawal while outstanding\\n     * @dev request are present.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request for the account, false\\n     * otherwise.\\n     */\\n    function pendingRequestExistsTemporary(uint64 accId) external view returns (bool);\\n\\n    /// STATE-ALTERING FUNCTIONS ////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Create a [regular] account.\\n     * @dev This function deploys a new `Account` contract (defined at\\n     * @dev Account.sol) and connect it with the `Prepayment` contract.\\n     * @dev You can add or remove the consumer dynamically with\\n     * @dev `addConsumer` or `removeConsumer` functions,\\n     * @dev respectively. To fund the account, use deposit function.\\n     * @return accId - A unique account id\\n     */\\n    function createAccount() external returns (uint64);\\n\\n    function createFiatSubscriptionAccount(\\n        uint256 startDate,\\n        uint256 period,\\n        uint256 reqPeriodCount,\\n        address accOwner\\n    ) external returns (uint64);\\n\\n    function createKlaySubscriptionAccount(\\n        uint256 startDate,\\n        uint256 period,\\n        uint256 reqPeriodCount,\\n        uint256 subscriptionPrice,\\n        address accOwner\\n    ) external returns (uint64);\\n\\n    function createKlayDiscountAccount(\\n        uint256 feeRatio,\\n        address accOwner\\n    ) external returns (uint64);\\n\\n    /**\\n     * @notice Create a temporary account to be used with a single\\n     * @notice service request.\\n     * @param - account owner\\n     * @return accId - A unique account id\\n     */\\n    function createTemporaryAccount(address owner) external returns (uint64);\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @dev Only [regular] account owner can be transferred.\\n     * @param accId - ID of the account\\n     * @param newOwner - proposed new owner of the account\\n     */\\n    function requestAccountOwnerTransfer(uint64 accId, address newOwner) external;\\n\\n    /**\\n     * @notice Accept account owner transfer.\\n     * @dev The function will revert inside of the\\n     * @dev `Account.acceptAccountOwnerTransfer` if original owner of\\n     * @dev `accId` has not requested the `msg.sender` to become the\\n     * @dev new owner.\\n     * @param accId - ID of the account\\n     */\\n    function acceptAccountOwnerTransfer(uint64 accId) external;\\n\\n    /**\\n     * @notice Cancel account\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account. If there is any pending request, the account\\n     * @dev cannot be canceled.\\n     * @param accId - ID of the account\\n     * @param to - Where to send the remaining $KLAY to\\n     */\\n    function cancelAccount(uint64 accId, address to) external;\\n\\n    /**\\n     * @notice Add a consumer to an account.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account. If called with [temporary] account, the\\n     * @dev transaction will be reverted.\\n     * @param accId - ID of the account\\n     * @param consumer - New consumer which can use the account\\n     */\\n    function addConsumer(uint64 accId, address consumer) external;\\n\\n    /**\\n     * @notice Remove a consumer from a account.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account. If called with [temporary] account, the\\n     * @dev transaction will be reverted.\\n     * @param accId - ID of the account\\n     * @param consumer - Consumer to remove from the account\\n     */\\n    function removeConsumer(uint64 accId, address consumer) external;\\n\\n    /**\\n     * @notice Deposit $KLAY to [regular] account.\\n     * @notice Anybody can deposit $KLAY, there are no restrictions.\\n     * @param accId - ID of the account\\n     */\\n    function deposit(uint64 accId) external payable;\\n\\n    /**\\n     * @notice Deposit $KLAY to [temporary] account.\\n     * @notice Anybody can deposit $KLAY, there are no restrictions.\\n     * @param accId - ID of the account\\n     */\\n    function depositTemporary(uint64 accId) external payable;\\n\\n    /**\\n     * @notice Withdraw $KLAY from [regular] account.\\n     * @dev Account owner can withdraw $KLAY only when there are no\\n     * @dev pending requests on any of associated consumers. If one tries\\n     * @dev to use it to withdraw $KLAY from [temporary] account,\\n     * @dev transaction will revert. Transaction reverts also on failure to\\n     * @dev withdraw tokens from account.\\n     * @param accId - ID of the account\\n     * @param amount - $KLAY amount to be withdrawn\\n     */\\n    function withdraw(uint64 accId, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw $KLAY from [temporary] account.\\n     * @dev Account owner can withdraw $KLAY only when there are no\\n     * @dev pending requests. Temporary account will be deleted upon\\n     * @dev successful withdrawal. Transaction reverts also on failure to\\n     * @dev withdraw tokens from account.\\n     * @param accId - ID of the account\\n     * @param to - recipient address\\n     */\\n    function withdrawTemporary(uint64 accId, address payable to) external;\\n\\n    /**\\n     * @notice Burn part of fee and charge protocol fee for a service\\n     * connected to [regular] account.\\n     * @param accId - ID of the account\\n     * @param amount - $KLAY amount to be charged\\n     */\\n    function chargeFee(uint64 accId, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Charge operator fee for a service connected to\\n     * [temporary] account.\\n     * @param accId - ID of the account\\n     * @param operatorFee - amount of fee to be paid to operator fee\\n     * recipient\\n     * @param operatorFeeRecipient - address of operator fee recipient\\n     */\\n    function chargeOperatorFee(\\n        uint64 accId,\\n        uint256 operatorFee,\\n        address operatorFeeRecipient\\n    ) external;\\n\\n    /**\\n     * @notice Burn part of fee and charge protocol fee for a service\\n     * connected to [temporary] account.\\n     * @dev Temporary account is deleted because we do not expect to use it again.\\n     * @param accId - ID of the account\\n     */\\n    function chargeFeeTemporary(\\n        uint64 accId\\n    ) external returns (uint256 totalAmount, uint256 operatorAmount);\\n\\n    /**\\n     * @notice Charge operator fee for a service connected to\\n     * [temporary] account.\\n     * @param operatorFee - amount of fee to be paid to operator fee\\n     * recipient\\n     * @param operatorFeeRecipient - address of operator fee recipient\\n     */\\n    function chargeOperatorFeeTemporary(uint256 operatorFee, address operatorFeeRecipient) external;\\n\\n    /**\\n     * @notice Increase nonce for consumer registered under accId.\\n     * @param accId - ID of the account\\n     * @param consumer - Address of consumer registered under accId\\n     */\\n    function increaseNonce(uint64 accId, address consumer) external returns (uint64);\\n\\n    /*\\n     * @notice Add coordinator that will be able to charge account for\\n     * @notice the requested service.\\n     * @param coordinator - address of coordinator\\n     */\\n    function addCoordinator(address coordinator) external;\\n\\n    /*\\n     * @notice Disable the coordinator from being able to charge\\n     * @notice accounts for its service.\\n     * @param coordinator - address of coordinator\\n     */\\n    function removeCoordinator(address coordinator) external;\\n\\n    function getBurnFeeRatio() external view returns (uint8);\\n\\n    function getProtocolFeeRatio() external view returns (uint8);\\n\\n    function getAccountDetail(\\n        uint64 accId\\n    ) external view returns (uint256, uint256, uint256, uint256);\\n\\n    function getSubscriptionPaid(uint64 accId) external view returns (bool);\\n\\n    function isValidReq(uint64 accId) external view returns (bool);\\n\\n    function getFeeRatio(uint64 accId) external view returns (uint256);\\n\\n    function updateAccountDetail(\\n        uint64 accId,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 periodReqCount,\\n        uint256 subscriptionPrice\\n    ) external;\\n\\n    function setSubscriptionPaid(uint64 accId) external;\\n\\n    function setFeeRatio(uint64 accId, uint256 disCount) external;\\n\\n    function increaseSubReqCount(uint64 accId) external;\\n}\\n\",\"keccak256\":\"0x05b55249da08c9342213666a3fc935bcbcc54e19c5e6c2946a466ae7038de01c\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IRequestResponseCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IRequestResponseCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IRequestResponseCoordinator is IRequestResponseCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x7d924dc529b73fd5c60f0a4d972a12377f15c17fc331a82aa5218897f173d46a\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IRequestResponseCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/Orakl.sol\\\";\\n\\ninterface IRequestResponseCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint64 accId;\\n        uint8 numSubmission;\\n        uint32 callbackGasLimit;\\n        address sender;\\n        bool isDirectPayment;\\n        bytes32 jobId;\\n    }\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [regular] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param accId - The ID of the account. Must be funded with the\\n     * minimum account balance.\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     @return requestId - A unique * identifier of the request. Can be\\n     used to match a request to a * response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint64 accId,\\n        uint8 numSubmission\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [temporary] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     * @param refundRecipient recipient of an extra $KLAY amount that\\n     * was sent together with service request\\n     * @return requestId - A unique identifier of the request. Can be\\n     * used to match a request to a response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) external payable returns (uint256);\\n\\n    function fulfillDataRequestUint128(\\n        uint256 requestId,\\n        uint128 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestInt256(\\n        uint256 requestId,\\n        int256 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBool(\\n        uint256 requestId,\\n        bool response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestString(\\n        uint256 requestId,\\n        string memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes32(\\n        uint256 requestId,\\n        bytes32 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    /**\\n     * @notice Different jobs specified by jobId have allowed\\n     * different number of of requests for submissions that depends on\\n     * total number of registered oracles.\\n     */\\n    function validateNumSubmission(bytes32 jobId, uint8 numSubmission) external;\\n}\\n\",\"keccak256\":\"0xfa11f2677b8f2ea43e09077e1c18c22c4430c7630604a3ad4213955710b72a03\",\"license\":\"MIT\"},\"src/v0.1/interfaces/ITypeAndVersion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol\\n\\nabstract contract ITypeAndVersion {\\n    function typeAndVersion() external pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0xb4298d53c43e0afe8c55f2a77724cd1ea29de928581a436a13fc65043891428d\",\"license\":\"MIT\"},\"src/v0.1/libraries/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint256 capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Initializes a new buffer from an existing bytes object.\\n     *      Changes to the buffer may mutate the original value.\\n     * @param b The bytes object to initialize the buffer with.\\n     * @return A new buffer.\\n     */\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Sets buffer length to 0.\\n     * @param buf The buffer to truncate.\\n     * @return The original buffer, for chaining..\\n     */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint256 dest;\\n        uint256 src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(\\n        buffer memory buf,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write the byte at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeUint8(\\n        buffer memory buf,\\n        uint256 off,\\n        uint8 data\\n    ) internal pure returns (buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (left-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes32 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint256 mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeBytes20(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes20 data\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chhaining.\\n     */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeInt(\\n        buffer memory buf,\\n        uint256 off,\\n        uint256 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint256 mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(\\n        buffer memory buf,\\n        uint256 data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0x974280a1114bec25110c9c608e1c6c4dd7666c00e30f831f68b6d8a5b3bde420\",\"license\":\"MIT\"},\"src/v0.1/libraries/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/CBORChainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\n\\n// Encoding library for Binary Object Representation\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    // DECLARE TYPES FOR EASIER REFERENCE OF VARIABLE TYPE\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeFixedNumeric(Buffer.buffer memory buf, uint8 major, uint64 value) private pure {\\n        if (value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\\n        if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        }\\n    }\\n\\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\\n        if (value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, uint(value));\\n        } else if (value >= 0) {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(Buffer.buffer memory buf, uint value) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        encodeBytes(buf, abi.encode(value));\\n    }\\n\\n    function encodeSignedBigNum(Buffer.buffer memory buf, int input) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n        encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n    }\\n\\n    function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\",\"keccak256\":\"0x0712ea9c6408a41611eaa5ca843880d7d39c21cfe1dc3efea034bcedf244eae5\",\"license\":\"MIT\"},\"src/v0.1/libraries/MajorityVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nlibrary MajorityVoting {\\n    error EvenLengthList();\\n\\n    function voting(bool[] memory list) internal pure returns (bool) {\\n        if (list.length % 2 == 0) {\\n            revert EvenLengthList();\\n        }\\n        uint256 trueCount;\\n        uint256 falseCount;\\n\\n        for (uint256 i; i < list.length; ++i) {\\n            if (list[i]) {\\n                trueCount++;\\n            } else {\\n                falseCount++;\\n            }\\n        }\\n\\n        if (trueCount >= falseCount) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4c8c2330c6ca9ef7646c2b6f53fb8cad365aed911538e780ec255c0006b7235\",\"license\":\"MIT\"},\"src/v0.1/libraries/Median.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/Median.sol\\n\\nlibrary Median {\\n    int256 constant INT_MAX = 2 ** 255 - 1;\\n\\n    /**\\n     * @notice Returns the sorted middle, or the average of the two middle indexed items if the\\n     * array has an even number of elements.\\n     * @dev The list passed as an argument isn't modified.\\n     * @dev This algorithm has expected runtime O(n), but for adversarially chosen inputs\\n     * the runtime is O(n^2).\\n     * @param list The list of elements to compare\\n     */\\n    function calculate(int256[] memory list) internal pure returns (int256) {\\n        return calculateInplace(copy(list));\\n    }\\n\\n    /**\\n     * @notice See documentation for function calculate.\\n     * @dev The list passed as an argument may be permuted.\\n     */\\n    function calculateInplace(int256[] memory list) internal pure returns (int256) {\\n        require(list.length > 0, \\\"list must not be empty\\\");\\n        uint256 len = list.length;\\n        uint256 middleIndex = len / 2;\\n        if (len % 2 == 0) {\\n            int256 median1;\\n            int256 median2;\\n            (median1, median2) = quickselectTwo(list, 0, len - 1, middleIndex - 1, middleIndex);\\n            return avg(median1, median2);\\n        } else {\\n            return quickselect(list, 0, len - 1, middleIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes average of two signed integers.\\n     * @dev If the result is not an integer, it is rounded towards\\n     * @dev zero. For example, avg(-3, -4) = -3\\n     * @dev Since Solidity v0.8.0 arithmetic operations revert on\\n     * @dev underflow and overflow. We do not need to check for it\\n     * @dev manually.\\n     */\\n    function avg(int256 _a, int256 _b) internal pure returns (int256) {\\n        if ((_a < 0 && _b > 0) || (_a > 0 && _b < 0)) {\\n            return (_a + _b) / 2;\\n        }\\n        int256 remainder = ((_a % 2) + (_b % 2)) / 2;\\n        return (_a / 2) + (_b / 2) + remainder;\\n    }\\n\\n    /**\\n     * @notice Maximum length of list that shortSelectTwo can handle\\n     */\\n    uint256 constant SHORTSELECTTWO_MAX_LENGTH = 7;\\n\\n    /**\\n     * @notice Select the k1-th and k2-th element from list of length at most 7\\n     * @dev Uses an optimal sorting network\\n     */\\n    function shortSelectTwo(\\n        int256[] memory list,\\n        uint256 lo,\\n        uint256 hi,\\n        uint256 k1,\\n        uint256 k2\\n    ) private pure returns (int256 k1th, int256 k2th) {\\n        // Uses an optimal sorting network (https://en.wikipedia.org/wiki/Sorting_network)\\n        // for lists of length 7. Network layout is taken from\\n        // http://jgamble.ripco.net/cgi-bin/nw.cgi?inputs=7&algorithm=hibbard&output=svg\\n\\n        uint256 len = hi + 1 - lo;\\n        int256 x0 = list[lo + 0];\\n        int256 x1 = 1 < len ? list[lo + 1] : INT_MAX;\\n        int256 x2 = 2 < len ? list[lo + 2] : INT_MAX;\\n        int256 x3 = 3 < len ? list[lo + 3] : INT_MAX;\\n        int256 x4 = 4 < len ? list[lo + 4] : INT_MAX;\\n        int256 x5 = 5 < len ? list[lo + 5] : INT_MAX;\\n        int256 x6 = 6 < len ? list[lo + 6] : INT_MAX;\\n\\n        if (x0 > x1) {\\n            (x0, x1) = (x1, x0);\\n        }\\n        if (x2 > x3) {\\n            (x2, x3) = (x3, x2);\\n        }\\n        if (x4 > x5) {\\n            (x4, x5) = (x5, x4);\\n        }\\n        if (x0 > x2) {\\n            (x0, x2) = (x2, x0);\\n        }\\n        if (x1 > x3) {\\n            (x1, x3) = (x3, x1);\\n        }\\n        if (x4 > x6) {\\n            (x4, x6) = (x6, x4);\\n        }\\n        if (x1 > x2) {\\n            (x1, x2) = (x2, x1);\\n        }\\n        if (x5 > x6) {\\n            (x5, x6) = (x6, x5);\\n        }\\n        if (x0 > x4) {\\n            (x0, x4) = (x4, x0);\\n        }\\n        if (x1 > x5) {\\n            (x1, x5) = (x5, x1);\\n        }\\n        if (x2 > x6) {\\n            (x2, x6) = (x6, x2);\\n        }\\n        if (x1 > x4) {\\n            (x1, x4) = (x4, x1);\\n        }\\n        if (x3 > x6) {\\n            (x3, x6) = (x6, x3);\\n        }\\n        if (x2 > x4) {\\n            (x2, x4) = (x4, x2);\\n        }\\n        if (x3 > x5) {\\n            (x3, x5) = (x5, x3);\\n        }\\n        if (x3 > x4) {\\n            (x3, x4) = (x4, x3);\\n        }\\n\\n        uint256 index1 = k1 - lo;\\n        if (index1 == 0) {\\n            k1th = x0;\\n        } else if (index1 == 1) {\\n            k1th = x1;\\n        } else if (index1 == 2) {\\n            k1th = x2;\\n        } else if (index1 == 3) {\\n            k1th = x3;\\n        } else if (index1 == 4) {\\n            k1th = x4;\\n        } else if (index1 == 5) {\\n            k1th = x5;\\n        } else if (index1 == 6) {\\n            k1th = x6;\\n        } else {\\n            revert(\\\"k1 out of bounds\\\");\\n        }\\n\\n        uint256 index2 = k2 - lo;\\n        if (k1 == k2) {\\n            return (k1th, k1th);\\n        } else if (index2 == 0) {\\n            return (k1th, x0);\\n        } else if (index2 == 1) {\\n            return (k1th, x1);\\n        } else if (index2 == 2) {\\n            return (k1th, x2);\\n        } else if (index2 == 3) {\\n            return (k1th, x3);\\n        } else if (index2 == 4) {\\n            return (k1th, x4);\\n        } else if (index2 == 5) {\\n            return (k1th, x5);\\n        } else if (index2 == 6) {\\n            return (k1th, x6);\\n        } else {\\n            revert(\\\"k2 out of bounds\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Selects the k-th ranked element from list, looking only at indices between lo and hi\\n     * (inclusive). Modifies list in-place.\\n     */\\n    function quickselect(\\n        int256[] memory list,\\n        uint256 lo,\\n        uint256 hi,\\n        uint256 k\\n    ) private pure returns (int256 kth) {\\n        require(lo <= k);\\n        require(k <= hi);\\n        while (lo < hi) {\\n            if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n                int256 ignore;\\n                (kth, ignore) = shortSelectTwo(list, lo, hi, k, k);\\n                return kth;\\n            }\\n            uint256 pivotIndex = partition(list, lo, hi);\\n            if (k <= pivotIndex) {\\n                // since pivotIndex < (original hi passed to partition),\\n                // termination is guaranteed in this case\\n                hi = pivotIndex;\\n            } else {\\n                // since (original lo passed to partition) <= pivotIndex,\\n                // termination is guaranteed in this case\\n                lo = pivotIndex + 1;\\n            }\\n        }\\n        return list[lo];\\n    }\\n\\n    /**\\n     * @notice Selects the k1-th and k2-th ranked elements from list, looking only at indices between\\n     * lo and hi (inclusive). Modifies list in-place.\\n     */\\n    function quickselectTwo(\\n        int256[] memory list,\\n        uint256 lo,\\n        uint256 hi,\\n        uint256 k1,\\n        uint256 k2 // for testing\\n    ) internal pure returns (int256 k1th, int256 k2th) {\\n        require(k1 < k2);\\n        require(lo <= k1 && k1 <= hi);\\n        require(lo <= k2 && k2 <= hi);\\n\\n        while (true) {\\n            if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n                return shortSelectTwo(list, lo, hi, k1, k2);\\n            }\\n            uint256 pivotIdx = partition(list, lo, hi);\\n            if (k2 <= pivotIdx) {\\n                hi = pivotIdx;\\n            } else if (pivotIdx < k1) {\\n                lo = pivotIdx + 1;\\n            } else {\\n                assert(k1 <= pivotIdx && pivotIdx < k2);\\n                k1th = quickselect(list, lo, pivotIdx, k1);\\n                k2th = quickselect(list, pivotIdx + 1, hi, k2);\\n                return (k1th, k2th);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Partitions list in-place using Hoare's partitioning scheme.\\n     * Only elements of list between indices lo and hi (inclusive) will be modified.\\n     * Returns an index i, such that:\\n     * - lo <= i < hi\\n     * - forall j in [lo, i]. list[j] <= list[i]\\n     * - forall j in [i, hi]. list[i] <= list[j]\\n     */\\n    function partition(\\n        int256[] memory list,\\n        uint256 lo,\\n        uint256 hi\\n    ) private pure returns (uint256) {\\n        // We don't care about overflow of the addition, because it would require a list\\n        // larger than any feasible computer's memory.\\n        int256 pivot = list[(lo + hi) / 2];\\n        unchecked {\\n            lo -= 1; // this can underflow. that's intentional.\\n        }\\n        hi += 1;\\n\\n        while (true) {\\n            do {\\n                unchecked {\\n                    lo += 1;\\n                }\\n            } while (list[lo] < pivot);\\n            do {\\n                hi -= 1;\\n            } while (list[hi] > pivot);\\n            if (lo < hi) {\\n                (list[lo], list[hi]) = (list[hi], list[lo]);\\n            } else {\\n                // Let orig_lo and orig_hi be the original values of lo and hi passed to partition.\\n                // Then, hi < orig_hi, because hi decreases *strictly* monotonically\\n                // in each loop iteration and\\n                // - either list[orig_hi] > pivot, in which case the first loop iteration\\n                //   will achieve hi < orig_hi;\\n                // - or list[orig_hi] <= pivot, in which case at least two loop iterations are\\n                //   needed:\\n                //   - lo will have to stop at least once in the interval\\n                //     [orig_lo, (orig_lo + orig_hi)/2]\\n                //   - (orig_lo + orig_hi)/2 < orig_hi\\n                return hi;\\n            }\\n        }\\n        revert();\\n    }\\n\\n    /**\\n     * @notice Makes an in-memory copy of the array passed in\\n     * @param list Reference to the array to be copied\\n     */\\n    function copy(int256[] memory list) private pure returns (int256[] memory) {\\n        int256[] memory list2 = new int256[](list.length);\\n        for (uint256 i = 0; i < list.length; i++) {\\n            list2[i] = list[i];\\n        }\\n        return list2;\\n    }\\n}\\n\",\"keccak256\":\"0x308771a3268b45b0bb5374959fc87354c6df639fb1734ba589739ec47d63af0a\",\"license\":\"MIT\"},\"src/v0.1/libraries/Orakl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Chainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\nimport {CBOR} from \\\"./CBOR.sol\\\";\\n\\nlibrary Orakl {\\n    uint256 internal constant defaultBufferSize = 256;\\n\\n    using CBOR for Buffer.buffer;\\n\\n    // structure for storing requests done off-chain\\n    struct Request {\\n        bytes32 id;\\n        address callbackAddr;\\n        bytes4 callbackFunc;\\n        uint256 nonce;\\n        Buffer.buffer buf;\\n    }\\n\\n    /**\\n     * @notice Initializes a request\\n     * @dev Sets ID, callback address, and callback function\\n     * @param self The uninitialized request\\n     * @param jobId The Job Specification ID\\n     * @param callbackAddr The callback address\\n     * @param callbackFunc The callback function signature\\n     * @return The initialized request\\n     */\\n    function initialize(\\n        Request memory self,\\n        bytes32 jobId,\\n        address callbackAddr,\\n        bytes4 callbackFunc\\n    ) internal pure returns (Orakl.Request memory) {\\n        Buffer.init(self.buf, defaultBufferSize);\\n        self.id = jobId;\\n        self.callbackAddr = callbackAddr;\\n        self.callbackFunc = callbackFunc;\\n        return self;\\n    }\\n\\n    /**\\n     * @notice sets the data for buffer\\n     * @param _request the initialized request\\n     * @param _data the CBOR data\\n     */\\n    function setBuffer(Request memory _request, bytes memory _data) internal pure {\\n        Buffer.init(_request.buf, _data.length);\\n        Buffer.append(_request.buf, _data);\\n    }\\n\\n    /**\\n     * @notice Adds a string value to the request in a key - value pair format\\n     * @param self - the initalized request\\n     * @param key - the name of the key\\n     * @param value - the string value to add\\n     */\\n    function add(Request memory self, string memory key, string memory value) internal pure {\\n        self.buf.encodeString(key);\\n        self.buf.encodeString(value);\\n    }\\n\\n    /**\\n     * @notice Adds a byte value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the bytes value to add\\n     */\\n    function addBytes(\\n        Request memory _request,\\n        string memory _key,\\n        bytes memory _value\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeBytes(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a Int256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the int256 value to add\\n     */\\n    function addInt(Request memory _request, string memory _key, int256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a UInt256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the uint256 value to add\\n     */\\n    function addUInt(Request memory _request, string memory _key, uint256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeUInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds an array of string value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _values - the array of string value to add\\n     */\\n    function addStringArray(\\n        Request memory _request,\\n        string memory _key,\\n        string[] memory _values\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.startArray();\\n        for (uint256 i; i < _values.length; i++) {\\n            _request.buf.encodeString(_values[i]);\\n        }\\n        _request.buf.endSequence();\\n    }\\n}\\n\",\"keccak256\":\"0xd03570ddd458085535e258f75d684f76b2adbac7fccb718d11977562d4f3101a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200513038038062005130833981016040819052620000349162000313565b6200003f33620002c3565b6001600960006040516020016200006390660ead2dce86264760cb1b815260070190565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff021916908315150217905550600160096000604051602001620000c1906534b73a191a9b60d11b815260060190565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600960006040516020016200011d9063189bdbdb60e21b815260040190565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600960006040516020016200017b9065737472696e6760d01b815260060190565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff021916908315150217905550600160096000604051602001620001da9066313cba32b9999960c91b815260070190565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff021916908315150217905550600160096000604051602001620002379064627974657360d81b815260050190565b60408051808303601f190181529181528151602092830120835282820193909352908201600020805460ff191693151593909317909255600480546001600160a01b0319166001600160a01b03851690811790915590519081527f9401527b1b86caed93cfabfbb71d3a9b28c5e923529aa86ebd183664194b013d910160405180910390a15062000345565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200032657600080fd5b81516001600160a01b03811681146200033e57600080fd5b9392505050565b614ddb80620003556000396000f3fe6080604052600436106101ac5760003560e01c8063a185c35f116100ec578063c3f909d41161008a578063d98196b311610064578063d98196b3146105b1578063e9babaec146105d1578063f2fde38b146105f1578063f30be5511461061157600080fd5b8063c3f909d41461053b578063c6f3401314610571578063d1bf555c1461059157600080fd5b8063a690d7ae116100c6578063a690d7ae1461049d578063b9b55c9a146104bb578063bf8542a9146104f4578063bfedbfa01461051457600080fd5b8063a185c35f1461044a578063a353ddb81461046a578063a4dfe92f1461048a57600080fd5b8063715018a611610159578063796184171161013357806379618417146103b85780638da5cb5b146103d85780638df4e3e21461040a5780639ad6c3471461042a57600080fd5b8063715018a614610363578063752f8c1414610378578063786708e61461039857600080fd5b80633f1eef591161018a5780633f1eef59146102585780635fbbc0d21461028657806369bcdb7d1461033657600080fd5b8063181f5a77146101b15780631a892832146102065780633015394c14610236575b600080fd5b3480156101bd57600080fd5b50604080518082018252601f81527f52657175657374526573706f6e7365436f6f7264696e61746f722076302e3100602082015290516101fd9190614131565b60405180910390f35b34801561021257600080fd5b5061022661022136600461416f565b610631565b60405190151581526020016101fd565b34801561024257600080fd5b506102566102513660046141ba565b6106c3565b005b34801561026457600080fd5b50610278610273366004614205565b61078c565b6040519081526020016101fd565b34801561029257600080fd5b506006546040805163ffffffff80841682526401000000008404811660208301526801000000000000000084048116928201929092526c01000000000000000000000000830482166060820152600160801b8304909116608082015262ffffff600160a01b8304811660a0830152600160b81b8304811660c0830152600160d01b8304811660e0830152600160e81b909204909116610100820152610120016101fd565b34801561034257600080fd5b506102786103513660046141ba565b60009081526002602052604090205490565b34801561036f57600080fd5b506102566109ab565b34801561038457600080fd5b5061027861039336600461447c565b6109bf565b3480156103a457600080fd5b506102566103b3366004614500565b610bac565b3480156103c457600080fd5b506102566103d33660046146b4565b610df8565b3480156103e457600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101fd565b34801561041657600080fd5b506102566104253660046146f4565b6110cd565b34801561043657600080fd5b50610278610445366004614711565b61129b565b34801561045657600080fd5b5061025661046536600461474d565b6112df565b34801561047657600080fd5b50610256610485366004614781565b6115dd565b6102786104983660046147ad565b611791565b3480156104a957600080fd5b506004546001600160a01b03166103f2565b3480156104c757600080fd5b506102266104d63660046146f4565b6001600160a01b031660009081526008602052604090205460ff1690565b34801561050057600080fd5b5061025661050f36600461481e565b6119da565b34801561052057600080fd5b5061052960ff81565b60405160ff90911681526020016101fd565b34801561054757600080fd5b506005546040805163ffffffff8084168252650100000000009093049092166020830152016101fd565b34801561057d57600080fd5b5061025661058c36600461484c565b611b9c565b34801561059d57600080fd5b506102566105ac36600461481e565b611d53565b3480156105bd57600080fd5b506103f26105cc3660046141ba565b611fce565b3480156105dd57600080fd5b506102566105ec3660046146f4565b611ff8565b3480156105fd57600080fd5b5061025661060c3660046146f4565b612131565b34801561061d57600080fd5b5061025661062c36600461489c565b6121c1565b600154600090815b818110156106b557604080516001600160a01b03881660208083019190915267ffffffffffffffff808916838501528716606080840191909152835180840390910181526080909201909252805191012061069381612378565b156106a457600193505050506106bc565b506106ae81614906565b9050610639565b5060009150505b9392505050565b6106cc81612378565b6106e957604051631b44092560e11b815260040160405180910390fd5b6000818152600360205260409020546001600160a01b03163314610739576040517f517907dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600260209081526040808320839055600390915280822080546001600160a01b03191690555182917f6187bf55f2675dbecee951f81c92ecac87f54ed5bf888d31b09e634749b848ef91a250565b60048054604051638a522dbb60e01b815267ffffffffffffffff85169281019290925260009182916001600160a01b031690638a522dbb90602401608060405180830381865afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610808919061491f565b935060009250600391506108199050565b84600481111561082b5761082b614955565b036108dd57600480546040516312e7400160e11b815267ffffffffffffffff8816928101929092526000916001600160a01b03909116906325ce800290602401602060405180830381865afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac919061496b565b905060006108bb8a8a8a61129b565b90506127106108ca8383614984565b6108d491906149b9565b925050506109a0565b60028460048111156108f1576108f1614955565b03610979576004805460405163f1b04d2b60e01b815267ffffffffffffffff8816928101929092526001600160a01b03169063f1b04d2b90602401602060405180830381865afa158015610949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096d91906149cd565b6109745750805b6109a0565b600484600481111561098d5761098d614955565b036109a05761099d88888861129b565b90505b979650505050505050565b6109b36123a1565b6109bd60006123fb565b565b600554600090640100000000900460ff16156109ee5760405163769dd35360e11b815260040160405180910390fd5b60048054604051633bd7108d60e11b815267ffffffffffffffff861692810192909252600091829182916001600160a01b03909116906377ae211a90602401600060405180830381865afa158015610a4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7291908101906149f5565b600480546040517f5e42205c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8e169281019290925295985093965094506000936001600160a01b031692635e42205c92506024019050602060405180830381865afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1091906149cd565b905080610b49576040517fb3c2774700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610b5884888b8b8761078c565b905080851015610b8a5760405163b99e2ab760e01b815260048101869052602481018290526044015b60405180910390fd5b600080610b9a8c8b8d8c8661244b565b9750505050505050505b949350505050565b610bb46123a1565b604080516060808201835263ffffffff86811680845260006020808601919091528783169486018590526005805468ffffffffffffffffff191690921765010000000000909502949094179055845160068054948701518787015194880151608089015160a08a015160c08b015160e08c01516101008d015197891667ffffffffffffffff19909b169a909a1764010000000095891695909502949094177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff1668010000000000000000988816989098027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff16979097176c0100000000000000000000000092871692909202919091177fffffffffffffffffff00000000000000ffffffffffffffffffffffffffffffff16600160801b91909516027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff1693909317600160a01b62ffffff95861602177fffffff000000000000ffffffffffffffffffffffffffffffffffffffffffffff16600160b81b938516939093027fffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffff1692909217600160d01b94841694909402939093177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b929093169190910291909117815590517f107fdd8d898f7a380d4a448bb9882a3e1bb767bd803a09721d828b4ce217b04391610deb9186918691614aeb565b60405180910390a1505050565b600554640100000000900460ff1615610e245760405163769dd35360e11b815260040160405180910390fd5b60005a60405163189bdbdb60e21b6020820152909150602401604051602081830303815290604052805190602001208260c0015114610e765760405163e7b9d74d60e01b815260040160405180910390fd5b610e808285612759565b60008481526007602081815260408084203380865260018281018552838720805460ff1916821790558a8752600c8552838720805480830182558189528689208782040180548d1515601f9093166101000a92830260ff93840219909116179055968652835491820184558388529490962090950180546001600160a01b0319169095179094558501518154919392161115610f585760408051338152602081018890527f81b10a8136baa5e8975cb74b9c1cd5c44791d42a0fe7c195457f86ce298e0c8391015b60405180910390a1505050505050565b6000610fd283805480602002602001604051908101604052809291908181526020018280548015610fc857602002820191906000526020600020906000905b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610f975790505b505050505061290d565b60408051602481018a90528215156044808301919091528251808303909101815260649091019091526020810180516001600160e01b03167f90d95efc00000000000000000000000000000000000000000000000000000000179052909150600061103d82886129d0565b9050600061104a8a612a1d565b60008b8152600c60205260408120919250611065919061406e565b6000611072898984612b44565b604080518c1515815260208101839052851515918101919091529091508b907f27dd42f8797fcff24c7c99ae461d9fd99e490ba813ede9b16fc9df17108bfe56906060015b60405180910390a250505050505050505b505050565b6110d56123a1565b6001600160a01b03811660009081526008602052604090205460ff16611132576040517ff9a0ffdf0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610b81565b6001600160a01b0381166000908152600860205260408120805460ff19169055600154905b8181101561125a57826001600160a01b03166001828154811061117c5761117c614ba8565b6000918252602090912001546001600160a01b03160361124a57600060016111a48185614bbe565b815481106111b4576111b4614ba8565b600091825260209091200154600180546001600160a01b0390921692508291849081106111e3576111e3614ba8565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600180548061122257611222614bd1565b600082815260209020810160001990810180546001600160a01b03191690550190555061125a565b61125381614906565b9050611157565b506040516001600160a01b03831681527f5406c1f2d9ece2027a923f317fb5f2370221e330db898c037c10acc0c20495b39060200160405180910390a15050565b6000808360ff166112ab86613033565b6112b59190614984565b905060006112c963ffffffff85163a614984565b90506112d58183614be7565b9695505050505050565b600554640100000000900460ff161561130b5760405163769dd35360e11b815260040160405180910390fd5b60005a604051660ead2dce86264760cb1b6020820152909150602701604051602081830303815290604052805190602001208260c00151146113605760405163e7b9d74d60e01b815260040160405180910390fd5b61136a8285612759565b6000848152600b60209081526040808320805460018082018355828652848620600283040180549282166010026101000a6001600160801b0381810219909416938b1602929092179091558885526007808552838620338088528184018752858820805460ff19168517905591865280549283018155808752949095200180546001600160a01b031916909417909355840151825460ff90911611156114405760408051338152602081018890527f81b10a8136baa5e8975cb74b9c1cd5c44791d42a0fe7c195457f86ce298e0c839101610f48565b60006114cc838054806020026020016040519081016040528092919081815260200182805480156114c257602002820191906000526020600020906000905b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f0104928301926001038202915080841161147f5790505b5050505050613056565b905060006114d982613105565b60408051602481018b90526001600160801b0383166044808301919091528251808303909101815260649091019091526020810180516001600160e01b03167f45b9b6fb00000000000000000000000000000000000000000000000000000000179052909150600061154b82896129d0565b905060006115588b612a1d565b60008c8152600b602052604081209192506115739190614093565b60006115808a8a84612b44565b604080516001600160801b038e168152602081018390528515158183015290519192508d917f8f2da545293ec9ebc31d6839176dc1374f380f6fc61bfea08078233c6ed9b01e9181900360600190a2505050505050505050505050565b60008281526009602052604090205460ff16611625576040517f9a358cc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060ff1660000361164957604051630fa163bb60e41b815260040160405180910390fd5b60405163189bdbdb60e21b6020820152602401604051602081830303815290604052805190602001208214801561168b5750611686600282614bfa565b60ff16155b156116a957604051630fa163bb60e41b815260040160405180910390fd5b604051660ead2dce86264760cb1b60208201526027016040516020818303038152906040528051906020012082148061170b57506040516534b73a191a9b60d11b60208201526026016040516020818303038152906040528051906020012082145b8061173d575060405163189bdbdb60e21b60208201526024016040516020818303038152906040528051906020012082145b1561178d57600154600090611754906002906149b9565b90508160ff1660011415801561176f57508060ff168260ff16115b156110c857604051630fa163bb60e41b815260040160405180910390fd5b5050565b600554600090640100000000900460ff16156117c05760405163769dd35360e11b815260040160405180910390fd5b6000806117ce82868861129b565b9050803410156117fa5760405163b99e2ab760e01b815234600482015260248101829052604401610b81565b600480546040517f190118b700000000000000000000000000000000000000000000000000000000815233928101929092526000916001600160a01b039091169063190118b7906024016020604051808303816000875af1158015611863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118879190614c1c565b90506001600061189a8a848b8b8661244b565b600480546040517fc49910e40000000000000000000000000000000000000000000000000000000081529293506001600160a01b03169163c49910e49187916118f59188910167ffffffffffffffff91909116815260200190565b6000604051808303818588803b15801561190e57600080fd5b505af1158015611922573d6000803e3d6000fd5b5050505050600084346119359190614bbe565b905080156119cc576000886001600160a01b03168260405160006040518083038185875af1925050503d806000811461198a576040519150601f19603f3d011682016040523d82523d6000602084013e61198f565b606091505b50509050806119ca576040517fef7a4b6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b509998505050505050505050565b600554640100000000900460ff1615611a065760405163769dd35360e11b815260040160405180910390fd5b60005a6040517f62797465733332000000000000000000000000000000000000000000000000006020820152909150602701604051602081830303815290604052805190602001208260c0015114611a715760405163e7b9d74d60e01b815260040160405180910390fd5b611a7b8285612759565b60008481526007602081815260408084203380865260018083018552838720805460ff1916821790559484528154948501825581865283862090940180546001600160a01b031916909417909355805160248101899052604480820189905282518083039091018152606490910190915290810180516001600160e01b03167ff40b4def000000000000000000000000000000000000000000000000000000001790529091611b2a82866129d0565b90506000611b3788612a1d565b90506000611b46878784612b44565b604080518a8152602081018390528515159181019190915290915089907f39136b4e0c0ed9615348ccda4aabc1e49031d4fcc1d2a631e0ca0340fea80a60906060015b60405180910390a2505050505050505050565b600554640100000000900460ff1615611bc85760405163769dd35360e11b815260040160405180910390fd5b60005a6040517f62797465730000000000000000000000000000000000000000000000000000006020820152909150602501604051602081830303815290604052805190602001208260c0015114611c335760405163e7b9d74d60e01b815260040160405180910390fd5b611c3d8285612759565b60008481526007602081815260408084203380865260018281018552838720805460ff1916821790559484528154948501825581865292852090930180546001600160a01b031916909217909155519091907f19e2cd2f0000000000000000000000000000000000000000000000000000000090611cc19088908890602401614c39565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506000611d0182866129d0565b90506000611d0e88612a1d565b90506000611d1d878784612b44565b9050887f6404cc3a68084786e4262010affb9e1ff9f005c3c6418cfa5bce5a2dcde06667898386604051611b8993929190614c52565b600554640100000000900460ff1615611d7f5760405163769dd35360e11b815260040160405180910390fd5b60005a6040516534b73a191a9b60d11b6020820152909150602601604051602081830303815290604052805190602001208260c0015114611dd35760405163e7b9d74d60e01b815260040160405180910390fd5b611ddd8285612759565b60008481526007602081815260408084203380865260018083018552838720805460ff1916821790558a8752600a855283872080548083018255818952868920018b9055958552825490810183558287529390952090920180546001600160a01b03191690941790935591840151815491929160ff9091161115611e915760408051338152602081018890527f81b10a8136baa5e8975cb74b9c1cd5c44791d42a0fe7c195457f86ce298e0c839101610f48565b6000611eeb83805480602002602001604051908101604052809291908181526020018280548015611ee157602002820191906000526020600020905b815481526020019060010190808311611ecd575b5050505050613105565b60408051602481018a905260448082018490528251808303909101815260649091019091526020810180516001600160e01b03167f6e2acda0000000000000000000000000000000000000000000000000000000001790529091506000611f5282886129d0565b90506000611f5f8a612a1d565b60008b8152600a60205260408120919250611f7a91906140b8565b6000611f87898984612b44565b604080518c815260208101839052851515918101919091529091508b907fc2aca9bb0791cd99d3861401384dc7d8f5b6f2297d6ac1c8dfb91655ac81d437906060016110b7565b60018181548110611fde57600080fd5b6000918252602090912001546001600160a01b0316905081565b6120006123a1565b60015460ff1161203c576040517f25d0209c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff161561209a576040517f6ff7406a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610b81565b6001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038416908117909155600081815260086020908152604091829020805460ff1916909417909355519081527fd9d9fdcc9f936c76b5aafe54fc3db5dcec0c6583c9ccc4abe91d17575c5145a5910160405180910390a150565b6121396123a1565b6001600160a01b0381166121b55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b81565b6121be816123fb565b50565b600554640100000000900460ff16156121ed5760405163769dd35360e11b815260040160405180910390fd5b60005a6040517f737472696e6700000000000000000000000000000000000000000000000000006020820152909150602601604051602081830303815290604052805190602001208260c00151146122585760405163e7b9d74d60e01b815260040160405180910390fd5b6122628285612759565b60008481526007602081815260408084203380865260018281018552838720805460ff1916821790559484528154948501825581865292852090930180546001600160a01b031916909217909155519091907f79b1500800000000000000000000000000000000000000000000000000000000906122e69088908890602401614c39565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050600061232682866129d0565b9050600061233388612a1d565b90506000612342878784612b44565b9050887f5e815adc9078e19ad43911e496cc2d0ec73cd244ddd31b06896c20c48b988e8b898386604051611b8993929190614c52565b6000818152600260205260408120541561239457506001919050565b506000919050565b919050565b6000546001600160a01b031633146109bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b81565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061245b8660000151846115dd565b600480546040517f734e892a00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8816928101929092523360248301526001600160a01b03169063734e892a90604401602060405180830381865afa1580156124cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f191906149cd565b612539576040517ff0019fe600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff86166004820152336024820152604401610b81565b60055463ffffffff9081169085161115612593576005546040517ff5d7e01e00000000000000000000000000000000000000000000000000000000815263ffffffff80871660048301529091166024820152604401610b81565b600480546040517fa8329c0500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8816928101929092523360248301526000916001600160a01b039091169063a8329c05906044016020604051808303816000875af115801561260c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126309190614c1c565b6040805133602080830182905267ffffffffffffffff8b811684860181905290861660608086019190915285518086039091018152608080860187528151918401919091208e5160a087018290524360c088015260e0870184905263ffffffff8e1661010088015260ff8d1661012088015261014087018690528b151561016088015261018080880191909152875180880390910181526101a09096018088528651968501969096206000828152600286528881209190915560039094529590922080546001600160a01b031916841790558c51918d015151959650939491939285927ff5de04e252c7bc264fe51dceea89d95673b5166c209718c5f5a068341dab8111926127469290918d918c918e91614c7c565b60405180910390a4979650505050505050565b3360009081526008602052604090205460ff166127a4576040517fd6c33748000000000000000000000000000000000000000000000000000000008152336004820152602401610b81565b600081815260076020908152604080832033845260010190915290205460ff16156127fb576040517f9f17b6ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600260205260408120549081900361282b57604051631b44092560e11b815260040160405180910390fd5b6128d582846000015167ffffffffffffffff1685602001518660400151876060015188608001518960a001518a60c001516040805160208082019a909a528082019890985267ffffffffffffffff96909616606088015263ffffffff93909316608087015260ff9390931660a08601526001600160a01b031660c085015290151560e084015261010080840191909152815180840390910181526101209092019052805191012090565b81146110c8576040517fd529142c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002825161291d9190614cb2565b600003612956576040517f0a81fe0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060005b84518110156129b45784818151811061297757612977614ba8565b602002602001015115612996578261298e81614906565b9350506129a4565b816129a081614906565b9250505b6129ad81614906565b905061295c565b508082106129c6575060019392505050565b5060009392505050565b6005805464ff000000001916640100000000179055606081015160808201516000918291612a059163ffffffff169086613118565b6005805464ff00000000191690559150505b92915050565b6000818152600760209081526040808320805482518185028101850190935280835260609493830182828015612a7c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612a5e575b5050505050905060005b81518160ff161015612afa57600760008581526020019081526020016000206001016000838360ff1681518110612abf57612abf614ba8565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169055612af381614cc6565b9050612a86565b50600083815260076020526040812090612b1482826140b8565b50506000928352600260209081526040808520859055600390915290922080546001600160a01b03191690555090565b805160a08401516000919015612d89576004805460208701516040517fc9d2d7bf00000000000000000000000000000000000000000000000000000000815260009384936001600160a01b03169263c9d2d7bf92612bb2920167ffffffffffffffff91909116815260200190565b60408051808303816000875af1158015612bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf49190614ce5565b90925090508015612d7f57600080612c0c85846149b9565b905060005b612c1c600187614bbe565b8160ff161015612cdb5760045488516001600160a01b0390911690636b19a19d9084908b9060ff8616908110612c5457612c54614ba8565b60200260200101516040518363ffffffff1660e01b8152600401612c8b9291909182526001600160a01b0316602082015260400190565b600060405180830381600087803b158015612ca557600080fd5b505af1158015612cb9573d6000803e3d6000fd5b505050508183612cc99190614be7565b9250612cd481614cc6565b9050612c11565b506004546001600160a01b0316636b19a19d612cf78486614bbe565b89612d0360018a614bbe565b81518110612d1357612d13614ba8565b60200260200101516040518363ffffffff1660e01b8152600401612d4a9291909182526001600160a01b0316602082015260400190565b600060405180830381600087803b158015612d6457600080fd5b505af1158015612d78573d6000803e3d6000fd5b5050505050505b5091506106bc9050565b6000612da08660200151876040015160ff16613164565b90508015613028576004805460208801516040517f57f2eda700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911692810192909252602482018390526000916001600160a01b03909116906357f2eda7906044016020604051808303816000875af1158015612e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4c919061496b565b90506000612e5a84836149b9565b90506000805b612e6b600187614bbe565b811015612f3c5760045460208b015189516001600160a01b03909216916382e7b38c919086908c9086908110612ea357612ea3614ba8565b60209081029190910101516040516001600160e01b031960e086901b16815267ffffffffffffffff909316600484015260248301919091526001600160a01b03166044820152606401600060405180830381600087803b158015612f0657600080fd5b505af1158015612f1a573d6000803e3d6000fd5b505050508282612f2a9190614be7565b9150612f3581614906565b9050612e60565b506000612f488961358b565b60045460208c01519192506001600160a01b0316906382e7b38c9083612f6e8689614bbe565b612f789190614be7565b8b612f8460018c614bbe565b81518110612f9457612f94614ba8565b60209081029190910101516040516001600160e01b031960e086901b16815267ffffffffffffffff909316600484015260248301919091526001600160a01b03166044820152606401600060405180830381600087803b158015612ff757600080fd5b505af115801561300b573d6000803e3d6000fd5b50505050848161301b9190614be7565b96505050505050506106bc565b6000925050506106bc565b60008061303f836135bf565b90506106bc63ffffffff821664e8d4a51000614984565b60606000825167ffffffffffffffff81111561307457613074614272565b60405190808252806020026020018201604052801561309d578160200160208202803683370190505b50905060005b83518110156130fe578381815181106130be576130be614ba8565b60200260200101516001600160801b03168282815181106130e1576130e1614ba8565b6020908102919091010152806130f681614906565b9150506130a3565b5092915050565b6000612a1761311383613751565b6137f0565b60005a61138881101561312a57600080fd5b61138881039050846040820482031161314257600080fd5b50823b61314e57600080fd5b60008083516020850160008789f1949350505050565b60048054604051633bd7108d60e11b815267ffffffffffffffff851692810192909252600091829182916001600160a01b03909116906377ae211a90602401600060405180830381865afa1580156131c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131e891908101906149f5565b60048054604051638a522dbb60e01b815267ffffffffffffffff8d1692810192909252949750909550600094506001600160a01b0390931692638a522dbb92506024019050608060405180830381865afa15801561324a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326e919061491f565b93506001925061327c915050565b82600481111561328e5761328e614955565b036133075760048054604051631e4c2cb760e11b815267ffffffffffffffff8916928101929092526001600160a01b031690633c98596e90602401600060405180830381600087803b1580156132e357600080fd5b505af11580156132f7573d6000803e3d6000fd5b5050505060009350505050612a17565b600282600481111561331b5761331b614955565b036133895760048054604051631e4c2cb760e11b815267ffffffffffffffff8916928101929092526001600160a01b031690633c98596e90602401600060405180830381600087803b15801561337057600080fd5b505af1158015613384573d6000803e3d6000fd5b505050505b60008563ffffffff1661339b85613033565b6133a59190614984565b905060028360048111156133bb576133bb614955565b036134d3576004805460405163f1b04d2b60e01b815267ffffffffffffffff8a16928101929092526001600160a01b03169063f1b04d2b90602401602060405180830381865afa158015613413573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343791906149cd565b6134c65750600480546040517f7b3d789500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff89169281019290925282916001600160a01b0390911690637b3d789590602401600060405180830381600087803b1580156134a957600080fd5b505af11580156134bd573d6000803e3d6000fd5b50505050613580565b6000945050505050612a17565b60038360048111156134e7576134e7614955565b0361358057600480546040516312e7400160e11b815267ffffffffffffffff8a1692810192909252612710916001600160a01b03909116906325ce800290602401602060405180830381865afa158015613545573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613569919061496b565b6135739083614984565b61357d91906149b9565b90505b9350612a1792505050565b60005a6005546135ab90849065010000000000900463ffffffff16614be7565b6135b59190614bbe565b612a17903a614984565b604080516101208101825260065463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c01000000000000000000000000810483166060830152600160801b8104909216608082015262ffffff600160a01b8304811660a08301819052600160b81b8404821660c0840152600160d01b8404821660e0840152600160e81b9093041661010082015260009167ffffffffffffffff84161161367a575192915050565b8267ffffffffffffffff168160a0015162ffffff161080156136af57508060c0015162ffffff168367ffffffffffffffff1611155b156136be576020015192915050565b8267ffffffffffffffff168160c0015162ffffff161080156136f357508060e0015162ffffff168367ffffffffffffffff1611155b15613702576040015192915050565b8267ffffffffffffffff168160e0015162ffffff16108015613738575080610100015162ffffff168367ffffffffffffffff1611155b15613747576060015192915050565b6080015192915050565b60606000825167ffffffffffffffff81111561376f5761376f614272565b604051908082528060200260200182016040528015613798578160200160208202803683370190505b50905060005b83518110156130fe578381815181106137b9576137b9614ba8565b60200260200101518282815181106137d3576137d3614ba8565b6020908102919091010152806137e881614906565b91505061379e565b6000808251116138425760405162461bcd60e51b815260206004820152601660248201527f6c697374206d757374206e6f7420626520656d707479000000000000000000006044820152606401610b81565b815160006138516002836149b9565b905061385e600283614cb2565b600003613898576000806138898682613878600188614bbe565b613883600188614bbe565b876138af565b90925090506112d582826139a7565b610ba48460006138a9600186614bbe565b84613a4a565b6000808284106138be57600080fd5b8386111580156138ce5750848411155b6138d757600080fd5b8286111580156138e75750848311155b6138f057600080fd5b60076138fc8787614bbe565b10156139185761390f8787878787613aef565b9150915061399d565b6000613925888888613f4c565b905080841161393657809550613997565b8481101561395057613949816001614be7565b9650613997565b80851115801561395f57508381105b61396b5761396b614d09565b61397788888388613a4a565b925061398f88613988836001614be7565b8887613a4a565b91505061399d565b506138f0565b9550959350505050565b600080831280156139b85750600082135b806139ce57506000831380156139ce5750600082125b156139f05760026139df8385614d1f565b6139e99190614d47565b9050612a17565b600060026139fe8185614d91565b613a09600287614d91565b613a139190614d1f565b613a1d9190614d47565b905080613a2b600285614d47565b613a36600287614d47565b613a409190614d1f565b610ba49190614d1f565b600081841115613a5957600080fd5b82821115613a6657600080fd5b82841015613acb576007613a7a8585614bbe565b1015613a99576000613a8f8686868687613aef565b509150610ba49050565b6000613aa6868686613f4c565b9050808311613ab757809350613ac5565b613ac2816001614be7565b94505b50613a66565b848481518110613add57613add614ba8565b60200260200101519050949350505050565b6000808086613aff876001614be7565b613b099190614bbe565b9050600088613b188983614be7565b81518110613b2857613b28614ba8565b60200260200101519050600082600110613b49576001600160ff1b03613b6e565b89613b558a6001614be7565b81518110613b6557613b65614ba8565b60200260200101515b9050600083600210613b87576001600160ff1b03613bac565b8a613b938b6002614be7565b81518110613ba357613ba3614ba8565b60200260200101515b9050600084600310613bc5576001600160ff1b03613bea565b8b613bd18c6003614be7565b81518110613be157613be1614ba8565b60200260200101515b9050600085600410613c03576001600160ff1b03613c28565b8c613c0f8d6004614be7565b81518110613c1f57613c1f614ba8565b60200260200101515b9050600086600510613c41576001600160ff1b03613c66565b8d613c4d8e6005614be7565b81518110613c5d57613c5d614ba8565b60200260200101515b9050600087600610613c7f576001600160ff1b03613ca4565b8e613c8b8f6006614be7565b81518110613c9b57613c9b614ba8565b60200260200101515b905085871315613cb2579495945b83851315613cbe579293925b81831315613cca579091905b84871315613cd6579395935b83861315613ce2579294925b80831315613cec57915b84861315613cf8579394935b80821315613d0257905b82871315613d0e579195915b81861315613d1a579094905b80851315613d2457935b82861315613d30579194915b80841315613d3a57925b82851315613d46579193915b81841315613d52579092905b82841315613d5e579192915b6000613d6a8f8e614bbe565b905080600003613d7c57879a50613e24565b80600103613d8c57869a50613e24565b80600203613d9c57859a50613e24565b80600303613dac57849a50613e24565b80600403613dbc57839a50613e24565b80600503613dcc57829a50613e24565b80600603613ddc57819a50613e24565b60405162461bcd60e51b815260206004820152601060248201527f6b31206f7574206f6620626f756e6473000000000000000000000000000000006044820152606401610b81565b60008f8d613e329190614bbe565b90508c8e03613e4e57508a995061399d98505050505050505050565b80600003613e68575096985061399d975050505050505050565b80600103613e82575095985061399d975050505050505050565b80600203613e9c575094985061399d975050505050505050565b80600303613eb6575093985061399d975050505050505050565b80600403613ed0575092985061399d975050505050505050565b80600503613eea575091985061399d975050505050505050565b80600603613f04575090985061399d975050505050505050565b60405162461bcd60e51b815260206004820152601060248201527f6b32206f7574206f6620626f756e6473000000000000000000000000000000006044820152606401610b81565b600080846002613f5c8587614be7565b613f6691906149b9565b81518110613f7657613f76614ba8565b60200260200101519050600184039350600183613f939190614be7565b92505b60018401935080858581518110613faf57613faf614ba8565b602002602001015112613f96575b613fc8600184614bbe565b925080858481518110613fdd57613fdd614ba8565b602002602001015113613fbd57828410156140655784838151811061400457614004614ba8565b602002602001015185858151811061401e5761401e614ba8565b602002602001015186868151811061403857614038614ba8565b6020026020010187868151811061405157614051614ba8565b602090810291909101019190915252613f96565b829150506106bc565b50805460008255601f0160209004906000526020600020908101906121be91906140d2565b5080546000825560010160029004906000526020600020908101906121be91906140d2565b50805460008255906000526020600020908101906121be91905b5b808211156140e757600081556001016140d3565b5090565b6000815180845260005b81811015614111576020818501810151868301820152016140f5565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106bc60208301846140eb565b6001600160a01b03811681146121be57600080fd5b67ffffffffffffffff811681146121be57600080fd5b60008060006060848603121561418457600080fd5b833561418f81614144565b9250602084013561419f81614159565b915060408401356141af81614159565b809150509250925092565b6000602082840312156141cc57600080fd5b5035919050565b803560ff8116811461239c57600080fd5b803563ffffffff8116811461239c57600080fd5b600581106121be57600080fd5b600080600080600060a0868803121561421d57600080fd5b853561422881614159565b9450614236602087016141d3565b9350614244604087016141e4565b9250606086013561425481614159565b91506080860135614264816141f8565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156142ac576142ac614272565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156142db576142db614272565b604052919050565b600067ffffffffffffffff8311156142fd576142fd614272565b614310601f8401601f19166020016142b2565b905082815283838301111561432457600080fd5b828260208301376000602084830101529392505050565b600082601f83011261434c57600080fd5b6106bc838335602085016142e3565b60006040828403121561436d57600080fd5b6040516040810167ffffffffffffffff828210818311171561439157614391614272565b8160405282935084359150808211156143a957600080fd5b506143b68582860161433b565b825250602083013560208201525092915050565b600060a082840312156143dc57600080fd5b60405160a0810167ffffffffffffffff828210818311171561440057614400614272565b81604052829350843583526020850135915061441b82614144565b816020840152604085013591506001600160e01b03198216821461443e57600080fd5b81604084015260608501356060840152608085013591508082111561446257600080fd5b5061446f8582860161435b565b6080830152505092915050565b6000806000806080858703121561449257600080fd5b843567ffffffffffffffff8111156144a957600080fd5b6144b5878288016143ca565b9450506144c4602086016141e4565b925060408501356144d481614159565b91506144e2606086016141d3565b905092959194509250565b803562ffffff8116811461239c57600080fd5b600080600083850361016081121561451757600080fd5b614520856141e4565b935061452e602086016141e4565b925061012080603f198301121561454457600080fd5b61454c614288565b915061455a604087016141e4565b8252614568606087016141e4565b6020830152614579608087016141e4565b604083015261458a60a087016141e4565b606083015261459b60c087016141e4565b60808301526145ac60e087016144ed565b60a08301526101006145bf8188016144ed565b60c08401526145cf8288016144ed565b60e08401526145e161014088016144ed565b818401525050809150509250925092565b80151581146121be57600080fd5b600060e0828403121561461257600080fd5b60405160e0810181811067ffffffffffffffff8211171561463557614635614272565b604052905080823561464681614159565b8152602083013561465681614159565b6020820152614667604084016141d3565b6040820152614678606084016141e4565b6060820152608083013561468b81614144565b608082015260a083013561469e816145f2565b60a082015260c092830135920191909152919050565b600080600061012084860312156146ca57600080fd5b8335925060208401356146dc816145f2565b91506146eb8560408601614600565b90509250925092565b60006020828403121561470657600080fd5b81356106bc81614144565b60008060006060848603121561472657600080fd5b833561473181614159565b925061473f602085016141d3565b91506146eb604085016141e4565b6000806000610120848603121561476357600080fd5b8335925060208401356001600160801b03811681146146dc57600080fd5b6000806040838503121561479457600080fd5b823591506147a4602084016141d3565b90509250929050565b600080600080608085870312156147c357600080fd5b843567ffffffffffffffff8111156147da57600080fd5b6147e6878288016143ca565b9450506147f5602086016141e4565b9250614803604086016141d3565b9150606085013561481381614144565b939692955090935050565b6000806000610120848603121561483457600080fd5b83359250602084013591506146eb8560408601614600565b6000806000610120848603121561486257600080fd5b83359250602084013567ffffffffffffffff81111561488057600080fd5b61488c8682870161433b565b9250506146eb8560408601614600565b600080600061012084860312156148b257600080fd5b83359250602084013567ffffffffffffffff8111156148d057600080fd5b8401601f810186136148e157600080fd5b61488c868235602084016142e3565b634e487b7160e01b600052601160045260246000fd5b600060018201614918576149186148f0565b5060010190565b6000806000806080858703121561493557600080fd5b505082516020840151604085015160609095015191969095509092509050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561497d57600080fd5b5051919050565b600081600019048311821515161561499e5761499e6148f0565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826149c8576149c86149a3565b500490565b6000602082840312156149df57600080fd5b81516106bc816145f2565b805161239c816141f8565b600080600080600060a08688031215614a0d57600080fd5b85519450602080870151614a2081614159565b6040880151909550614a3181614144565b606088015190945067ffffffffffffffff80821115614a4f57600080fd5b818901915089601f830112614a6357600080fd5b815181811115614a7557614a75614272565b8060051b9150614a868483016142b2565b818152918301840191848101908c841115614aa057600080fd5b938501935b83851015614aca5784519250614aba83614144565b8282529385019390850190614aa5565b809750505050505050614adf608087016149ea565b90509295509295909350565b63ffffffff848116825283811660208301528254808216604084015261016083019190614b2560608501838360201c1663ffffffff169052565b614b3c60808501838360401c1663ffffffff169052565b614b5360a08501838360601c1663ffffffff169052565b614b6a60c08501838360801c1663ffffffff169052565b62ffffff60a082901c811660e086015260b882901c811661010086015260d082901c1661012085015260e81c61014090930192909252949350505050565b634e487b7160e01b600052603260045260246000fd5b81810381811115612a1757612a176148f0565b634e487b7160e01b600052603160045260246000fd5b80820180821115612a1757612a176148f0565b600060ff831680614c0d57614c0d6149a3565b8060ff84160691505092915050565b600060208284031215614c2e57600080fd5b81516106bc81614159565b828152604060208201526000610ba460408301846140eb565b606081526000614c6560608301866140eb565b602083019490945250901515604090910152919050565b85815263ffffffff85166020820152831515604082015260ff8316606082015260a0608082015260006109a060a08301846140eb565b600082614cc157614cc16149a3565b500690565b600060ff821660ff8103614cdc57614cdc6148f0565b60010192915050565b60008060408385031215614cf857600080fd5b505080516020909101519092909150565b634e487b7160e01b600052600160045260246000fd5b8082018281126000831280158216821582161715614d3f57614d3f6148f0565b505092915050565b600082614d5657614d566149a3565b7f8000000000000000000000000000000000000000000000000000000000000000821460001984141615614d8c57614d8c6148f0565b500590565b600082614da057614da06149a3565b50079056fea264697066735822122019a7c1ded7f353a9282245503a632b77c36aa6e0c73bfe13f1696eb1a78b4a4b64736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106101ac5760003560e01c8063a185c35f116100ec578063c3f909d41161008a578063d98196b311610064578063d98196b3146105b1578063e9babaec146105d1578063f2fde38b146105f1578063f30be5511461061157600080fd5b8063c3f909d41461053b578063c6f3401314610571578063d1bf555c1461059157600080fd5b8063a690d7ae116100c6578063a690d7ae1461049d578063b9b55c9a146104bb578063bf8542a9146104f4578063bfedbfa01461051457600080fd5b8063a185c35f1461044a578063a353ddb81461046a578063a4dfe92f1461048a57600080fd5b8063715018a611610159578063796184171161013357806379618417146103b85780638da5cb5b146103d85780638df4e3e21461040a5780639ad6c3471461042a57600080fd5b8063715018a614610363578063752f8c1414610378578063786708e61461039857600080fd5b80633f1eef591161018a5780633f1eef59146102585780635fbbc0d21461028657806369bcdb7d1461033657600080fd5b8063181f5a77146101b15780631a892832146102065780633015394c14610236575b600080fd5b3480156101bd57600080fd5b50604080518082018252601f81527f52657175657374526573706f6e7365436f6f7264696e61746f722076302e3100602082015290516101fd9190614131565b60405180910390f35b34801561021257600080fd5b5061022661022136600461416f565b610631565b60405190151581526020016101fd565b34801561024257600080fd5b506102566102513660046141ba565b6106c3565b005b34801561026457600080fd5b50610278610273366004614205565b61078c565b6040519081526020016101fd565b34801561029257600080fd5b506006546040805163ffffffff80841682526401000000008404811660208301526801000000000000000084048116928201929092526c01000000000000000000000000830482166060820152600160801b8304909116608082015262ffffff600160a01b8304811660a0830152600160b81b8304811660c0830152600160d01b8304811660e0830152600160e81b909204909116610100820152610120016101fd565b34801561034257600080fd5b506102786103513660046141ba565b60009081526002602052604090205490565b34801561036f57600080fd5b506102566109ab565b34801561038457600080fd5b5061027861039336600461447c565b6109bf565b3480156103a457600080fd5b506102566103b3366004614500565b610bac565b3480156103c457600080fd5b506102566103d33660046146b4565b610df8565b3480156103e457600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101fd565b34801561041657600080fd5b506102566104253660046146f4565b6110cd565b34801561043657600080fd5b50610278610445366004614711565b61129b565b34801561045657600080fd5b5061025661046536600461474d565b6112df565b34801561047657600080fd5b50610256610485366004614781565b6115dd565b6102786104983660046147ad565b611791565b3480156104a957600080fd5b506004546001600160a01b03166103f2565b3480156104c757600080fd5b506102266104d63660046146f4565b6001600160a01b031660009081526008602052604090205460ff1690565b34801561050057600080fd5b5061025661050f36600461481e565b6119da565b34801561052057600080fd5b5061052960ff81565b60405160ff90911681526020016101fd565b34801561054757600080fd5b506005546040805163ffffffff8084168252650100000000009093049092166020830152016101fd565b34801561057d57600080fd5b5061025661058c36600461484c565b611b9c565b34801561059d57600080fd5b506102566105ac36600461481e565b611d53565b3480156105bd57600080fd5b506103f26105cc3660046141ba565b611fce565b3480156105dd57600080fd5b506102566105ec3660046146f4565b611ff8565b3480156105fd57600080fd5b5061025661060c3660046146f4565b612131565b34801561061d57600080fd5b5061025661062c36600461489c565b6121c1565b600154600090815b818110156106b557604080516001600160a01b03881660208083019190915267ffffffffffffffff808916838501528716606080840191909152835180840390910181526080909201909252805191012061069381612378565b156106a457600193505050506106bc565b506106ae81614906565b9050610639565b5060009150505b9392505050565b6106cc81612378565b6106e957604051631b44092560e11b815260040160405180910390fd5b6000818152600360205260409020546001600160a01b03163314610739576040517f517907dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600260209081526040808320839055600390915280822080546001600160a01b03191690555182917f6187bf55f2675dbecee951f81c92ecac87f54ed5bf888d31b09e634749b848ef91a250565b60048054604051638a522dbb60e01b815267ffffffffffffffff85169281019290925260009182916001600160a01b031690638a522dbb90602401608060405180830381865afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610808919061491f565b935060009250600391506108199050565b84600481111561082b5761082b614955565b036108dd57600480546040516312e7400160e11b815267ffffffffffffffff8816928101929092526000916001600160a01b03909116906325ce800290602401602060405180830381865afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac919061496b565b905060006108bb8a8a8a61129b565b90506127106108ca8383614984565b6108d491906149b9565b925050506109a0565b60028460048111156108f1576108f1614955565b03610979576004805460405163f1b04d2b60e01b815267ffffffffffffffff8816928101929092526001600160a01b03169063f1b04d2b90602401602060405180830381865afa158015610949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096d91906149cd565b6109745750805b6109a0565b600484600481111561098d5761098d614955565b036109a05761099d88888861129b565b90505b979650505050505050565b6109b36123a1565b6109bd60006123fb565b565b600554600090640100000000900460ff16156109ee5760405163769dd35360e11b815260040160405180910390fd5b60048054604051633bd7108d60e11b815267ffffffffffffffff861692810192909252600091829182916001600160a01b03909116906377ae211a90602401600060405180830381865afa158015610a4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7291908101906149f5565b600480546040517f5e42205c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8e169281019290925295985093965094506000936001600160a01b031692635e42205c92506024019050602060405180830381865afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1091906149cd565b905080610b49576040517fb3c2774700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610b5884888b8b8761078c565b905080851015610b8a5760405163b99e2ab760e01b815260048101869052602481018290526044015b60405180910390fd5b600080610b9a8c8b8d8c8661244b565b9750505050505050505b949350505050565b610bb46123a1565b604080516060808201835263ffffffff86811680845260006020808601919091528783169486018590526005805468ffffffffffffffffff191690921765010000000000909502949094179055845160068054948701518787015194880151608089015160a08a015160c08b015160e08c01516101008d015197891667ffffffffffffffff19909b169a909a1764010000000095891695909502949094177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff1668010000000000000000988816989098027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff16979097176c0100000000000000000000000092871692909202919091177fffffffffffffffffff00000000000000ffffffffffffffffffffffffffffffff16600160801b91909516027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff1693909317600160a01b62ffffff95861602177fffffff000000000000ffffffffffffffffffffffffffffffffffffffffffffff16600160b81b938516939093027fffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffff1692909217600160d01b94841694909402939093177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b929093169190910291909117815590517f107fdd8d898f7a380d4a448bb9882a3e1bb767bd803a09721d828b4ce217b04391610deb9186918691614aeb565b60405180910390a1505050565b600554640100000000900460ff1615610e245760405163769dd35360e11b815260040160405180910390fd5b60005a60405163189bdbdb60e21b6020820152909150602401604051602081830303815290604052805190602001208260c0015114610e765760405163e7b9d74d60e01b815260040160405180910390fd5b610e808285612759565b60008481526007602081815260408084203380865260018281018552838720805460ff1916821790558a8752600c8552838720805480830182558189528689208782040180548d1515601f9093166101000a92830260ff93840219909116179055968652835491820184558388529490962090950180546001600160a01b0319169095179094558501518154919392161115610f585760408051338152602081018890527f81b10a8136baa5e8975cb74b9c1cd5c44791d42a0fe7c195457f86ce298e0c8391015b60405180910390a1505050505050565b6000610fd283805480602002602001604051908101604052809291908181526020018280548015610fc857602002820191906000526020600020906000905b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610f975790505b505050505061290d565b60408051602481018a90528215156044808301919091528251808303909101815260649091019091526020810180516001600160e01b03167f90d95efc00000000000000000000000000000000000000000000000000000000179052909150600061103d82886129d0565b9050600061104a8a612a1d565b60008b8152600c60205260408120919250611065919061406e565b6000611072898984612b44565b604080518c1515815260208101839052851515918101919091529091508b907f27dd42f8797fcff24c7c99ae461d9fd99e490ba813ede9b16fc9df17108bfe56906060015b60405180910390a250505050505050505b505050565b6110d56123a1565b6001600160a01b03811660009081526008602052604090205460ff16611132576040517ff9a0ffdf0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610b81565b6001600160a01b0381166000908152600860205260408120805460ff19169055600154905b8181101561125a57826001600160a01b03166001828154811061117c5761117c614ba8565b6000918252602090912001546001600160a01b03160361124a57600060016111a48185614bbe565b815481106111b4576111b4614ba8565b600091825260209091200154600180546001600160a01b0390921692508291849081106111e3576111e3614ba8565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600180548061122257611222614bd1565b600082815260209020810160001990810180546001600160a01b03191690550190555061125a565b61125381614906565b9050611157565b506040516001600160a01b03831681527f5406c1f2d9ece2027a923f317fb5f2370221e330db898c037c10acc0c20495b39060200160405180910390a15050565b6000808360ff166112ab86613033565b6112b59190614984565b905060006112c963ffffffff85163a614984565b90506112d58183614be7565b9695505050505050565b600554640100000000900460ff161561130b5760405163769dd35360e11b815260040160405180910390fd5b60005a604051660ead2dce86264760cb1b6020820152909150602701604051602081830303815290604052805190602001208260c00151146113605760405163e7b9d74d60e01b815260040160405180910390fd5b61136a8285612759565b6000848152600b60209081526040808320805460018082018355828652848620600283040180549282166010026101000a6001600160801b0381810219909416938b1602929092179091558885526007808552838620338088528184018752858820805460ff19168517905591865280549283018155808752949095200180546001600160a01b031916909417909355840151825460ff90911611156114405760408051338152602081018890527f81b10a8136baa5e8975cb74b9c1cd5c44791d42a0fe7c195457f86ce298e0c839101610f48565b60006114cc838054806020026020016040519081016040528092919081815260200182805480156114c257602002820191906000526020600020906000905b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f0104928301926001038202915080841161147f5790505b5050505050613056565b905060006114d982613105565b60408051602481018b90526001600160801b0383166044808301919091528251808303909101815260649091019091526020810180516001600160e01b03167f45b9b6fb00000000000000000000000000000000000000000000000000000000179052909150600061154b82896129d0565b905060006115588b612a1d565b60008c8152600b602052604081209192506115739190614093565b60006115808a8a84612b44565b604080516001600160801b038e168152602081018390528515158183015290519192508d917f8f2da545293ec9ebc31d6839176dc1374f380f6fc61bfea08078233c6ed9b01e9181900360600190a2505050505050505050505050565b60008281526009602052604090205460ff16611625576040517f9a358cc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060ff1660000361164957604051630fa163bb60e41b815260040160405180910390fd5b60405163189bdbdb60e21b6020820152602401604051602081830303815290604052805190602001208214801561168b5750611686600282614bfa565b60ff16155b156116a957604051630fa163bb60e41b815260040160405180910390fd5b604051660ead2dce86264760cb1b60208201526027016040516020818303038152906040528051906020012082148061170b57506040516534b73a191a9b60d11b60208201526026016040516020818303038152906040528051906020012082145b8061173d575060405163189bdbdb60e21b60208201526024016040516020818303038152906040528051906020012082145b1561178d57600154600090611754906002906149b9565b90508160ff1660011415801561176f57508060ff168260ff16115b156110c857604051630fa163bb60e41b815260040160405180910390fd5b5050565b600554600090640100000000900460ff16156117c05760405163769dd35360e11b815260040160405180910390fd5b6000806117ce82868861129b565b9050803410156117fa5760405163b99e2ab760e01b815234600482015260248101829052604401610b81565b600480546040517f190118b700000000000000000000000000000000000000000000000000000000815233928101929092526000916001600160a01b039091169063190118b7906024016020604051808303816000875af1158015611863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118879190614c1c565b90506001600061189a8a848b8b8661244b565b600480546040517fc49910e40000000000000000000000000000000000000000000000000000000081529293506001600160a01b03169163c49910e49187916118f59188910167ffffffffffffffff91909116815260200190565b6000604051808303818588803b15801561190e57600080fd5b505af1158015611922573d6000803e3d6000fd5b5050505050600084346119359190614bbe565b905080156119cc576000886001600160a01b03168260405160006040518083038185875af1925050503d806000811461198a576040519150601f19603f3d011682016040523d82523d6000602084013e61198f565b606091505b50509050806119ca576040517fef7a4b6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b509998505050505050505050565b600554640100000000900460ff1615611a065760405163769dd35360e11b815260040160405180910390fd5b60005a6040517f62797465733332000000000000000000000000000000000000000000000000006020820152909150602701604051602081830303815290604052805190602001208260c0015114611a715760405163e7b9d74d60e01b815260040160405180910390fd5b611a7b8285612759565b60008481526007602081815260408084203380865260018083018552838720805460ff1916821790559484528154948501825581865283862090940180546001600160a01b031916909417909355805160248101899052604480820189905282518083039091018152606490910190915290810180516001600160e01b03167ff40b4def000000000000000000000000000000000000000000000000000000001790529091611b2a82866129d0565b90506000611b3788612a1d565b90506000611b46878784612b44565b604080518a8152602081018390528515159181019190915290915089907f39136b4e0c0ed9615348ccda4aabc1e49031d4fcc1d2a631e0ca0340fea80a60906060015b60405180910390a2505050505050505050565b600554640100000000900460ff1615611bc85760405163769dd35360e11b815260040160405180910390fd5b60005a6040517f62797465730000000000000000000000000000000000000000000000000000006020820152909150602501604051602081830303815290604052805190602001208260c0015114611c335760405163e7b9d74d60e01b815260040160405180910390fd5b611c3d8285612759565b60008481526007602081815260408084203380865260018281018552838720805460ff1916821790559484528154948501825581865292852090930180546001600160a01b031916909217909155519091907f19e2cd2f0000000000000000000000000000000000000000000000000000000090611cc19088908890602401614c39565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506000611d0182866129d0565b90506000611d0e88612a1d565b90506000611d1d878784612b44565b9050887f6404cc3a68084786e4262010affb9e1ff9f005c3c6418cfa5bce5a2dcde06667898386604051611b8993929190614c52565b600554640100000000900460ff1615611d7f5760405163769dd35360e11b815260040160405180910390fd5b60005a6040516534b73a191a9b60d11b6020820152909150602601604051602081830303815290604052805190602001208260c0015114611dd35760405163e7b9d74d60e01b815260040160405180910390fd5b611ddd8285612759565b60008481526007602081815260408084203380865260018083018552838720805460ff1916821790558a8752600a855283872080548083018255818952868920018b9055958552825490810183558287529390952090920180546001600160a01b03191690941790935591840151815491929160ff9091161115611e915760408051338152602081018890527f81b10a8136baa5e8975cb74b9c1cd5c44791d42a0fe7c195457f86ce298e0c839101610f48565b6000611eeb83805480602002602001604051908101604052809291908181526020018280548015611ee157602002820191906000526020600020905b815481526020019060010190808311611ecd575b5050505050613105565b60408051602481018a905260448082018490528251808303909101815260649091019091526020810180516001600160e01b03167f6e2acda0000000000000000000000000000000000000000000000000000000001790529091506000611f5282886129d0565b90506000611f5f8a612a1d565b60008b8152600a60205260408120919250611f7a91906140b8565b6000611f87898984612b44565b604080518c815260208101839052851515918101919091529091508b907fc2aca9bb0791cd99d3861401384dc7d8f5b6f2297d6ac1c8dfb91655ac81d437906060016110b7565b60018181548110611fde57600080fd5b6000918252602090912001546001600160a01b0316905081565b6120006123a1565b60015460ff1161203c576040517f25d0209c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff161561209a576040517f6ff7406a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610b81565b6001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038416908117909155600081815260086020908152604091829020805460ff1916909417909355519081527fd9d9fdcc9f936c76b5aafe54fc3db5dcec0c6583c9ccc4abe91d17575c5145a5910160405180910390a150565b6121396123a1565b6001600160a01b0381166121b55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b81565b6121be816123fb565b50565b600554640100000000900460ff16156121ed5760405163769dd35360e11b815260040160405180910390fd5b60005a6040517f737472696e6700000000000000000000000000000000000000000000000000006020820152909150602601604051602081830303815290604052805190602001208260c00151146122585760405163e7b9d74d60e01b815260040160405180910390fd5b6122628285612759565b60008481526007602081815260408084203380865260018281018552838720805460ff1916821790559484528154948501825581865292852090930180546001600160a01b031916909217909155519091907f79b1500800000000000000000000000000000000000000000000000000000000906122e69088908890602401614c39565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050600061232682866129d0565b9050600061233388612a1d565b90506000612342878784612b44565b9050887f5e815adc9078e19ad43911e496cc2d0ec73cd244ddd31b06896c20c48b988e8b898386604051611b8993929190614c52565b6000818152600260205260408120541561239457506001919050565b506000919050565b919050565b6000546001600160a01b031633146109bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b81565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061245b8660000151846115dd565b600480546040517f734e892a00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8816928101929092523360248301526001600160a01b03169063734e892a90604401602060405180830381865afa1580156124cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f191906149cd565b612539576040517ff0019fe600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff86166004820152336024820152604401610b81565b60055463ffffffff9081169085161115612593576005546040517ff5d7e01e00000000000000000000000000000000000000000000000000000000815263ffffffff80871660048301529091166024820152604401610b81565b600480546040517fa8329c0500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8816928101929092523360248301526000916001600160a01b039091169063a8329c05906044016020604051808303816000875af115801561260c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126309190614c1c565b6040805133602080830182905267ffffffffffffffff8b811684860181905290861660608086019190915285518086039091018152608080860187528151918401919091208e5160a087018290524360c088015260e0870184905263ffffffff8e1661010088015260ff8d1661012088015261014087018690528b151561016088015261018080880191909152875180880390910181526101a09096018088528651968501969096206000828152600286528881209190915560039094529590922080546001600160a01b031916841790558c51918d015151959650939491939285927ff5de04e252c7bc264fe51dceea89d95673b5166c209718c5f5a068341dab8111926127469290918d918c918e91614c7c565b60405180910390a4979650505050505050565b3360009081526008602052604090205460ff166127a4576040517fd6c33748000000000000000000000000000000000000000000000000000000008152336004820152602401610b81565b600081815260076020908152604080832033845260010190915290205460ff16156127fb576040517f9f17b6ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600260205260408120549081900361282b57604051631b44092560e11b815260040160405180910390fd5b6128d582846000015167ffffffffffffffff1685602001518660400151876060015188608001518960a001518a60c001516040805160208082019a909a528082019890985267ffffffffffffffff96909616606088015263ffffffff93909316608087015260ff9390931660a08601526001600160a01b031660c085015290151560e084015261010080840191909152815180840390910181526101209092019052805191012090565b81146110c8576040517fd529142c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002825161291d9190614cb2565b600003612956576040517f0a81fe0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060005b84518110156129b45784818151811061297757612977614ba8565b602002602001015115612996578261298e81614906565b9350506129a4565b816129a081614906565b9250505b6129ad81614906565b905061295c565b508082106129c6575060019392505050565b5060009392505050565b6005805464ff000000001916640100000000179055606081015160808201516000918291612a059163ffffffff169086613118565b6005805464ff00000000191690559150505b92915050565b6000818152600760209081526040808320805482518185028101850190935280835260609493830182828015612a7c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612a5e575b5050505050905060005b81518160ff161015612afa57600760008581526020019081526020016000206001016000838360ff1681518110612abf57612abf614ba8565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169055612af381614cc6565b9050612a86565b50600083815260076020526040812090612b1482826140b8565b50506000928352600260209081526040808520859055600390915290922080546001600160a01b03191690555090565b805160a08401516000919015612d89576004805460208701516040517fc9d2d7bf00000000000000000000000000000000000000000000000000000000815260009384936001600160a01b03169263c9d2d7bf92612bb2920167ffffffffffffffff91909116815260200190565b60408051808303816000875af1158015612bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf49190614ce5565b90925090508015612d7f57600080612c0c85846149b9565b905060005b612c1c600187614bbe565b8160ff161015612cdb5760045488516001600160a01b0390911690636b19a19d9084908b9060ff8616908110612c5457612c54614ba8565b60200260200101516040518363ffffffff1660e01b8152600401612c8b9291909182526001600160a01b0316602082015260400190565b600060405180830381600087803b158015612ca557600080fd5b505af1158015612cb9573d6000803e3d6000fd5b505050508183612cc99190614be7565b9250612cd481614cc6565b9050612c11565b506004546001600160a01b0316636b19a19d612cf78486614bbe565b89612d0360018a614bbe565b81518110612d1357612d13614ba8565b60200260200101516040518363ffffffff1660e01b8152600401612d4a9291909182526001600160a01b0316602082015260400190565b600060405180830381600087803b158015612d6457600080fd5b505af1158015612d78573d6000803e3d6000fd5b5050505050505b5091506106bc9050565b6000612da08660200151876040015160ff16613164565b90508015613028576004805460208801516040517f57f2eda700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911692810192909252602482018390526000916001600160a01b03909116906357f2eda7906044016020604051808303816000875af1158015612e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4c919061496b565b90506000612e5a84836149b9565b90506000805b612e6b600187614bbe565b811015612f3c5760045460208b015189516001600160a01b03909216916382e7b38c919086908c9086908110612ea357612ea3614ba8565b60209081029190910101516040516001600160e01b031960e086901b16815267ffffffffffffffff909316600484015260248301919091526001600160a01b03166044820152606401600060405180830381600087803b158015612f0657600080fd5b505af1158015612f1a573d6000803e3d6000fd5b505050508282612f2a9190614be7565b9150612f3581614906565b9050612e60565b506000612f488961358b565b60045460208c01519192506001600160a01b0316906382e7b38c9083612f6e8689614bbe565b612f789190614be7565b8b612f8460018c614bbe565b81518110612f9457612f94614ba8565b60209081029190910101516040516001600160e01b031960e086901b16815267ffffffffffffffff909316600484015260248301919091526001600160a01b03166044820152606401600060405180830381600087803b158015612ff757600080fd5b505af115801561300b573d6000803e3d6000fd5b50505050848161301b9190614be7565b96505050505050506106bc565b6000925050506106bc565b60008061303f836135bf565b90506106bc63ffffffff821664e8d4a51000614984565b60606000825167ffffffffffffffff81111561307457613074614272565b60405190808252806020026020018201604052801561309d578160200160208202803683370190505b50905060005b83518110156130fe578381815181106130be576130be614ba8565b60200260200101516001600160801b03168282815181106130e1576130e1614ba8565b6020908102919091010152806130f681614906565b9150506130a3565b5092915050565b6000612a1761311383613751565b6137f0565b60005a61138881101561312a57600080fd5b61138881039050846040820482031161314257600080fd5b50823b61314e57600080fd5b60008083516020850160008789f1949350505050565b60048054604051633bd7108d60e11b815267ffffffffffffffff851692810192909252600091829182916001600160a01b03909116906377ae211a90602401600060405180830381865afa1580156131c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131e891908101906149f5565b60048054604051638a522dbb60e01b815267ffffffffffffffff8d1692810192909252949750909550600094506001600160a01b0390931692638a522dbb92506024019050608060405180830381865afa15801561324a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326e919061491f565b93506001925061327c915050565b82600481111561328e5761328e614955565b036133075760048054604051631e4c2cb760e11b815267ffffffffffffffff8916928101929092526001600160a01b031690633c98596e90602401600060405180830381600087803b1580156132e357600080fd5b505af11580156132f7573d6000803e3d6000fd5b5050505060009350505050612a17565b600282600481111561331b5761331b614955565b036133895760048054604051631e4c2cb760e11b815267ffffffffffffffff8916928101929092526001600160a01b031690633c98596e90602401600060405180830381600087803b15801561337057600080fd5b505af1158015613384573d6000803e3d6000fd5b505050505b60008563ffffffff1661339b85613033565b6133a59190614984565b905060028360048111156133bb576133bb614955565b036134d3576004805460405163f1b04d2b60e01b815267ffffffffffffffff8a16928101929092526001600160a01b03169063f1b04d2b90602401602060405180830381865afa158015613413573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343791906149cd565b6134c65750600480546040517f7b3d789500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff89169281019290925282916001600160a01b0390911690637b3d789590602401600060405180830381600087803b1580156134a957600080fd5b505af11580156134bd573d6000803e3d6000fd5b50505050613580565b6000945050505050612a17565b60038360048111156134e7576134e7614955565b0361358057600480546040516312e7400160e11b815267ffffffffffffffff8a1692810192909252612710916001600160a01b03909116906325ce800290602401602060405180830381865afa158015613545573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613569919061496b565b6135739083614984565b61357d91906149b9565b90505b9350612a1792505050565b60005a6005546135ab90849065010000000000900463ffffffff16614be7565b6135b59190614bbe565b612a17903a614984565b604080516101208101825260065463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c01000000000000000000000000810483166060830152600160801b8104909216608082015262ffffff600160a01b8304811660a08301819052600160b81b8404821660c0840152600160d01b8404821660e0840152600160e81b9093041661010082015260009167ffffffffffffffff84161161367a575192915050565b8267ffffffffffffffff168160a0015162ffffff161080156136af57508060c0015162ffffff168367ffffffffffffffff1611155b156136be576020015192915050565b8267ffffffffffffffff168160c0015162ffffff161080156136f357508060e0015162ffffff168367ffffffffffffffff1611155b15613702576040015192915050565b8267ffffffffffffffff168160e0015162ffffff16108015613738575080610100015162ffffff168367ffffffffffffffff1611155b15613747576060015192915050565b6080015192915050565b60606000825167ffffffffffffffff81111561376f5761376f614272565b604051908082528060200260200182016040528015613798578160200160208202803683370190505b50905060005b83518110156130fe578381815181106137b9576137b9614ba8565b60200260200101518282815181106137d3576137d3614ba8565b6020908102919091010152806137e881614906565b91505061379e565b6000808251116138425760405162461bcd60e51b815260206004820152601660248201527f6c697374206d757374206e6f7420626520656d707479000000000000000000006044820152606401610b81565b815160006138516002836149b9565b905061385e600283614cb2565b600003613898576000806138898682613878600188614bbe565b613883600188614bbe565b876138af565b90925090506112d582826139a7565b610ba48460006138a9600186614bbe565b84613a4a565b6000808284106138be57600080fd5b8386111580156138ce5750848411155b6138d757600080fd5b8286111580156138e75750848311155b6138f057600080fd5b60076138fc8787614bbe565b10156139185761390f8787878787613aef565b9150915061399d565b6000613925888888613f4c565b905080841161393657809550613997565b8481101561395057613949816001614be7565b9650613997565b80851115801561395f57508381105b61396b5761396b614d09565b61397788888388613a4a565b925061398f88613988836001614be7565b8887613a4a565b91505061399d565b506138f0565b9550959350505050565b600080831280156139b85750600082135b806139ce57506000831380156139ce5750600082125b156139f05760026139df8385614d1f565b6139e99190614d47565b9050612a17565b600060026139fe8185614d91565b613a09600287614d91565b613a139190614d1f565b613a1d9190614d47565b905080613a2b600285614d47565b613a36600287614d47565b613a409190614d1f565b610ba49190614d1f565b600081841115613a5957600080fd5b82821115613a6657600080fd5b82841015613acb576007613a7a8585614bbe565b1015613a99576000613a8f8686868687613aef565b509150610ba49050565b6000613aa6868686613f4c565b9050808311613ab757809350613ac5565b613ac2816001614be7565b94505b50613a66565b848481518110613add57613add614ba8565b60200260200101519050949350505050565b6000808086613aff876001614be7565b613b099190614bbe565b9050600088613b188983614be7565b81518110613b2857613b28614ba8565b60200260200101519050600082600110613b49576001600160ff1b03613b6e565b89613b558a6001614be7565b81518110613b6557613b65614ba8565b60200260200101515b9050600083600210613b87576001600160ff1b03613bac565b8a613b938b6002614be7565b81518110613ba357613ba3614ba8565b60200260200101515b9050600084600310613bc5576001600160ff1b03613bea565b8b613bd18c6003614be7565b81518110613be157613be1614ba8565b60200260200101515b9050600085600410613c03576001600160ff1b03613c28565b8c613c0f8d6004614be7565b81518110613c1f57613c1f614ba8565b60200260200101515b9050600086600510613c41576001600160ff1b03613c66565b8d613c4d8e6005614be7565b81518110613c5d57613c5d614ba8565b60200260200101515b9050600087600610613c7f576001600160ff1b03613ca4565b8e613c8b8f6006614be7565b81518110613c9b57613c9b614ba8565b60200260200101515b905085871315613cb2579495945b83851315613cbe579293925b81831315613cca579091905b84871315613cd6579395935b83861315613ce2579294925b80831315613cec57915b84861315613cf8579394935b80821315613d0257905b82871315613d0e579195915b81861315613d1a579094905b80851315613d2457935b82861315613d30579194915b80841315613d3a57925b82851315613d46579193915b81841315613d52579092905b82841315613d5e579192915b6000613d6a8f8e614bbe565b905080600003613d7c57879a50613e24565b80600103613d8c57869a50613e24565b80600203613d9c57859a50613e24565b80600303613dac57849a50613e24565b80600403613dbc57839a50613e24565b80600503613dcc57829a50613e24565b80600603613ddc57819a50613e24565b60405162461bcd60e51b815260206004820152601060248201527f6b31206f7574206f6620626f756e6473000000000000000000000000000000006044820152606401610b81565b60008f8d613e329190614bbe565b90508c8e03613e4e57508a995061399d98505050505050505050565b80600003613e68575096985061399d975050505050505050565b80600103613e82575095985061399d975050505050505050565b80600203613e9c575094985061399d975050505050505050565b80600303613eb6575093985061399d975050505050505050565b80600403613ed0575092985061399d975050505050505050565b80600503613eea575091985061399d975050505050505050565b80600603613f04575090985061399d975050505050505050565b60405162461bcd60e51b815260206004820152601060248201527f6b32206f7574206f6620626f756e6473000000000000000000000000000000006044820152606401610b81565b600080846002613f5c8587614be7565b613f6691906149b9565b81518110613f7657613f76614ba8565b60200260200101519050600184039350600183613f939190614be7565b92505b60018401935080858581518110613faf57613faf614ba8565b602002602001015112613f96575b613fc8600184614bbe565b925080858481518110613fdd57613fdd614ba8565b602002602001015113613fbd57828410156140655784838151811061400457614004614ba8565b602002602001015185858151811061401e5761401e614ba8565b602002602001015186868151811061403857614038614ba8565b6020026020010187868151811061405157614051614ba8565b602090810291909101019190915252613f96565b829150506106bc565b50805460008255601f0160209004906000526020600020908101906121be91906140d2565b5080546000825560010160029004906000526020600020908101906121be91906140d2565b50805460008255906000526020600020908101906121be91905b5b808211156140e757600081556001016140d3565b5090565b6000815180845260005b81811015614111576020818501810151868301820152016140f5565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106bc60208301846140eb565b6001600160a01b03811681146121be57600080fd5b67ffffffffffffffff811681146121be57600080fd5b60008060006060848603121561418457600080fd5b833561418f81614144565b9250602084013561419f81614159565b915060408401356141af81614159565b809150509250925092565b6000602082840312156141cc57600080fd5b5035919050565b803560ff8116811461239c57600080fd5b803563ffffffff8116811461239c57600080fd5b600581106121be57600080fd5b600080600080600060a0868803121561421d57600080fd5b853561422881614159565b9450614236602087016141d3565b9350614244604087016141e4565b9250606086013561425481614159565b91506080860135614264816141f8565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156142ac576142ac614272565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156142db576142db614272565b604052919050565b600067ffffffffffffffff8311156142fd576142fd614272565b614310601f8401601f19166020016142b2565b905082815283838301111561432457600080fd5b828260208301376000602084830101529392505050565b600082601f83011261434c57600080fd5b6106bc838335602085016142e3565b60006040828403121561436d57600080fd5b6040516040810167ffffffffffffffff828210818311171561439157614391614272565b8160405282935084359150808211156143a957600080fd5b506143b68582860161433b565b825250602083013560208201525092915050565b600060a082840312156143dc57600080fd5b60405160a0810167ffffffffffffffff828210818311171561440057614400614272565b81604052829350843583526020850135915061441b82614144565b816020840152604085013591506001600160e01b03198216821461443e57600080fd5b81604084015260608501356060840152608085013591508082111561446257600080fd5b5061446f8582860161435b565b6080830152505092915050565b6000806000806080858703121561449257600080fd5b843567ffffffffffffffff8111156144a957600080fd5b6144b5878288016143ca565b9450506144c4602086016141e4565b925060408501356144d481614159565b91506144e2606086016141d3565b905092959194509250565b803562ffffff8116811461239c57600080fd5b600080600083850361016081121561451757600080fd5b614520856141e4565b935061452e602086016141e4565b925061012080603f198301121561454457600080fd5b61454c614288565b915061455a604087016141e4565b8252614568606087016141e4565b6020830152614579608087016141e4565b604083015261458a60a087016141e4565b606083015261459b60c087016141e4565b60808301526145ac60e087016144ed565b60a08301526101006145bf8188016144ed565b60c08401526145cf8288016144ed565b60e08401526145e161014088016144ed565b818401525050809150509250925092565b80151581146121be57600080fd5b600060e0828403121561461257600080fd5b60405160e0810181811067ffffffffffffffff8211171561463557614635614272565b604052905080823561464681614159565b8152602083013561465681614159565b6020820152614667604084016141d3565b6040820152614678606084016141e4565b6060820152608083013561468b81614144565b608082015260a083013561469e816145f2565b60a082015260c092830135920191909152919050565b600080600061012084860312156146ca57600080fd5b8335925060208401356146dc816145f2565b91506146eb8560408601614600565b90509250925092565b60006020828403121561470657600080fd5b81356106bc81614144565b60008060006060848603121561472657600080fd5b833561473181614159565b925061473f602085016141d3565b91506146eb604085016141e4565b6000806000610120848603121561476357600080fd5b8335925060208401356001600160801b03811681146146dc57600080fd5b6000806040838503121561479457600080fd5b823591506147a4602084016141d3565b90509250929050565b600080600080608085870312156147c357600080fd5b843567ffffffffffffffff8111156147da57600080fd5b6147e6878288016143ca565b9450506147f5602086016141e4565b9250614803604086016141d3565b9150606085013561481381614144565b939692955090935050565b6000806000610120848603121561483457600080fd5b83359250602084013591506146eb8560408601614600565b6000806000610120848603121561486257600080fd5b83359250602084013567ffffffffffffffff81111561488057600080fd5b61488c8682870161433b565b9250506146eb8560408601614600565b600080600061012084860312156148b257600080fd5b83359250602084013567ffffffffffffffff8111156148d057600080fd5b8401601f810186136148e157600080fd5b61488c868235602084016142e3565b634e487b7160e01b600052601160045260246000fd5b600060018201614918576149186148f0565b5060010190565b6000806000806080858703121561493557600080fd5b505082516020840151604085015160609095015191969095509092509050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561497d57600080fd5b5051919050565b600081600019048311821515161561499e5761499e6148f0565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826149c8576149c86149a3565b500490565b6000602082840312156149df57600080fd5b81516106bc816145f2565b805161239c816141f8565b600080600080600060a08688031215614a0d57600080fd5b85519450602080870151614a2081614159565b6040880151909550614a3181614144565b606088015190945067ffffffffffffffff80821115614a4f57600080fd5b818901915089601f830112614a6357600080fd5b815181811115614a7557614a75614272565b8060051b9150614a868483016142b2565b818152918301840191848101908c841115614aa057600080fd5b938501935b83851015614aca5784519250614aba83614144565b8282529385019390850190614aa5565b809750505050505050614adf608087016149ea565b90509295509295909350565b63ffffffff848116825283811660208301528254808216604084015261016083019190614b2560608501838360201c1663ffffffff169052565b614b3c60808501838360401c1663ffffffff169052565b614b5360a08501838360601c1663ffffffff169052565b614b6a60c08501838360801c1663ffffffff169052565b62ffffff60a082901c811660e086015260b882901c811661010086015260d082901c1661012085015260e81c61014090930192909252949350505050565b634e487b7160e01b600052603260045260246000fd5b81810381811115612a1757612a176148f0565b634e487b7160e01b600052603160045260246000fd5b80820180821115612a1757612a176148f0565b600060ff831680614c0d57614c0d6149a3565b8060ff84160691505092915050565b600060208284031215614c2e57600080fd5b81516106bc81614159565b828152604060208201526000610ba460408301846140eb565b606081526000614c6560608301866140eb565b602083019490945250901515604090910152919050565b85815263ffffffff85166020820152831515604082015260ff8316606082015260a0608082015260006109a060a08301846140eb565b600082614cc157614cc16149a3565b500690565b600060ff821660ff8103614cdc57614cdc6148f0565b60010192915050565b60008060408385031215614cf857600080fd5b505080516020909101519092909150565b634e487b7160e01b600052600160045260246000fd5b8082018281126000831280158216821582161715614d3f57614d3f6148f0565b505092915050565b600082614d5657614d566149a3565b7f8000000000000000000000000000000000000000000000000000000000000000821460001984141615614d8c57614d8c6148f0565b500590565b600082614da057614da06149a3565b50079056fea264697066735822122019a7c1ded7f353a9282245503a632b77c36aa6e0c73bfe13f1696eb1a78b4a4b64736f6c63430008100033",
  "devdoc": {
    "author": "Bisonai",
    "kind": "dev",
    "methods": {
      "cancelRequest(uint256)": {
        "params": {
          "requestId": "- ID of the Oracle Request"
        }
      },
      "deregisterOracle(address)": {
        "params": {
          "oracle": "address of the oracle"
        }
      },
      "getCommitment(uint256)": {
        "params": {
          "requestId": "id of request"
        },
        "returns": {
          "_0": "commmitment value that can be used to determine whether a request is fulfilled or not. If `requestId` is valid and commitment equals to bytes32(0), the request was fulfilled."
        }
      },
      "getPrepaymentAddress()": {
        "returns": {
          "_0": "prepayment address"
        }
      },
      "isOracleRegistered(address)": {
        "returns": {
          "_0": "true when oracle address registered, otherwise false"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingRequestExists(address,uint64,uint64)": {
        "params": {
          "accId": "- ID of the account"
        },
        "returns": {
          "_0": "true if there exists at least one unfulfilled request for the account, false otherwise."
        }
      },
      "registerOracle(address)": {
        "params": {
          "oracle": "address of the oracle"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint64,uint8)": {
        "details": "Generates and stores a request ID, increments the local nonce, creates a request on the target oracle contract.Emits Requested event.",
        "params": {
          "accId": "- The ID of the account. Must be funded with the minimum account balance.",
          "callbackGasLimit": "- How much gas you'd like to receive in your fulfillRequest callback. Note that gasleft() inside fulfillRequest may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRequest. The acceptable range is [0, maxGasLimit]",
          "numSubmission": "number of requested submission to compute the final aggregate value",
          "req": "The initialized Request"
        },
        "returns": {
          "_0": "requestId - A unique * identifier of the request. Can be used to match a request to a * response in fulfillRequest."
        }
      },
      "requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint8,address)": {
        "details": "Generates and stores a request ID, increments the local nonce, creates a request on the target oracle contract.Emits Requested event.",
        "params": {
          "callbackGasLimit": "- How much gas you'd like to receive in your fulfillRequest callback. Note that gasleft() inside fulfillRequest may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRequest. The acceptable range is [0, maxGasLimit]",
          "numSubmission": "number of requested submission to compute the final aggregate value",
          "refundRecipient": "recipient of an extra $KLAY amount that was sent together with service request",
          "req": "The initialized Request"
        },
        "returns": {
          "_0": "requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest."
        }
      },
      "setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))": {
        "params": {
          "feeConfig": "fee tier configuration",
          "gasAfterPaymentCalculation": "gas used in doing accounting after completing the gas measurement",
          "maxGasLimit": "global max for request gas limit"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "typeAndVersion()": {
        "returns": {
          "_0": "Type and version string"
        }
      }
    },
    "title": "Orakl Network RequestResponseCoordinator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelRequest(uint256)": {
        "notice": "Canceling oracle request"
      },
      "deregisterOracle(address)": {
        "notice": "Deregister an oracle"
      },
      "getCommitment(uint256)": {
        "notice": "Get request commitment."
      },
      "getPrepaymentAddress()": {
        "notice": "Access address for prepayment associated withcoordinator."
      },
      "isOracleRegistered(address)": {
        "notice": "Find out whether given oracle address was registered."
      },
      "pendingRequestExists(address,uint64,uint64)": {
        "notice": "Check to see if there exists a request commitment consumers for all consumers and keyhashes for a given acc."
      },
      "registerOracle(address)": {
        "notice": "Register an oracle"
      },
      "requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint64,uint8)": {
        "notice": "Creates a request to RequestResponse oracle using a [regular] account."
      },
      "requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint8,address)": {
        "notice": "Creates a request to RequestResponse oracle using a [temporary] account."
      },
      "setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))": {
        "notice": "Sets the configuration of the VRF coordinator"
      },
      "typeAndVersion()": {
        "notice": "The type and version of this contract"
      },
      "validateNumSubmission(bytes32,uint8)": {
        "notice": "Different jobs specified by jobId have allowed different number of of requests for submissions that depends on total number of registered oracles."
      }
    },
    "notice": "Accepts requests for off-chain data either through [regular] or [temporary] account by calling `requestData` function. Consumers can choose what data type (`jobId`) they want to receive the requested data in, and how many oracles (`numSubmission`) they want to participate on an aggregated answer. Consumers can define the data source and postprocessing steps that should be applied on data received from API. The request is concluded by emitting `DataRequested` event which includes all necessary metadata to provide the requested off-chain data. Off-chain oracles that are registered within the `RequestResponseCoordinator` then compete for delivering the requested data back to on-chain because only a limited number of oracle can submit the requested answer. Answers from off-chain oracles are being collected in contract storage, and the last requested off-chain oracle that submits its answer will also execute consumer's fulfillment function, distributes reward to all participating oracles, and cleanup the storage.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 912,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sOracles",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 916,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sRequestIdToCommitment",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 920,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sRequestOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 923,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sPrepayment",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPrepayment)7831"
      },
      {
        "astId": 933,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sConfig",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Config)930_storage"
      },
      {
        "astId": 936,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sFeeConfig",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(FeeConfig)7458_storage"
      },
      {
        "astId": 4001,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sSubmission",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Submission)3996_storage)"
      },
      {
        "astId": 4005,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sIsOracleRegistered",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4009,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sJobId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4014,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sRequestToSubmissionInt256",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_int256)dyn_storage)"
      },
      {
        "astId": 4019,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sRequestToSubmissionUint128",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_array(t_uint128)dyn_storage)"
      },
      {
        "astId": 4024,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "sRequestToSubmissionBool",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_array(t_bool)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bool)dyn_storage": {
        "base": "t_bool",
        "encoding": "dynamic_array",
        "label": "bool[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)dyn_storage": {
        "base": "t_int256",
        "encoding": "dynamic_array",
        "label": "int256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint128)dyn_storage": {
        "base": "t_uint128",
        "encoding": "dynamic_array",
        "label": "uint128[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPrepayment)7831": {
        "encoding": "inplace",
        "label": "contract IPrepayment",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_bool)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bool)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_int256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_int256)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint128)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint128[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint128)dyn_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Submission)3996_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RequestResponseCoordinator.Submission)",
        "numberOfBytes": "32",
        "value": "t_struct(Submission)3996_storage"
      },
      "t_struct(Config)930_storage": {
        "encoding": "inplace",
        "label": "struct CoordinatorBase.Config",
        "members": [
          {
            "astId": 925,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "maxGasLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 927,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "reentrancyLock",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 929,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "gasAfterPaymentCalculation",
            "offset": 5,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FeeConfig)7458_storage": {
        "encoding": "inplace",
        "label": "struct ICoordinatorBase.FeeConfig",
        "members": [
          {
            "astId": 7441,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier1",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7443,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier2",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7445,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier3",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7447,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier4",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7449,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier5",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7451,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "reqsForTier2",
            "offset": 20,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7453,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "reqsForTier3",
            "offset": 23,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7455,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "reqsForTier4",
            "offset": 26,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7457,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "reqsForTier5",
            "offset": 29,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Submission)3996_storage": {
        "encoding": "inplace",
        "label": "struct RequestResponseCoordinator.Submission",
        "members": [
          {
            "astId": 3991,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "oracles",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3995,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "submitted",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}