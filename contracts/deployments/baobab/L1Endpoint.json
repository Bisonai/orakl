{
  "address": "0xc76eA3B33d409DD2716719C5d1DeE0b069f67F73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requestResponseCoordinator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ConsumerValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOracle",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyVRFCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "l2RequestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "callbackGasLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "jobId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "responseUint128",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "responseInt256",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "responseBool",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "responseString",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "responseBytes32",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "responseBytes",
          "type": "bytes"
        }
      ],
      "name": "DataRequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "l2RequestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "callbackGasLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RandomWordFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RandomWordRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract IRequestResponseCoordinator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRY",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "addOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "response",
          "type": "uint128"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "response",
          "type": "int256"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "response",
          "type": "string"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "response",
          "type": "bool"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "response",
          "type": "bytes32"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "removeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "l2RequestId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callbackAddr",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "callbackFunc",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "buf",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "capacity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Buffer.buffer",
              "name": "buf",
              "type": "tuple"
            }
          ],
          "internalType": "struct Orakl.Request",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "requestData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "l2RequestId",
          "type": "uint256"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x21e6702bf622356a7ee6bc36f49365d5fd9bb0818b1f299e4d087b21623803f6",
  "receipt": {
    "to": null,
    "from": "0xa195bE68Bd37EBFfB056279Dc3d236fAa6F23670",
    "contractAddress": "0xc76eA3B33d409DD2716719C5d1DeE0b069f67F73",
    "transactionIndex": 1,
    "gasUsed": "2603857",
    "logsBloom": "0x
    "blockHash": "0x129a5e5eff4565207d71748208cefaca1c6974c317c8beaef65cf4ddbe30e53d",
    "transactionHash": "0x21e6702bf622356a7ee6bc36f49365d5fd9bb0818b1f299e4d087b21623803f6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 139860536,
        "transactionHash": "0x21e6702bf622356a7ee6bc36f49365d5fd9bb0818b1f299e4d087b21623803f6",
        "address": "0xc76eA3B33d409DD2716719C5d1DeE0b069f67F73",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a195be68bd37ebffb056279dc3d236faa6f23670"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x129a5e5eff4565207d71748208cefaca1c6974c317c8beaef65cf4ddbe30e53d"
      }
    ],
    "blockNumber": 139860536,
    "cumulativeGasUsed": "2785894",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAbA141f04F4D0a8a3824f524122FB6423ebE2421",
    "0xDA8c0A00A372503aa6EC80f9b29Cc97C454bE499",
    "0x5fe8a7445bFDB2Cd6d9f1DcfB3B33D8c365FFdB0"
  ],
  "numDeployments": 3,
  "solcInputHash": "cf9c816c65118e46c80ab6e9a9c28e6b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requestResponseCoordinator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ConsumerValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOracle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyVRFCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"l2RequestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"responseUint128\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"responseInt256\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"responseBool\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"responseString\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"responseBytes32\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"responseBytes\",\"type\":\"bytes\"}],\"name\":\"DataRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"l2RequestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RandomWordFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomWordRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract IRequestResponseCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"response\",\"type\":\"uint128\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"response\",\"type\":\"int256\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"response\",\"type\":\"bytes32\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"removeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l2RequestId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct Buffer.buffer\",\"name\":\"buf\",\"type\":\"tuple\"}],\"internalType\":\"struct Orakl.Request\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"requestData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l2RequestId\",\"type\":\"uint256\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/L1Endpoint.sol\":\"L1Endpoint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/v0.1/L1Endpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\nimport \\\"./L1EndpointBase.sol\\\";\\nimport \\\"./L1EndpointRequestResponse.sol\\\";\\nimport \\\"./L1EndpointVRF.sol\\\";\\n\\ncontract L1Endpoint is Ownable, L1EndpointBase, L1EndpointVRF, L1EndpointRequestResponse {\\n    error FailedToDeposit();\\n\\n    event OracleAdded(address oracle);\\n    event OracleRemoved(address oracle);\\n\\n    constructor(\\n        address registryAddress,\\n        address vrfCoordinator,\\n        address requestResponseCoordinator\\n    )\\n        L1EndpointBase(registryAddress)\\n        L1EndpointVRF(vrfCoordinator)\\n        L1EndpointRequestResponse(requestResponseCoordinator)\\n    {}\\n\\n    receive() external payable {}\\n\\n    function addOracle(address oracle) public onlyOwner {\\n        sOracles[oracle] = true;\\n        emit OracleAdded(oracle);\\n    }\\n\\n    function removeOracle(address oracle) public onlyOwner {\\n        delete sOracles[oracle];\\n        emit OracleRemoved(oracle);\\n    }\\n}\\n\",\"keccak256\":\"0xf9c492795a523e9b7ea663e9af4e4def259e99ede54a54506be1c62e069b56cb\",\"license\":\"MIT\"},\"src/v0.1/L1EndpointBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\nabstract contract L1EndpointBase {\\n    IRegistry public REGISTRY;\\n    struct RequestDetail {\\n        uint256 l2RequestId;\\n        address sender;\\n        uint256 callbackGasLimit;\\n    }\\n    mapping(address => bool) sOracles;\\n    mapping(uint256 => RequestDetail) sRequest;\\n\\n    error OnlyOracle();\\n    error InsufficientBalance();\\n    error ConsumerValid();\\n\\n    constructor(address registry) {\\n        REGISTRY = IRegistry(registry);\\n    }\\n\\n    function pay(uint64 accId, address sender, uint256 fee) internal {\\n        if (!sOracles[msg.sender]) {\\n            revert OnlyOracle();\\n        }\\n        //check consumer and balance\\n        bool isValidConsumer = REGISTRY.isValidConsumer(accId, sender);\\n        if (!isValidConsumer) {\\n            revert ConsumerValid();\\n        }\\n        uint256 balance = REGISTRY.getBalance(accId);\\n        REGISTRY.decreaseBalance(accId, fee);\\n        if (balance < fee) {\\n            revert InsufficientBalance();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x668cb8d20513b0753148830867b9d370fe969a51e643f459c62f6d5d53fe4d05\",\"license\":\"MIT\"},\"src/v0.1/L1EndpointRequestResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"./RequestResponseConsumerBase.sol\\\";\\nimport \\\"./L1EndpointBase.sol\\\";\\nimport \\\"./RequestResponseConsumerFulfill.sol\\\";\\n\\nabstract contract L1EndpointRequestResponse is\\n    L1EndpointBase,\\n    RequestResponseConsumerFulfillUint128,\\n    RequestResponseConsumerFulfillInt256,\\n    RequestResponseConsumerFulfillBool,\\n    RequestResponseConsumerFulfillString,\\n    RequestResponseConsumerFulfillBytes32,\\n    RequestResponseConsumerFulfillBytes\\n{\\n    using Orakl for Orakl.Request;\\n\\n    event DataRequested(uint256 requestId, address sender);\\n    event DataRequestFulfilled(\\n        uint256 requestId,\\n        uint256 l2RequestId,\\n        address sender,\\n        uint256 callbackGasLimit,\\n        bytes32 jobId,\\n        uint128 responseUint128,\\n        int256 responseInt256,\\n        bool responseBool,\\n        string responseString,\\n        bytes32 responseBytes32,\\n        bytes responseBytes\\n    );\\n\\n    constructor(\\n        address requestResponseCoordinator\\n    ) RequestResponseConsumerBase(requestResponseCoordinator) {}\\n\\n    function requestData(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address sender,\\n        uint256 l2RequestId,\\n        Orakl.Request memory req\\n    ) public returns (uint256) {\\n        uint64 reqCount = 0;\\n        uint256 fee = COORDINATOR.estimateFee(reqCount, 1, callbackGasLimit);\\n        pay(accId, sender, fee);\\n        uint256 id = COORDINATOR.requestData{value: fee}(\\n            req,\\n            callbackGasLimit,\\n            numSubmission,\\n            address(this)\\n        );\\n        sRequest[id] = RequestDetail(l2RequestId, sender, callbackGasLimit);\\n        emit DataRequested(id, sender);\\n        return id;\\n    }\\n\\n    function fulfillDataRequest(uint256 requestId, uint128 response) internal override {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"uint128\\\"));\\n        RequestDetail memory r = sRequest[requestId];\\n        emit DataRequestFulfilled(\\n            requestId,\\n            r.l2RequestId,\\n            r.sender,\\n            r.callbackGasLimit,\\n            jobId,\\n            response,\\n            0,\\n            false,\\n            \\\"\\\",\\n            \\\"\\\",\\n            \\\"\\\"\\n        );\\n        delete sRequest[requestId];\\n    }\\n\\n    function fulfillDataRequest(uint256 requestId, int256 response) internal override {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"int256\\\"));\\n        RequestDetail memory r = sRequest[requestId];\\n        emit DataRequestFulfilled(\\n            requestId,\\n            r.l2RequestId,\\n            r.sender,\\n            r.callbackGasLimit,\\n            jobId,\\n            0,\\n            response,\\n            false,\\n            \\\"\\\",\\n            \\\"\\\",\\n            \\\"\\\"\\n        );\\n        delete sRequest[requestId];\\n    }\\n\\n    function fulfillDataRequest(uint256 requestId, bool response) internal override {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bool\\\"));\\n        RequestDetail memory r = sRequest[requestId];\\n        emit DataRequestFulfilled(\\n            requestId,\\n            r.l2RequestId,\\n            r.sender,\\n            r.callbackGasLimit,\\n            jobId,\\n            0,\\n            0,\\n            response,\\n            \\\"\\\",\\n            \\\"\\\",\\n            \\\"\\\"\\n        );\\n        delete sRequest[requestId];\\n    }\\n\\n    function fulfillDataRequest(uint256 requestId, string memory response) internal override {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"string\\\"));\\n        RequestDetail memory r = sRequest[requestId];\\n        emit DataRequestFulfilled(\\n            requestId,\\n            r.l2RequestId,\\n            r.sender,\\n            r.callbackGasLimit,\\n            jobId,\\n            0,\\n            0,\\n            false,\\n            response,\\n            \\\"\\\",\\n            \\\"\\\"\\n        );\\n        delete sRequest[requestId];\\n    }\\n\\n    function fulfillDataRequest(uint256 requestId, bytes32 response) internal override {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bytes32\\\"));\\n        RequestDetail memory r = sRequest[requestId];\\n        emit DataRequestFulfilled(\\n            requestId,\\n            r.l2RequestId,\\n            r.sender,\\n            r.callbackGasLimit,\\n            jobId,\\n            0,\\n            0,\\n            false,\\n            \\\"\\\",\\n            response,\\n            \\\"\\\"\\n        );\\n        delete sRequest[requestId];\\n    }\\n\\n    function fulfillDataRequest(uint256 requestId, bytes memory response) internal override {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bytes\\\"));\\n        RequestDetail memory r = sRequest[requestId];\\n        emit DataRequestFulfilled(\\n            requestId,\\n            r.l2RequestId,\\n            r.sender,\\n            r.callbackGasLimit,\\n            jobId,\\n            0,\\n            0,\\n            false,\\n            \\\"\\\",\\n            \\\"\\\",\\n            response\\n        );\\n        delete sRequest[requestId];\\n    }\\n}\\n\",\"keccak256\":\"0xf72b978253ee6b33fec9c249d2421e3ce0fc66c38f6971266ad148b4dd0526e2\",\"license\":\"MIT\"},\"src/v0.1/L1EndpointVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"./L1EndpointBase.sol\\\";\\nimport \\\"./interfaces/IVRFCoordinator.sol\\\";\\n\\nabstract contract L1EndpointVRF is L1EndpointBase {\\n    IVRFCoordinator VRFCOORDINATOR;\\n\\n    error OnlyVRFCoordinatorCanFulfill(address have, address want);\\n    event RandomWordRequested(uint256 requestId, address sender);\\n    event RandomWordFulfilled(\\n        uint256 requestId,\\n        uint256 l2RequestId,\\n        address sender,\\n        uint256 callbackGasLimit,\\n        uint256[] randomWords\\n    );\\n\\n    constructor(address _vrfCoordinator) {\\n        VRFCOORDINATOR = IVRFCoordinator(_vrfCoordinator);\\n    }\\n\\n    function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n        address coordinatorAddress = address(VRFCOORDINATOR);\\n        if (msg.sender != address(coordinatorAddress)) {\\n            revert OnlyVRFCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint32 numWords,\\n        uint64 accId,\\n        address sender,\\n        uint256 l2RequestId\\n    ) public returns (uint256) {\\n        uint64 reqCount = 0;\\n        uint8 numSubmission = 1;\\n        uint256 fee = VRFCOORDINATOR.estimateFee(reqCount, numSubmission, callbackGasLimit);\\n        pay(accId, sender, fee);\\n        uint256 requestId = VRFCOORDINATOR.requestRandomWords{value: fee}(\\n            keyHash,\\n            callbackGasLimit,\\n            numWords,\\n            address(this)\\n        );\\n        sRequest[requestId] = RequestDetail(l2RequestId, sender, callbackGasLimit);\\n        emit RandomWordRequested(requestId, sender);\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal {\\n        emit RandomWordFulfilled(\\n            requestId,\\n            sRequest[requestId].l2RequestId,\\n            sRequest[requestId].sender,\\n            sRequest[requestId].callbackGasLimit,\\n            randomWords\\n        );\\n        delete sRequest[requestId];\\n    }\\n}\\n\",\"keccak256\":\"0x05dccd3b3939dcb00fb7d0787b1165400e9aed3e610f4f52f19e2012065092c7\",\"license\":\"MIT\"},\"src/v0.1/RequestResponseConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/IRequestResponseCoordinator.sol\\\";\\n\\nabstract contract RequestResponseConsumerBase {\\n    using Orakl for Orakl.Request;\\n\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n\\n    mapping(bytes32 => bytes4) private sJobIdToFunctionSelector;\\n    IRequestResponseCoordinator public immutable COORDINATOR;\\n\\n    /**\\n     * @param _requestResponseCoordinator address of RequestResponseCoordinator contract\\n     */\\n    constructor(address _requestResponseCoordinator) {\\n        COORDINATOR = IRequestResponseCoordinator(_requestResponseCoordinator);\\n\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"uint128\\\"))] = COORDINATOR\\n            .fulfillDataRequestUint128\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"int256\\\"))] = COORDINATOR\\n            .fulfillDataRequestInt256\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bool\\\"))] = COORDINATOR\\n            .fulfillDataRequestBool\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"string\\\"))] = COORDINATOR\\n            .fulfillDataRequestString\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes32\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes32\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes\\n            .selector;\\n    }\\n\\n    /**\\n     * @notice Build a request using the Orakl library\\n     * @param jobId the job specification ID that the request is created for\\n     * @return req request in memory\\n     */\\n    function buildRequest(bytes32 jobId) internal view returns (Orakl.Request memory req) {\\n        return req.initialize(jobId, address(COORDINATOR), sJobIdToFunctionSelector[jobId]);\\n    }\\n\\n    modifier verifyRawFulfillment() {\\n        address coordinatorAddress = address(COORDINATOR);\\n        if (msg.sender != coordinatorAddress) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x067ffce4a5c64d0af5f1d0d4de4055d3746a2e1ed960fcee800f67b7fe85b61a\",\"license\":\"MIT\"},\"src/v0.1/RequestResponseConsumerFulfill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./RequestResponseConsumerBase.sol\\\";\\n\\nabstract contract RequestResponseConsumerFulfillUint128 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, uint128 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        uint128 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillInt256 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, int256 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        int256 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBool is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bool response) internal virtual;\\n\\n    function rawFulfillDataRequest(uint256 requestId, bool response) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillString is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, string memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        string memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBytes32 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes32 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes32 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBytes is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\",\"keccak256\":\"0x05d2cb95518c33778101579ab9a90853eebb005a9c64639ee8dd947fa5302edd\",\"license\":\"MIT\"},\"src/v0.1/interfaces/ICoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface ICoordinatorBase {\\n    // Fee configuration that separates fees based on the number of\\n    // requests created per account. This applies only to [regular]\\n    // account.\\n    struct FeeConfig {\\n        // Flat fee charged per fulfillment in millionths of KLAY\\n        // So fee range is [0, 2^32/10^6].\\n        uint32 fulfillmentFlatFeeKlayPPMTier1;\\n        uint32 fulfillmentFlatFeeKlayPPMTier2;\\n        uint32 fulfillmentFlatFeeKlayPPMTier3;\\n        uint32 fulfillmentFlatFeeKlayPPMTier4;\\n        uint32 fulfillmentFlatFeeKlayPPMTier5;\\n        uint24 reqsForTier2;\\n        uint24 reqsForTier3;\\n        uint24 reqsForTier4;\\n        uint24 reqsForTier5;\\n    }\\n\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting\\n     * after completing the gas measurement\\n     * @param feeConfig fee tier configuration\\n     */\\n    function setConfig(\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        FeeConfig memory feeConfig\\n    ) external;\\n\\n    /**\\n     * @notice Check to see if there exists a request commitment\\n     * consumers for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request\\n     * for the account, false otherwise.\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Get request commitment.\\n     * @param requestId id of request\\n     * @return commmitment value that can be used to determine whether\\n     * a request is fulfilled or not. If `requestId` is valid and\\n     * commitment equals to bytes32(0), the request was fulfilled.\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Canceling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n\\n    /**\\n     * @notice Access address for prepayment associated with\\n     * @notice coordinator.\\n     * @return prepayment address\\n     */\\n    function getPrepaymentAddress() external returns (address);\\n\\n    function estimateFee(\\n        uint64 reqCount,\\n        uint8 numSubmission,\\n        uint32 callbackGasLimit\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6de51eefb1bee236f7a8144f87c06b804f11375672f41543926a960b9d50f8b5\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IRegistry {\\n    struct Account {\\n        uint256 accId;\\n        uint256 chainId;\\n        address owner;\\n        address[] consumers;\\n        uint8 consumerCount;\\n        uint256 balance;\\n    }\\n\\n    function deposit(uint256 _accId) external payable;\\n\\n    function decreaseBalance(uint256 _accId, uint256 _amount) external;\\n\\n    function getBalance(uint256 _accId) external view returns (uint256 balance);\\n\\n    function accountInfo(uint256 _accId) external view returns (uint256 balance, address owner);\\n\\n    function getConsumer(uint256 _accId) external view returns (address[] memory consumers);\\n\\n    function getAccount(uint256 _accId) external view returns (Account memory);\\n\\n    function isValidConsumer(uint256 _accId, address _consumer) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1258b1ca872152e7c8a421c1676baad7e47e1d86f8bc3de77289080206dbf568\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IRequestResponseCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IRequestResponseCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IRequestResponseCoordinator is IRequestResponseCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x7d924dc529b73fd5c60f0a4d972a12377f15c17fc331a82aa5218897f173d46a\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IRequestResponseCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/Orakl.sol\\\";\\n\\ninterface IRequestResponseCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint64 accId;\\n        uint8 numSubmission;\\n        uint32 callbackGasLimit;\\n        address sender;\\n        bool isDirectPayment;\\n        bytes32 jobId;\\n    }\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [regular] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param accId - The ID of the account. Must be funded with the\\n     * minimum account balance.\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     @return requestId - A unique * identifier of the request. Can be\\n     used to match a request to a * response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint64 accId,\\n        uint8 numSubmission\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [temporary] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     * @param refundRecipient recipient of an extra $KLAY amount that\\n     * was sent together with service request\\n     * @return requestId - A unique identifier of the request. Can be\\n     * used to match a request to a response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) external payable returns (uint256);\\n\\n    function fulfillDataRequestUint128(\\n        uint256 requestId,\\n        uint128 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestInt256(\\n        uint256 requestId,\\n        int256 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBool(\\n        uint256 requestId,\\n        bool response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestString(\\n        uint256 requestId,\\n        string memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes32(\\n        uint256 requestId,\\n        bytes32 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    /**\\n     * @notice Different jobs specified by jobId have allowed\\n     * different number of of requests for submissions that depends on\\n     * total number of registered oracles.\\n     */\\n    function validateNumSubmission(bytes32 jobId, uint8 numSubmission) external;\\n}\\n\",\"keccak256\":\"0xfa11f2677b8f2ea43e09077e1c18c22c4430c7630604a3ad4213955710b72a03\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IVRFCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IVRFCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IVRFCoordinator is IVRFCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x6b0474d5d4482ff306990782da936d88f2ed1d251f9105c2f3f988699a4d42f5\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IVRFCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IVRFCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint256 blockNum;\\n        uint64 accId;\\n        uint32 callbackGasLimit;\\n        uint32 numWords;\\n        address sender;\\n    }\\n\\n    /**\\n     * @notice Get configuration relevant for making requests\\n     * @return maxGasLimit global max for request gas limit\\n     * @return sKeyHashes list of registered key hashes\\n     */\\n    function getRequestConfig() external view returns (uint32, bytes32[] memory);\\n\\n    /**\\n     * @notice Request a set of random words using a [regular] account.\\n     * @param keyHash - Corresponds to a particular oracle job which uses\\n     * that key for generating the VRF proof. Different keyHash's have different gas price\\n     * ceilings, so you can select a specific one to bound your maximum per request cost.\\n     * @param accId - The ID of the account. Must be funded\\n     * with the minimum account balance required for the selected keyHash.\\n     * @param callbackGasLimit - How much gas you'd like to receive in your\\n     * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n     * may be slightly less than this amount because of gas used calling the function\\n     * (argument decoding etc.), so you may need to request slightly more than you expect\\n     * to have inside fulfillRandomWords. The acceptable range is\\n     * [0, maxGasLimit]\\n     * @param numWords - The number of uint256 random values you'd like to receive\\n     * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n     * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n     * @return requestId - A unique identifier of the request. Can be used to match\\n     * a request to a response in fulfillRandomWords.\\n     */\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external returns (uint256 requestId);\\n\\n    /**\\n     * @notice Request a set of random words using a [temporary] account.\\n     * @param keyHash - Corresponds to a particular oracle job which uses\\n     * that key for generating the VRF proof. Different keyHash's have different gas price\\n     * ceilings, so you can select a specific one to bound your maximum per request cost.\\n     * @param callbackGasLimit - How much gas you'd like to receive in your\\n     * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n     * may be slightly less than this amount because of gas used calling the function\\n     * (argument decoding etc.), so you may need to request slightly more than you expect\\n     * to have inside fulfillRandomWords. The acceptable range is\\n     * [0, maxGasLimit]\\n     * @param numWords - The number of uint256 random values you'd like to receive\\n     * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n     * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n     * @param refundRecipient recipient of an extra $KLAY amount that\\n     * was sent together with service request\\n     * @return requestId - A unique identifier of the request. Can be used to match\\n     * a request to a response in fulfillRandomWords.\\n     */\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint32 numWords,\\n        address refundRecipient\\n    ) external payable returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x0d8bd0618a35c5cb1424df6f2abbb19c820560a829f5c80997cd7b9e086cbbc1\",\"license\":\"MIT\"},\"src/v0.1/libraries/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint256 capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Initializes a new buffer from an existing bytes object.\\n     *      Changes to the buffer may mutate the original value.\\n     * @param b The bytes object to initialize the buffer with.\\n     * @return A new buffer.\\n     */\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Sets buffer length to 0.\\n     * @param buf The buffer to truncate.\\n     * @return The original buffer, for chaining..\\n     */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint256 dest;\\n        uint256 src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(\\n        buffer memory buf,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write the byte at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeUint8(\\n        buffer memory buf,\\n        uint256 off,\\n        uint8 data\\n    ) internal pure returns (buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (left-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes32 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint256 mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeBytes20(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes20 data\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chhaining.\\n     */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeInt(\\n        buffer memory buf,\\n        uint256 off,\\n        uint256 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint256 mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(\\n        buffer memory buf,\\n        uint256 data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0x974280a1114bec25110c9c608e1c6c4dd7666c00e30f831f68b6d8a5b3bde420\",\"license\":\"MIT\"},\"src/v0.1/libraries/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/CBORChainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\n\\n// Encoding library for Binary Object Representation\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    // DECLARE TYPES FOR EASIER REFERENCE OF VARIABLE TYPE\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeFixedNumeric(Buffer.buffer memory buf, uint8 major, uint64 value) private pure {\\n        if (value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\\n        if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        }\\n    }\\n\\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\\n        if (value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, uint(value));\\n        } else if (value >= 0) {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(Buffer.buffer memory buf, uint value) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        encodeBytes(buf, abi.encode(value));\\n    }\\n\\n    function encodeSignedBigNum(Buffer.buffer memory buf, int input) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n        encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n    }\\n\\n    function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\",\"keccak256\":\"0x0712ea9c6408a41611eaa5ca843880d7d39c21cfe1dc3efea034bcedf244eae5\",\"license\":\"MIT\"},\"src/v0.1/libraries/Orakl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Chainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\nimport {CBOR} from \\\"./CBOR.sol\\\";\\n\\nlibrary Orakl {\\n    uint256 internal constant defaultBufferSize = 256;\\n\\n    using CBOR for Buffer.buffer;\\n\\n    // structure for storing requests done off-chain\\n    struct Request {\\n        bytes32 id;\\n        address callbackAddr;\\n        bytes4 callbackFunc;\\n        uint256 nonce;\\n        Buffer.buffer buf;\\n    }\\n\\n    /**\\n     * @notice Initializes a request\\n     * @dev Sets ID, callback address, and callback function\\n     * @param self The uninitialized request\\n     * @param jobId The Job Specification ID\\n     * @param callbackAddr The callback address\\n     * @param callbackFunc The callback function signature\\n     * @return The initialized request\\n     */\\n    function initialize(\\n        Request memory self,\\n        bytes32 jobId,\\n        address callbackAddr,\\n        bytes4 callbackFunc\\n    ) internal pure returns (Orakl.Request memory) {\\n        Buffer.init(self.buf, defaultBufferSize);\\n        self.id = jobId;\\n        self.callbackAddr = callbackAddr;\\n        self.callbackFunc = callbackFunc;\\n        return self;\\n    }\\n\\n    /**\\n     * @notice sets the data for buffer\\n     * @param _request the initialized request\\n     * @param _data the CBOR data\\n     */\\n    function setBuffer(Request memory _request, bytes memory _data) internal pure {\\n        Buffer.init(_request.buf, _data.length);\\n        Buffer.append(_request.buf, _data);\\n    }\\n\\n    /**\\n     * @notice Adds a string value to the request in a key - value pair format\\n     * @param self - the initalized request\\n     * @param key - the name of the key\\n     * @param value - the string value to add\\n     */\\n    function add(Request memory self, string memory key, string memory value) internal pure {\\n        self.buf.encodeString(key);\\n        self.buf.encodeString(value);\\n    }\\n\\n    /**\\n     * @notice Adds a byte value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the bytes value to add\\n     */\\n    function addBytes(\\n        Request memory _request,\\n        string memory _key,\\n        bytes memory _value\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeBytes(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a Int256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the int256 value to add\\n     */\\n    function addInt(Request memory _request, string memory _key, int256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a UInt256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the uint256 value to add\\n     */\\n    function addUInt(Request memory _request, string memory _key, uint256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeUInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds an array of string value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _values - the array of string value to add\\n     */\\n    function addStringArray(\\n        Request memory _request,\\n        string memory _key,\\n        string[] memory _values\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.startArray();\\n        for (uint256 i; i < _values.length; i++) {\\n            _request.buf.encodeString(_values[i]);\\n        }\\n        _request.buf.endSequence();\\n    }\\n}\\n\",\"keccak256\":\"0xd03570ddd458085535e258f75d684f76b2adbac7fccb718d11977562d4f3101a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200206b3803806200206b83398101604081905262000034916200025f565b808083856200004333620001f2565b600180546001600160a01b03199081166001600160a01b0393841617909155600480549091169282169290921790915516608052505060408051660ead2dce86264760cb1b6020808301919091528251808303600701815260278301845280519082012060009081526005808352848220805463ffffffff1990811663a185c35f179091556534b73a191a9b60d11b60478601528551808603602d018152604d8601875280519085012083528184528583208054821663d1bf555c17905563189bdbdb60e21b606d86015285518086036051018152607186018752805190850120835281845285832080548216637961841717905565737472696e6760d01b60918601528551808603607701815260978601875280519085012083528184528583208054821663f30be55117905566313cba32b9999960c91b60b78601528551808603609e01815260be8601875280519085012083528184528583208054821663bf8542a917905564627974657360d81b60de860152855180860360c301815260e39095018652845194840194909420825290915291909120805490911663c6f3401317905550620002a99050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200025a57600080fd5b919050565b6000806000606084860312156200027557600080fd5b620002808462000242565b9250620002906020850162000242565b9150620002a06040850162000242565b90509250925092565b608051611d6e620002fd6000396000818161019401528181610339015281816104080152818161046d015281816104e601528181610579015281816105ff0152818161075e0152610acf0152611d6e6000f3fe6080604052600436106100f75760003560e01c80638d6e7b9a1161008a578063edf0453011610059578063edf04530146102b7578063f2fde38b146102d7578063f40b4def146102f7578063fdc85fc41461031757600080fd5b80638d6e7b9a1461022b5780638da5cb5b1461025957806390d95efc14610277578063df5dd1a51461029757600080fd5b806345b9b6fb116100c657806345b9b6fb146101b65780636e2acda0146101d6578063715018a6146101f657806379b150081461020b57600080fd5b806306433b1b1461010357806319e2cd2f146101405780631fe543e3146101625780633b2bcbf11461018257600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b50600154610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014c57600080fd5b5061016061015b366004611674565b610337565b005b34801561016e57600080fd5b5061016061017d3660046116bb565b6103a6565b34801561018e57600080fd5b506101237f000000000000000000000000000000000000000000000000000000000000000081565b3480156101c257600080fd5b506101606101d136600461176d565b610406565b3480156101e257600080fd5b506101606101f13660046117b2565b61046b565b34801561020257600080fd5b506101606104d0565b34801561021757600080fd5b506101606102263660046117d4565b6104e4565b34801561023757600080fd5b5061024b61024636600461186d565b610549565b604051908152602001610137565b34801561026557600080fd5b506000546001600160a01b0316610123565b34801561028357600080fd5b506101606102923660046119d4565b61075c565b3480156102a357600080fd5b506101606102b23660046119f9565b6107c1565b3480156102c357600080fd5b5061024b6102d2366004611a14565b610823565b3480156102e357600080fd5b506101606102f23660046119f9565b610a3d565b34801561030357600080fd5b506101606103123660046117b2565b610acd565b34801561032357600080fd5b506101606103323660046119f9565b610b32565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146103975760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044015b60405180910390fd5b6103a18383610b8b565b505050565b6004546001600160a01b03163381146103fc576040517fd443d1570000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038216602482015260440161038e565b6103a18383610c89565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146104615760405163073e64fd60e21b81523360048201526001600160a01b038216602482015260440161038e565b6103a18383610d24565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146104c65760405163073e64fd60e21b81523360048201526001600160a01b038216602482015260440161038e565b6103a18383610e40565b6104d8610f4b565b6104e26000610fa5565b565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b0382161461053f5760405163073e64fd60e21b81523360048201526001600160a01b038216602482015260440161038e565b6103a18383611002565b604051639ad6c34760e01b81526000600482018190526001602483015263ffffffff8716604483015290819081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639ad6c347906064016020604051808303816000875af11580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee9190611a7a565b90506105fb8987836110bf565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a4dfe92f83878c8c306040518663ffffffff1660e01b81526004016106509493929190611ad9565b60206040518083038185885af115801561066e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106939190611a7a565b604080516060810182528881526001600160a01b03808b16602080840191825263ffffffff8f1684860190815260008781526003909252908590209351845590516001840180549190931673ffffffffffffffffffffffffffffffffffffffff199091161790915551600290910155519091507ffb91bd2bbda2cef82c8804cef420f09829cea3ff324eccead8fe34103de64b02906107479083908a909182526001600160a01b0316602082015260400190565b60405180910390a19998505050505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146107b75760405163073e64fd60e21b81523360048201526001600160a01b038216602482015260440161038e565b6103a18383611332565b6107c9610f4b565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527e47706786c922d17b39285dc59d696bafea72c0b003d3841ae1202076f4c2e491015b60405180910390a150565b60048054604051639ad6c34760e01b8152600092810183905260016024820181905263ffffffff891660448301528392909183916001600160a01b031690639ad6c347906064016020604051808303816000875af1158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611a7a565b90506108ba8787836110bf565b600480546040517f0f52ffc60000000000000000000000000000000000000000000000000000000081529182018c905263ffffffff808c1660248401528a1660448301523060648301526000916001600160a01b0390911690630f52ffc690849060840160206040518083038185885af115801561093c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109619190611a7a565b90506040518060600160405280878152602001886001600160a01b031681526020018b63ffffffff16815250600360008381526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201559050507f4a08eb62ab4e0211a35c0ef1702475c22c43065ee5b5160c8c0393265c16c7d38188604051610a279291909182526001600160a01b0316602082015260400190565b60405180910390a19a9950505050505050505050565b610a45610f4b565b6001600160a01b038116610ac15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161038e565b610aca81610fa5565b50565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610b285760405163073e64fd60e21b81523360048201526001600160a01b038216602482015260440161038e565b6103a1838361143e565b610b3a610f4b565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527f9c8e7d83025bef8a04c664b2f753f64b8814bdb7e27291d7e50935f18cc3c7129101610818565b6040517f6279746573000000000000000000000000000000000000000000000000000000602082015260009060250160408051601f198184030181528282528051602091820120600087815260038352838120606086018552805480875260018201546001600160a01b031694870185905260029091015486860181905294519296507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb094610c48948a9492939092899190819081908d90611b96565b60405180910390a1505050600090815260036020526040812081815560018101805473ffffffffffffffffffffffffffffffffffffffff1916905560020155565b600082815260036020526040908190208054600182015460029092015492517fe67b08545206221512d5d4fd5a7d194949e03dd7e28b7f384de9da76b86999cb93610ce5938793926001600160a01b0390911691908790611c21565b60405180910390a150600090815260036020526040812081815560018101805473ffffffffffffffffffffffffffffffffffffffff1916905560020155565b6040517f75696e7431323800000000000000000000000000000000000000000000000000602082015260009060270160408051808303601f19018152828252805160209182012060008781526003835283812060608087018652815480885260018301546001600160a01b031686890181905260029093015488880181905287518c81529687019190915295850191909152830193909352608082018190526fffffffffffffffffffffffffffffffff861660a083015260c0820183905260e0820183905261016061010083018190528201839052610120820183905261018061014083018190528201929092529092507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb0906101a001610c48565b6040517f696e743235360000000000000000000000000000000000000000000000000000602082015260009060260160408051808303601f19018152828252805160209182012060008781526003835283812060608087018652815480885260018301546001600160a01b031686890181905260029093015488880181905287518c815296870191909152958501919091528301939093526080820181905260a0820183905260c0820186905260e0820183905261016061010083018190528201839052610120820183905261018061014083018190528201929092529092507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb0906101a001610c48565b6000546001600160a01b031633146104e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038e565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040517f737472696e670000000000000000000000000000000000000000000000000000602082015260009060260160408051601f198184030181528282528051602091820120600087815260038352838120606086018552805480875260018201546001600160a01b031694870185905260029091015486860181905294519296507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb094610c48948a9492939092899190819081908d90611c8d565b3360009081526002602052604090205460ff16611108576040517f80fee10500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517fef887f0100000000000000000000000000000000000000000000000000000000815267ffffffffffffffff851660048201526001600160a01b038481166024830152600092169063ef887f0190604401602060405180830381865afa15801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a09190611d1b565b9050806111d9576040517f2c34ebbf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517f1e01043900000000000000000000000000000000000000000000000000000000815267ffffffffffffffff861660048201526000916001600160a01b031690631e01043990602401602060405180830381865afa158015611245573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112699190611a7a565b6001546040517f885aad9b00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff88166004820152602481018690529192506001600160a01b03169063885aad9b90604401600060405180830381600087803b1580156112d957600080fd5b505af11580156112ed573d6000803e3d6000fd5b505050508281101561132b576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6040517f626f6f6c00000000000000000000000000000000000000000000000000000000602082015260009060240160408051808303601f19018152828252805160209182012060008781526003835283812060608087018652815480885260018301546001600160a01b031686890181905260029093015488880181905287518c815296870191909152958501919091528301939093526080820181905260a0820183905260c0820183905285151560e083015261016061010083018190528201839052610120820183905261018061014083018190528201929092529092507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb0906101a001610c48565b6040517f6279746573333200000000000000000000000000000000000000000000000000602082015260009060270160408051808303601f19018152828252805160209182012060008781526003835283812060608087018652815480885260018301546001600160a01b031686890181905260029093015488880181905287518c815296870191909152958501919091528301939093526080820181905260a0820183905260c0820183905260e0820183905261016061010083018190528201839052610120820186905261018061014083018190528201929092529092507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb0906101a001610c48565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561159b5761159b611549565b60405290565b6040805190810167ffffffffffffffff8111828210171561159b5761159b611549565b604051601f8201601f1916810167ffffffffffffffff811182821017156115ed576115ed611549565b604052919050565b600067ffffffffffffffff83111561160f5761160f611549565b611622601f8401601f19166020016115c4565b905082815283838301111561163657600080fd5b828260208301376000602084830101529392505050565b600082601f83011261165e57600080fd5b61166d838335602085016115f5565b9392505050565b6000806040838503121561168757600080fd5b82359150602083013567ffffffffffffffff8111156116a557600080fd5b6116b18582860161164d565b9150509250929050565b600080604083850312156116ce57600080fd5b8235915060208084013567ffffffffffffffff808211156116ee57600080fd5b818601915086601f83011261170257600080fd5b81358181111561171457611714611549565b8060051b91506117258483016115c4565b818152918301840191848101908984111561173f57600080fd5b938501935b8385101561175d57843582529385019390850190611744565b8096505050505050509250929050565b6000806040838503121561178057600080fd5b8235915060208301356fffffffffffffffffffffffffffffffff811681146117a757600080fd5b809150509250929050565b600080604083850312156117c557600080fd5b50508035926020909101359150565b600080604083850312156117e757600080fd5b82359150602083013567ffffffffffffffff81111561180557600080fd5b8301601f8101851361181657600080fd5b6116b1858235602084016115f5565b803567ffffffffffffffff8116811461183d57600080fd5b919050565b803563ffffffff8116811461183d57600080fd5b80356001600160a01b038116811461183d57600080fd5b60008060008060008060c0878903121561188657600080fd5b61188f87611825565b955061189d60208801611842565b9450604087013560ff811681146118b357600080fd5b93506118c160608801611856565b92506080870135915060a087013567ffffffffffffffff808211156118e557600080fd5b9088019060a0828b0312156118f957600080fd5b611901611578565b8235815261191160208401611856565b602082015260408301357fffffffff000000000000000000000000000000000000000000000000000000008116811461194957600080fd5b60408201526060838101359082015260808301358281111561196a57600080fd5b92909201916040838c03121561197f57600080fd5b6119876115a1565b83358381111561199657600080fd5b6119a28d82870161164d565b82525060208401356020820152806080830152508093505050509295509295509295565b8015158114610aca57600080fd5b600080604083850312156119e757600080fd5b8235915060208301356117a7816119c6565b600060208284031215611a0b57600080fd5b61166d82611856565b60008060008060008060c08789031215611a2d57600080fd5b86359550611a3d60208801611842565b9450611a4b60408801611842565b9350611a5960608801611825565b9250611a6760808801611856565b915060a087013590509295509295509295565b600060208284031215611a8c57600080fd5b5051919050565b6000815180845260005b81811015611ab957602081850181015186830182015201611a9d565b506000602082860101526020601f19601f83011685010191505092915050565b60808152845160808201526001600160a01b0360208601511660a08201527fffffffff0000000000000000000000000000000000000000000000000000000060408601511660c0820152606085015160e08201526000608086015160a061010084015280516040610120850152611b54610160850182611a93565b6020928301516101408601529250611b7591840190508663ffffffff169052565b60ff841660408301526001600160a01b038316606083015295945050505050565b60006101608b83528a60208401526001600160a01b038a1660408401528860608401528760808401526fffffffffffffffffffffffffffffffff871660a08401528560c084015284151560e08401528061010084015260008184015250610180600061012084015280610140840152611c1181840185611a93565b9c9b505050505050505050505050565b600060a08201878352602087818501526001600160a01b038716604085015285606085015260a0608085015281855180845260c086019150828701935060005b81811015611c7d57845183529383019391830191600101611c61565b50909a9950505050505050505050565b60006101608b83528a60208401526001600160a01b038a1660408401528860608401528760808401526fffffffffffffffffffffffffffffffff871660a08401528560c084015284151560e084015280610100840152611cef81840185611a93565b9050600061012084015282810361014084015260008152602081019150509a9950505050505050505050565b600060208284031215611d2d57600080fd5b815161166d816119c656fea264697066735822122078bbdb7904a01b650018b50b708586eb975adc7def056be268e74194c6346d2e64736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c80638d6e7b9a1161008a578063edf0453011610059578063edf04530146102b7578063f2fde38b146102d7578063f40b4def146102f7578063fdc85fc41461031757600080fd5b80638d6e7b9a1461022b5780638da5cb5b1461025957806390d95efc14610277578063df5dd1a51461029757600080fd5b806345b9b6fb116100c657806345b9b6fb146101b65780636e2acda0146101d6578063715018a6146101f657806379b150081461020b57600080fd5b806306433b1b1461010357806319e2cd2f146101405780631fe543e3146101625780633b2bcbf11461018257600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b50600154610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014c57600080fd5b5061016061015b366004611674565b610337565b005b34801561016e57600080fd5b5061016061017d3660046116bb565b6103a6565b34801561018e57600080fd5b506101237f000000000000000000000000000000000000000000000000000000000000000081565b3480156101c257600080fd5b506101606101d136600461176d565b610406565b3480156101e257600080fd5b506101606101f13660046117b2565b61046b565b34801561020257600080fd5b506101606104d0565b34801561021757600080fd5b506101606102263660046117d4565b6104e4565b34801561023757600080fd5b5061024b61024636600461186d565b610549565b604051908152602001610137565b34801561026557600080fd5b506000546001600160a01b0316610123565b34801561028357600080fd5b506101606102923660046119d4565b61075c565b3480156102a357600080fd5b506101606102b23660046119f9565b6107c1565b3480156102c357600080fd5b5061024b6102d2366004611a14565b610823565b3480156102e357600080fd5b506101606102f23660046119f9565b610a3d565b34801561030357600080fd5b506101606103123660046117b2565b610acd565b34801561032357600080fd5b506101606103323660046119f9565b610b32565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146103975760405163073e64fd60e21b81523360048201526001600160a01b03821660248201526044015b60405180910390fd5b6103a18383610b8b565b505050565b6004546001600160a01b03163381146103fc576040517fd443d1570000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038216602482015260440161038e565b6103a18383610c89565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146104615760405163073e64fd60e21b81523360048201526001600160a01b038216602482015260440161038e565b6103a18383610d24565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146104c65760405163073e64fd60e21b81523360048201526001600160a01b038216602482015260440161038e565b6103a18383610e40565b6104d8610f4b565b6104e26000610fa5565b565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b0382161461053f5760405163073e64fd60e21b81523360048201526001600160a01b038216602482015260440161038e565b6103a18383611002565b604051639ad6c34760e01b81526000600482018190526001602483015263ffffffff8716604483015290819081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639ad6c347906064016020604051808303816000875af11580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee9190611a7a565b90506105fb8987836110bf565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a4dfe92f83878c8c306040518663ffffffff1660e01b81526004016106509493929190611ad9565b60206040518083038185885af115801561066e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106939190611a7a565b604080516060810182528881526001600160a01b03808b16602080840191825263ffffffff8f1684860190815260008781526003909252908590209351845590516001840180549190931673ffffffffffffffffffffffffffffffffffffffff199091161790915551600290910155519091507ffb91bd2bbda2cef82c8804cef420f09829cea3ff324eccead8fe34103de64b02906107479083908a909182526001600160a01b0316602082015260400190565b60405180910390a19998505050505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146107b75760405163073e64fd60e21b81523360048201526001600160a01b038216602482015260440161038e565b6103a18383611332565b6107c9610f4b565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527e47706786c922d17b39285dc59d696bafea72c0b003d3841ae1202076f4c2e491015b60405180910390a150565b60048054604051639ad6c34760e01b8152600092810183905260016024820181905263ffffffff891660448301528392909183916001600160a01b031690639ad6c347906064016020604051808303816000875af1158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611a7a565b90506108ba8787836110bf565b600480546040517f0f52ffc60000000000000000000000000000000000000000000000000000000081529182018c905263ffffffff808c1660248401528a1660448301523060648301526000916001600160a01b0390911690630f52ffc690849060840160206040518083038185885af115801561093c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109619190611a7a565b90506040518060600160405280878152602001886001600160a01b031681526020018b63ffffffff16815250600360008381526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201559050507f4a08eb62ab4e0211a35c0ef1702475c22c43065ee5b5160c8c0393265c16c7d38188604051610a279291909182526001600160a01b0316602082015260400190565b60405180910390a19a9950505050505050505050565b610a45610f4b565b6001600160a01b038116610ac15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161038e565b610aca81610fa5565b50565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610b285760405163073e64fd60e21b81523360048201526001600160a01b038216602482015260440161038e565b6103a1838361143e565b610b3a610f4b565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527f9c8e7d83025bef8a04c664b2f753f64b8814bdb7e27291d7e50935f18cc3c7129101610818565b6040517f6279746573000000000000000000000000000000000000000000000000000000602082015260009060250160408051601f198184030181528282528051602091820120600087815260038352838120606086018552805480875260018201546001600160a01b031694870185905260029091015486860181905294519296507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb094610c48948a9492939092899190819081908d90611b96565b60405180910390a1505050600090815260036020526040812081815560018101805473ffffffffffffffffffffffffffffffffffffffff1916905560020155565b600082815260036020526040908190208054600182015460029092015492517fe67b08545206221512d5d4fd5a7d194949e03dd7e28b7f384de9da76b86999cb93610ce5938793926001600160a01b0390911691908790611c21565b60405180910390a150600090815260036020526040812081815560018101805473ffffffffffffffffffffffffffffffffffffffff1916905560020155565b6040517f75696e7431323800000000000000000000000000000000000000000000000000602082015260009060270160408051808303601f19018152828252805160209182012060008781526003835283812060608087018652815480885260018301546001600160a01b031686890181905260029093015488880181905287518c81529687019190915295850191909152830193909352608082018190526fffffffffffffffffffffffffffffffff861660a083015260c0820183905260e0820183905261016061010083018190528201839052610120820183905261018061014083018190528201929092529092507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb0906101a001610c48565b6040517f696e743235360000000000000000000000000000000000000000000000000000602082015260009060260160408051808303601f19018152828252805160209182012060008781526003835283812060608087018652815480885260018301546001600160a01b031686890181905260029093015488880181905287518c815296870191909152958501919091528301939093526080820181905260a0820183905260c0820186905260e0820183905261016061010083018190528201839052610120820183905261018061014083018190528201929092529092507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb0906101a001610c48565b6000546001600160a01b031633146104e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038e565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040517f737472696e670000000000000000000000000000000000000000000000000000602082015260009060260160408051601f198184030181528282528051602091820120600087815260038352838120606086018552805480875260018201546001600160a01b031694870185905260029091015486860181905294519296507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb094610c48948a9492939092899190819081908d90611c8d565b3360009081526002602052604090205460ff16611108576040517f80fee10500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517fef887f0100000000000000000000000000000000000000000000000000000000815267ffffffffffffffff851660048201526001600160a01b038481166024830152600092169063ef887f0190604401602060405180830381865afa15801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a09190611d1b565b9050806111d9576040517f2c34ebbf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517f1e01043900000000000000000000000000000000000000000000000000000000815267ffffffffffffffff861660048201526000916001600160a01b031690631e01043990602401602060405180830381865afa158015611245573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112699190611a7a565b6001546040517f885aad9b00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff88166004820152602481018690529192506001600160a01b03169063885aad9b90604401600060405180830381600087803b1580156112d957600080fd5b505af11580156112ed573d6000803e3d6000fd5b505050508281101561132b576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6040517f626f6f6c00000000000000000000000000000000000000000000000000000000602082015260009060240160408051808303601f19018152828252805160209182012060008781526003835283812060608087018652815480885260018301546001600160a01b031686890181905260029093015488880181905287518c815296870191909152958501919091528301939093526080820181905260a0820183905260c0820183905285151560e083015261016061010083018190528201839052610120820183905261018061014083018190528201929092529092507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb0906101a001610c48565b6040517f6279746573333200000000000000000000000000000000000000000000000000602082015260009060270160408051808303601f19018152828252805160209182012060008781526003835283812060608087018652815480885260018301546001600160a01b031686890181905260029093015488880181905287518c815296870191909152958501919091528301939093526080820181905260a0820183905260c0820183905260e0820183905261016061010083018190528201839052610120820186905261018061014083018190528201929092529092507f902f1c64154fa196e32d7875f628db604f6199262df91d9d5f3e4cda4d255eb0906101a001610c48565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561159b5761159b611549565b60405290565b6040805190810167ffffffffffffffff8111828210171561159b5761159b611549565b604051601f8201601f1916810167ffffffffffffffff811182821017156115ed576115ed611549565b604052919050565b600067ffffffffffffffff83111561160f5761160f611549565b611622601f8401601f19166020016115c4565b905082815283838301111561163657600080fd5b828260208301376000602084830101529392505050565b600082601f83011261165e57600080fd5b61166d838335602085016115f5565b9392505050565b6000806040838503121561168757600080fd5b82359150602083013567ffffffffffffffff8111156116a557600080fd5b6116b18582860161164d565b9150509250929050565b600080604083850312156116ce57600080fd5b8235915060208084013567ffffffffffffffff808211156116ee57600080fd5b818601915086601f83011261170257600080fd5b81358181111561171457611714611549565b8060051b91506117258483016115c4565b818152918301840191848101908984111561173f57600080fd5b938501935b8385101561175d57843582529385019390850190611744565b8096505050505050509250929050565b6000806040838503121561178057600080fd5b8235915060208301356fffffffffffffffffffffffffffffffff811681146117a757600080fd5b809150509250929050565b600080604083850312156117c557600080fd5b50508035926020909101359150565b600080604083850312156117e757600080fd5b82359150602083013567ffffffffffffffff81111561180557600080fd5b8301601f8101851361181657600080fd5b6116b1858235602084016115f5565b803567ffffffffffffffff8116811461183d57600080fd5b919050565b803563ffffffff8116811461183d57600080fd5b80356001600160a01b038116811461183d57600080fd5b60008060008060008060c0878903121561188657600080fd5b61188f87611825565b955061189d60208801611842565b9450604087013560ff811681146118b357600080fd5b93506118c160608801611856565b92506080870135915060a087013567ffffffffffffffff808211156118e557600080fd5b9088019060a0828b0312156118f957600080fd5b611901611578565b8235815261191160208401611856565b602082015260408301357fffffffff000000000000000000000000000000000000000000000000000000008116811461194957600080fd5b60408201526060838101359082015260808301358281111561196a57600080fd5b92909201916040838c03121561197f57600080fd5b6119876115a1565b83358381111561199657600080fd5b6119a28d82870161164d565b82525060208401356020820152806080830152508093505050509295509295509295565b8015158114610aca57600080fd5b600080604083850312156119e757600080fd5b8235915060208301356117a7816119c6565b600060208284031215611a0b57600080fd5b61166d82611856565b60008060008060008060c08789031215611a2d57600080fd5b86359550611a3d60208801611842565b9450611a4b60408801611842565b9350611a5960608801611825565b9250611a6760808801611856565b915060a087013590509295509295509295565b600060208284031215611a8c57600080fd5b5051919050565b6000815180845260005b81811015611ab957602081850181015186830182015201611a9d565b506000602082860101526020601f19601f83011685010191505092915050565b60808152845160808201526001600160a01b0360208601511660a08201527fffffffff0000000000000000000000000000000000000000000000000000000060408601511660c0820152606085015160e08201526000608086015160a061010084015280516040610120850152611b54610160850182611a93565b6020928301516101408601529250611b7591840190508663ffffffff169052565b60ff841660408301526001600160a01b038316606083015295945050505050565b60006101608b83528a60208401526001600160a01b038a1660408401528860608401528760808401526fffffffffffffffffffffffffffffffff871660a08401528560c084015284151560e08401528061010084015260008184015250610180600061012084015280610140840152611c1181840185611a93565b9c9b505050505050505050505050565b600060a08201878352602087818501526001600160a01b038716604085015285606085015260a0608085015281855180845260c086019150828701935060005b81811015611c7d57845183529383019391830191600101611c61565b50909a9950505050505050505050565b60006101608b83528a60208401526001600160a01b038a1660408401528860608401528760808401526fffffffffffffffffffffffffffffffff871660a08401528560c084015284151560e084015280610100840152611cef81840185611a93565b9050600061012084015282810361014084015260008152602081019150509a9950505050505050505050565b600060208284031215611d2d57600080fd5b815161166d816119c656fea264697066735822122078bbdb7904a01b650018b50b708586eb975adc7def056be268e74194c6346d2e64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/v0.1/L1Endpoint.sol:L1Endpoint",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3897,
        "contract": "src/v0.1/L1Endpoint.sol:L1Endpoint",
        "label": "REGISTRY",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRegistry)13295"
      },
      {
        "astId": 3908,
        "contract": "src/v0.1/L1Endpoint.sol:L1Endpoint",
        "label": "sOracles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3913,
        "contract": "src/v0.1/L1Endpoint.sol:L1Endpoint",
        "label": "sRequest",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(RequestDetail)3904_storage)"
      },
      {
        "astId": 4413,
        "contract": "src/v0.1/L1Endpoint.sol:L1Endpoint",
        "label": "VRFCOORDINATOR",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IVRFCoordinator)13438"
      },
      {
        "astId": 8897,
        "contract": "src/v0.1/L1Endpoint.sol:L1Endpoint",
        "label": "sJobIdToFunctionSelector",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bytes4)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IRegistry)13295": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IVRFCoordinator)13438": {
        "encoding": "inplace",
        "label": "contract IVRFCoordinator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes4)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes4)",
        "numberOfBytes": "32",
        "value": "t_bytes4"
      },
      "t_mapping(t_uint256,t_struct(RequestDetail)3904_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct L1EndpointBase.RequestDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestDetail)3904_storage"
      },
      "t_struct(RequestDetail)3904_storage": {
        "encoding": "inplace",
        "label": "struct L1EndpointBase.RequestDetail",
        "members": [
          {
            "astId": 3899,
            "contract": "src/v0.1/L1Endpoint.sol:L1Endpoint",
            "label": "l2RequestId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3901,
            "contract": "src/v0.1/L1Endpoint.sol:L1Endpoint",
            "label": "sender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3903,
            "contract": "src/v0.1/L1Endpoint.sol:L1Endpoint",
            "label": "callbackGasLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}