{
  "address": "0xE22e67F7ce4b6FA9E3ABCB6125Fb53Cb577B34Ef",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BurnFeeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CoordinatorExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBurnRatio",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "InvalidConsumer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "MustBeAccountOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "MustBeRequestedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingRequestExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyConsumers",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "AccountBalanceDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "AccountBalanceIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AccountCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "AccountConsumerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "AccountConsumerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "AccountCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "AccountOwnerTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "AccountOwnerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "ratio",
          "type": "uint16"
        }
      ],
      "name": "BurnRatioSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COORDINATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BURN_RATIO",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CONSUMERS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BURN_RATIO",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "acceptAccountOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "addCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "cancelAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "chargeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createAccount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "getAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "reqCount",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "consumers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "getAccountOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "increaseNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "nodeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "pendingRequestExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "removeConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "removeCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "requestAccountOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_BurnRatio",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_coordinators",
      "outputs": [
        {
          "internalType": "contract CoordinatorBaseInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_nodes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "ratio",
          "type": "uint8"
        }
      ],
      "name": "setBurnRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typeAndVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5c440df318a15c885f9afca03d5fa54e2fc16648e6ab2abbebf362975a0648c",
  "receipt": {
    "to": null,
    "from": "0xAe3d14Ed2B8a0B71D05DEF51baBfAeFBcE33054d",
    "contractAddress": "0xE22e67F7ce4b6FA9E3ABCB6125Fb53Cb577B34Ef",
    "transactionIndex": 0,
    "gasUsed": "3860983",
    "logsBloom": "0x
    "blockHash": "0x715cdd09d75feb320f41bfc4ef7410cddacc0149af65089ec5221b0a48b210c6",
    "transactionHash": "0xc5c440df318a15c885f9afca03d5fa54e2fc16648e6ab2abbebf362975a0648c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 114253959,
        "transactionHash": "0xc5c440df318a15c885f9afca03d5fa54e2fc16648e6ab2abbebf362975a0648c",
        "address": "0xE22e67F7ce4b6FA9E3ABCB6125Fb53Cb577B34Ef",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae3d14ed2b8a0b71d05def51babfaefbce33054d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x715cdd09d75feb320f41bfc4ef7410cddacc0149af65089ec5221b0a48b210c6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 114253959,
        "transactionHash": "0xc5c440df318a15c885f9afca03d5fa54e2fc16648e6ab2abbebf362975a0648c",
        "address": "0xE22e67F7ce4b6FA9E3ABCB6125Fb53Cb577B34Ef",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae3d14ed2b8a0b71d05def51babfaefbce33054d",
          "0x000000000000000000000000ae3d14ed2b8a0b71d05def51babfaefbce33054d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x715cdd09d75feb320f41bfc4ef7410cddacc0149af65089ec5221b0a48b210c6"
      }
    ],
    "blockNumber": 114253959,
    "cumulativeGasUsed": "3860983",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fa56e8cc296933aafbed3a3276231c2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BurnFeeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoordinatorExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurnRatio\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MustBeAccountOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"MustBeRequestedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingRequestExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyConsumers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"AccountBalanceDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"AccountBalanceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AccountCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"AccountConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"AccountConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AccountOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AccountOwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"ratio\",\"type\":\"uint16\"}],\"name\":\"BurnRatioSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BURN_RATIO\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONSUMERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BURN_RATIO\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"acceptAccountOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"addCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"chargeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"getAccountOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"increaseNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"nodeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"removeCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestAccountOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_BurnRatio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_coordinators\",\"outputs\":[{\"internalType\":\"contract CoordinatorBaseInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_nodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"ratio\",\"type\":\"uint8\"}],\"name\":\"setBurnRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptAccountOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of accId has not requested that msg.sender become the new owner.\",\"params\":{\"accId\":\"- ID of the account\"}},\"addConsumer(uint64,address)\":{\"params\":{\"accId\":\"- ID of the account\",\"consumer\":\"- New consumer which can use the account\"}},\"cancelAccount(uint64,address)\":{\"params\":{\"accId\":\"- ID of the account\",\"to\":\"- Where to send the remaining KLAY to\"}},\"chargeFee(uint64,uint256,address)\":{\"params\":{\"accId\":\"- ID of the account\",\"amount\":\"- KLAY amount to be charged\"}},\"createAccount()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the account, use deposit function.\",\"returns\":{\"_0\":\"accId - A unique account id.\"}},\"deposit(uint64)\":{\"params\":{\"accId\":\"- ID of the account\"}},\"getAccount(uint64)\":{\"params\":{\"accId\":\"- ID of the account\"},\"returns\":{\"balance\":\"- KLAY balance of the account in juels.\",\"consumers\":\"- list of consumer address which are able to use this account.\",\"owner\":\"- owner of the account.\",\"reqCount\":\"- number of requests for this account, determines fee tier.\"}},\"getAccountOwner(uint64)\":{\"params\":{\"accId\":\"- ID of the account\"}},\"getNonce(address,uint64)\":{\"params\":{\"accId\":\"- ID of the account\",\"consumer\":\"- Address of consumer registered under accId\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getTotalBalance()\":{\"returns\":{\"_0\":\"balance - A unique account id.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseNonce(address,uint64)\":{\"params\":{\"accId\":\"- ID of the account\",\"consumer\":\"- Address of consumer registered under accId\"}},\"nodeWithdraw(uint256)\":{\"params\":{\"amount\":\"- KLAY amount to be withdrawn\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingRequestExists(uint64)\":{\"details\":\"Looping is bounded to MAX_CONSUMERS*(number of keyhashes).Used to disable subscription canceling while outstanding request are present.\"},\"removeConsumer(uint64,address)\":{\"params\":{\"accId\":\"- ID of the account\",\"consumer\":\"- Consumer to remove from the account\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"requestAccountOwnerTransfer(uint64,address)\":{\"params\":{\"accId\":\"- ID of the account\",\"newOwner\":\"- proposed new owner of the account\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"typeAndVersion()\":{\"returns\":{\"_0\":\"Type and version string\"}},\"withdraw(uint64,uint256)\":{\"params\":{\"accId\":\"- ID of the account\",\"amount\":\"- KLAY amount to be withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptAccountOwnerTransfer(uint64)\":{\"notice\":\"Request account owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to an account.\"},\"cancelAccount(uint64,address)\":{\"notice\":\"Cancel account\"},\"chargeFee(uint64,uint256,address)\":{\"notice\":\"Charge fee from service connected to account.\"},\"createAccount()\":{\"notice\":\"Create an account.\"},\"deposit(uint64)\":{\"notice\":\"Deposit KLAY to account.Anybody can deposit KLAY, there are no restrictions.\"},\"getAccount(uint64)\":{\"notice\":\"Get an account.\"},\"getAccountOwner(uint64)\":{\"notice\":\"Get address of account owner.\"},\"getNonce(address,uint64)\":{\"notice\":\"Return nonce value.\"},\"getTotalBalance()\":{\"notice\":\"Return total amount of KLAY held in contract.\"},\"increaseNonce(address,uint64)\":{\"notice\":\"Increase nonce for consumer registered under accId.\"},\"nodeWithdraw(uint256)\":{\"notice\":\"Withdraw funds stored in contract.Can be executed only by WITHDRAWER_ROLE.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a account.\"},\"requestAccountOwnerTransfer(uint64,address)\":{\"notice\":\"Request account owner transfer.\"},\"typeAndVersion()\":{\"notice\":\"The type and version of this contract\"},\"withdraw(uint64,uint256)\":{\"notice\":\"Withdraw KLAY from account.Only account owner can withdraw KLAY.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/Prepayment.sol\":\"Prepayment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"src/v0.1/Prepayment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFCoordinatorV2.sol\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/CoordinatorBaseInterface.sol\\\";\\nimport \\\"./interfaces/PrepaymentInterface.sol\\\";\\nimport \\\"./interfaces/TypeAndVersionInterface.sol\\\";\\n\\ncontract Prepayment is\\n    AccessControlEnumerable,\\n    Ownable,\\n    PrepaymentInterface,\\n    TypeAndVersionInterface\\n{\\n    uint16 public constant MAX_CONSUMERS = 100;\\n    bytes32 public constant COORDINATOR_ROLE = keccak256(\\\"COORDINATOR_ROLE\\\");\\n    uint8 public constant MIN_BURN_RATIO = 0;\\n    uint8 public constant MAX_BURN_RATIO = 100;\\n\\n    uint256 private s_totalBalance;\\n\\n    uint64 private s_currentAccId;\\n    uint8 public s_BurnRatio = 20; //20%\\n\\n    /* consumer */\\n    /* accId */\\n    /* nonce */\\n    mapping(address => mapping(uint64 => uint64)) private s_consumers;\\n\\n    /* accId */\\n    /* AccountConfig */\\n    mapping(uint64 => AccountConfig) private s_accountConfigs;\\n\\n    /* accId */\\n    /* account */\\n    mapping(uint64 => Account) private s_accounts;\\n\\n    mapping(address => uint256) public s_nodes;\\n\\n    struct Account {\\n        // There are only 1e9*1e18 = 1e27 juels in existence, so the balance can fit in uint256 (2^96 ~ 7e28)\\n        uint256 balance; // Common KLAY balance used for all consumer requests.\\n        uint64 reqCount; // For fee tiers\\n    }\\n\\n    struct AccountConfig {\\n        address owner; // Owner can fund/withdraw/cancel the acc.\\n        address requestedOwner; // For safely transferring acc ownership.\\n        // Maintains the list of keys in s_consumers.\\n        // We do this for 2 reasons:\\n        // 1. To be able to clean up all keys from s_consumers when canceling an account.\\n        // 2. To be able to return the list of all consumers in getAccount.\\n        // Note that we need the s_consumers map to be able to directly check if a\\n        // consumer is valid without reading all the consumers from storage.\\n        address[] consumers;\\n    }\\n\\n    CoordinatorBaseInterface[] public s_coordinators;\\n\\n    error TooManyConsumers();\\n    error InsufficientBalance();\\n    error InvalidConsumer(uint64 accId, address consumer);\\n    error InvalidAccount();\\n    error MustBeAccountOwner(address owner);\\n    error PendingRequestExists();\\n    error MustBeRequestedOwner(address proposedOwner);\\n    error ZeroAmount();\\n    error CoordinatorExists();\\n    error InvalidBurnRatio();\\n    error BurnFeeFailed();\\n\\n    event AccountCreated(uint64 indexed accId, address owner);\\n    event AccountCanceled(uint64 indexed accId, address to, uint256 amount);\\n    event AccountBalanceIncreased(uint64 indexed accId, uint256 oldBalance, uint256 newBalance);\\n    event AccountBalanceDecreased(\\n        uint64 indexed accId,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 burnAmount\\n    );\\n    event AccountConsumerAdded(uint64 indexed accId, address consumer);\\n    event AccountConsumerRemoved(uint64 indexed accId, address consumer);\\n    event AccountOwnerTransferRequested(uint64 indexed accId, address from, address to);\\n    event AccountOwnerTransferred(uint64 indexed accId, address from, address to);\\n    event FundsWithdrawn(address to, uint256 amount);\\n    event BurnRatioSet(uint16 ratio);\\n\\n    modifier onlyAccOwner(uint64 accId) {\\n        address owner = s_accountConfigs[accId].owner;\\n        if (owner == address(0)) {\\n            revert InvalidAccount();\\n        }\\n        if (msg.sender != owner) {\\n            revert MustBeAccountOwner(owner);\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    function setBurnRatio(uint8 ratio) public onlyOwner {\\n        if (ratio < MIN_BURN_RATIO || ratio > MAX_BURN_RATIO) {\\n            revert InvalidBurnRatio();\\n        }\\n        s_BurnRatio = ratio;\\n        emit BurnRatioSet(ratio);\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function getTotalBalance() external view returns (uint256) {\\n        return s_totalBalance;\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function getAccount(\\n        uint64 accId\\n    )\\n        external\\n        view\\n        returns (uint256 balance, uint64 reqCount, address owner, address[] memory consumers)\\n    {\\n        if (s_accountConfigs[accId].owner == address(0)) {\\n            revert InvalidAccount();\\n        }\\n        return (\\n            s_accounts[accId].balance,\\n            s_accounts[accId].reqCount,\\n            s_accountConfigs[accId].owner,\\n            s_accountConfigs[accId].consumers\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function createAccount() external returns (uint64) {\\n        s_currentAccId++;\\n        uint64 currentAccId = s_currentAccId;\\n        address[] memory consumers = new address[](0);\\n        s_accounts[currentAccId] = Account({balance: 0, reqCount: 0});\\n        s_accountConfigs[currentAccId] = AccountConfig({\\n            owner: msg.sender,\\n            requestedOwner: address(0),\\n            consumers: consumers\\n        });\\n\\n        emit AccountCreated(currentAccId, msg.sender);\\n        return currentAccId;\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function requestAccountOwnerTransfer(\\n        uint64 accId,\\n        address newOwner\\n    ) external onlyAccOwner(accId) {\\n        // Proposing to address(0) would never be claimable so don't need to check.\\n        if (s_accountConfigs[accId].requestedOwner != newOwner) {\\n            s_accountConfigs[accId].requestedOwner = newOwner;\\n            emit AccountOwnerTransferRequested(accId, msg.sender, newOwner);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function acceptAccountOwnerTransfer(uint64 accId) external {\\n        if (s_accountConfigs[accId].owner == address(0)) {\\n            revert InvalidAccount();\\n        }\\n        if (s_accountConfigs[accId].requestedOwner != msg.sender) {\\n            revert MustBeRequestedOwner(s_accountConfigs[accId].requestedOwner);\\n        }\\n        address oldOwner = s_accountConfigs[accId].owner;\\n        s_accountConfigs[accId].owner = msg.sender;\\n        s_accountConfigs[accId].requestedOwner = address(0);\\n        emit AccountOwnerTransferred(accId, oldOwner, msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function removeConsumer(uint64 accId, address consumer) external onlyAccOwner(accId) {\\n        if (s_consumers[consumer][accId] == 0) {\\n            revert InvalidConsumer(accId, consumer);\\n        }\\n        // Note bounded by MAX_CONSUMERS\\n        address[] memory consumers = s_accountConfigs[accId].consumers;\\n        uint256 lastConsumerIndex = consumers.length - 1;\\n        for (uint256 i = 0; i < consumers.length; i++) {\\n            if (consumers[i] == consumer) {\\n                address last = consumers[lastConsumerIndex];\\n                // Storage write to preserve last element\\n                s_accountConfigs[accId].consumers[i] = last;\\n                // Storage remove last element\\n                s_accountConfigs[accId].consumers.pop();\\n                break;\\n            }\\n        }\\n        delete s_consumers[consumer][accId];\\n        emit AccountConsumerRemoved(accId, consumer);\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function addConsumer(uint64 accId, address consumer) external onlyAccOwner(accId) {\\n        // Already maxed, cannot add any more consumers.\\n        if (s_accountConfigs[accId].consumers.length >= MAX_CONSUMERS) {\\n            revert TooManyConsumers();\\n        }\\n        if (s_consumers[consumer][accId] != 0) {\\n            // Idempotence - do nothing if already added.\\n            // Ensures uniqueness in s_accounts[accId].consumers.\\n            return;\\n        }\\n        // Initialize the nonce to 1, indicating the consumer is allocated.\\n        s_consumers[consumer][accId] = 1;\\n        s_accountConfigs[accId].consumers.push(consumer);\\n\\n        emit AccountConsumerAdded(accId, consumer);\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function cancelAccount(uint64 accId, address to) external onlyAccOwner(accId) {\\n        if (pendingRequestExists(accId)) {\\n            revert PendingRequestExists();\\n        }\\n        cancelAccountHelper(accId, to);\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function deposit(uint64 accId) external payable {\\n        uint256 amount = msg.value;\\n        uint256 oldBalance = s_accounts[accId].balance;\\n        s_accounts[accId].balance += amount;\\n        s_totalBalance += amount;\\n        emit AccountBalanceIncreased(accId, oldBalance, oldBalance + amount);\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function withdraw(uint64 accId, uint256 amount) external onlyAccOwner(accId) {\\n        if (pendingRequestExists(accId)) {\\n            revert PendingRequestExists();\\n        }\\n\\n        uint256 oldBalance = s_accounts[accId].balance;\\n        if ((oldBalance < amount) || (address(this).balance < amount)) {\\n            revert InsufficientBalance();\\n        }\\n\\n        s_accounts[accId].balance -= amount;\\n\\n        (bool sent, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        if (!sent) {\\n            revert InsufficientBalance();\\n        }\\n\\n        emit AccountBalanceDecreased(accId, oldBalance, oldBalance - amount, 0);\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function nodeWithdraw(uint256 amount) external {\\n        if (amount == 0) {\\n            revert ZeroAmount();\\n        }\\n        if (address(this).balance < amount) {\\n            revert InsufficientBalance();\\n        }\\n        uint256 withdrawable = s_nodes[msg.sender];\\n        if (withdrawable < amount) {\\n            revert InsufficientBalance();\\n        }\\n        s_nodes[msg.sender] -= amount;\\n        (bool sent, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        if (!sent) {\\n            revert InsufficientBalance();\\n        }\\n\\n        emit FundsWithdrawn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function chargeFee(\\n        uint64 accId,\\n        uint256 amount,\\n        address node\\n    ) external onlyRole(COORDINATOR_ROLE) {\\n        uint256 oldBalance = s_accounts[accId].balance;\\n        if (oldBalance < amount) {\\n            revert InsufficientBalance();\\n        }\\n\\n        s_accounts[accId].balance -= amount;\\n        s_accounts[accId].reqCount += 1;\\n        uint256 burnAmount = (amount * s_BurnRatio) / 100;\\n        s_nodes[node] += amount - burnAmount;\\n        if (burnAmount > 0) {\\n            (bool sent, ) = address(0).call{value: burnAmount}(\\\"\\\");\\n            if (!sent) {\\n                revert BurnFeeFailed();\\n            }\\n        }\\n\\n        emit AccountBalanceDecreased(accId, oldBalance, oldBalance - amount, burnAmount);\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function getNonce(address consumer, uint64 accId) external view returns (uint64) {\\n        return s_consumers[consumer][accId];\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function increaseNonce(\\n        address consumer,\\n        uint64 accId\\n    ) external onlyRole(COORDINATOR_ROLE) returns (uint64) {\\n        uint64 currentNonce = s_consumers[consumer][accId];\\n        uint64 nonce = currentNonce + 1;\\n        s_consumers[consumer][accId] = nonce;\\n        return nonce;\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function getAccountOwner(uint64 accId) external view returns (address owner) {\\n        return s_accountConfigs[accId].owner;\\n    }\\n\\n    /**\\n     * @notice The type and version of this contract\\n     * @return Type and version string\\n     */\\n    function typeAndVersion() external pure virtual override returns (string memory) {\\n        return \\\"Prepayment v0.1\\\";\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     * @dev Looping is bounded to MAX_CONSUMERS*(number of keyhashes).\\n     * @dev Used to disable subscription canceling while outstanding request are present.\\n     */\\n    function pendingRequestExists(uint64 accId) public view returns (bool) {\\n        AccountConfig memory accConfig = s_accountConfigs[accId];\\n        for (uint256 i = 0; i < accConfig.consumers.length; i++) {\\n            for (uint256 j = 0; j < s_coordinators.length; j++) {\\n                if (\\n                    s_coordinators[j].pendingRequestExists(\\n                        accConfig.consumers[i],\\n                        accId,\\n                        s_consumers[accConfig.consumers[i]][accId]\\n                    )\\n                ) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function addCoordinator(address coordinator) public onlyOwner {\\n        for (uint256 i = 0; i < s_coordinators.length; i++) {\\n            if (s_coordinators[i] == CoordinatorBaseInterface(coordinator)) {\\n                revert CoordinatorExists();\\n            }\\n        }\\n        _grantRole(COORDINATOR_ROLE, coordinator);\\n        s_coordinators.push(CoordinatorBaseInterface(coordinator));\\n    }\\n\\n    /**\\n     * @inheritdoc PrepaymentInterface\\n     */\\n    function removeCoordinator(address coordinator) public onlyOwner {\\n        _revokeRole(COORDINATOR_ROLE, coordinator);\\n\\n        for (uint256 i = 0; i < s_coordinators.length; i++) {\\n            if (s_coordinators[i] == CoordinatorBaseInterface(coordinator)) {\\n                CoordinatorBaseInterface last = s_coordinators[s_coordinators.length - 1];\\n                s_coordinators[i] = last;\\n                s_coordinators.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @notice Remove consumers and account related information.\\n     * @notice Return remaining balance.\\n     * @param accId - ID of the account\\n     * @param to - Where to send the remaining KLAY to\\n     */\\n    function cancelAccountHelper(uint64 accId, address to) private {\\n        AccountConfig memory accConfig = s_accountConfigs[accId];\\n        Account memory acc = s_accounts[accId];\\n        uint256 balance = acc.balance;\\n\\n        // Note bounded by MAX_CONSUMERS;\\n        // If no consumers, does nothing.\\n        for (uint256 i = 0; i < accConfig.consumers.length; i++) {\\n            delete s_consumers[accConfig.consumers[i]][accId];\\n        }\\n\\n        delete s_accountConfigs[accId];\\n        delete s_accounts[accId];\\n        s_totalBalance -= balance;\\n\\n        (bool sent, ) = to.call{value: balance}(\\\"\\\");\\n        if (!sent) {\\n            revert InsufficientBalance();\\n        }\\n\\n        emit AccountCanceled(accId, to, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x9e2268bccc8246646fcfa130176b3beaac18ce26580155dca376488da130297c\",\"license\":\"MIT\"},\"src/v0.1/interfaces/CoordinatorBaseInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface CoordinatorBaseInterface {\\n    /**\\n     * @notice Check to see if there exists a request commitment consumers\\n     * for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request for the account, false\\n     * otherwise.\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x227416dfeab97173d5bbf25a60f6e8012bade3381b575a2ea0d923c04b88a2be\",\"license\":\"MIT\"},\"src/v0.1/interfaces/PrepaymentInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface PrepaymentInterface {\\n    /**\\n     * @notice Return total amount of KLAY held in contract.\\n     * @return balance - A unique account id.\\n     */\\n    function getTotalBalance() external returns (uint256);\\n\\n    /**\\n     * @notice Get an account.\\n     * @param accId - ID of the account\\n     * @return balance - KLAY balance of the account in juels.\\n     * @return reqCount - number of requests for this account, determines fee tier.\\n     * @return owner - owner of the account.\\n     * @return consumers - list of consumer address which are able to use this account.\\n     */\\n    function getAccount(uint64 accId) external view\\n        returns (uint256 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n    /**\\n     * @notice Create an account.\\n     * @return accId - A unique account id.\\n     * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n     * @dev Note to fund the account, use deposit function.\\n     */\\n    function createAccount() external returns (uint64);\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @param accId - ID of the account\\n     * @param newOwner - proposed new owner of the account\\n     */\\n    function requestAccountOwnerTransfer(uint64 accId, address newOwner) external;\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @param accId - ID of the account\\n     * @dev will revert if original owner of accId has\\n     * not requested that msg.sender become the new owner.\\n     */\\n    function acceptAccountOwnerTransfer(uint64 accId) external;\\n\\n    /**\\n     * @notice Remove a consumer from a account.\\n     * @param accId - ID of the account\\n     * @param consumer - Consumer to remove from the account\\n     */\\n    function removeConsumer(uint64 accId, address consumer) external;\\n\\n    /**\\n     * @notice Add a consumer to an account.\\n     * @param accId - ID of the account\\n     * @param consumer - New consumer which can use the account\\n     */\\n    function addConsumer(uint64 accId, address consumer) external;\\n\\n    /**\\n     * @notice Cancel account\\n     * @param accId - ID of the account\\n     * @param to - Where to send the remaining KLAY to\\n     */\\n    function cancelAccount(uint64 accId, address to) external;\\n\\n    /**\\n     * @notice Deposit KLAY to account.\\n     * @notice Anybody can deposit KLAY, there are no restrictions.\\n     * @param accId - ID of the account\\n     */\\n    function deposit(uint64 accId) payable external;\\n\\n    /**\\n     * @notice Withdraw KLAY from account.\\n     * @notice Only account owner can withdraw KLAY.\\n     * @param accId - ID of the account\\n     * @param amount - KLAY amount to be withdrawn\\n     */\\n    function withdraw(uint64 accId, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw funds stored in contract.\\n     * @notice Can be executed only by WITHDRAWER_ROLE.\\n     * @param amount - KLAY amount to be withdrawn\\n     */\\n    function nodeWithdraw(uint256 amount) external;\\n\\n    /**\\n     * @notice Charge fee from service connected to account.\\n     * @param accId - ID of the account\\n     * @param amount - KLAY amount to be charged\\n     */\\n    function chargeFee(uint64 accId, uint256 amount,address node) external;\\n\\n    /**\\n     * @notice Return nonce value.\\n     * @param consumer - Address of consumer registered under accId\\n     * @param accId - ID of the account\\n     */\\n    function getNonce(address consumer, uint64 accId) external view returns (uint64);\\n\\n    /**\\n     * @notice Increase nonce for consumer registered under accId.\\n     * @param consumer - Address of consumer registered under accId\\n     * @param accId - ID of the account\\n     */\\n    function increaseNonce(address consumer, uint64 accId) external returns (uint64);\\n\\n    /**\\n     * @notice Get address of account owner.\\n     * @param accId - ID of the account\\n     */\\n    function getAccountOwner(uint64 accId) external returns (address owner);\\n\\n    /*\\n     * @notice Check to see if there exists a request commitment consumers\\n     * for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request for the account, false\\n     * otherwise.\\n     */\\n    function pendingRequestExists(uint64 accId) external view returns (bool);\\n\\n    /*\\n     * @notice Add coordinator to be able to charge using Prepayment method.\\n     * @param coordinator - address of coordinator\\n     */\\n    function addCoordinator(address coordinator) external;\\n\\n    /*\\n     * @notice Block coordinator from using Prepayment method.\\n     * @param coordinator - address of coordinator\\n     */\\n    function removeCoordinator(address coordinator) external;\\n}\\n\",\"keccak256\":\"0x20d9e215526e15f693b1330e3c3e09b4c8ff8c7fd42a34e73df3f5319f6060f1\",\"license\":\"MIT\"},\"src/v0.1/interfaces/TypeAndVersionInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol\\n\\nabstract contract TypeAndVersionInterface {\\n  function typeAndVersion() external pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x349822ac8c316553c2333fffc540be585de77beaec54b32476c2ac56b1c5bfa8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526004805460ff60401b1916681400000000000000001790553480156200002957600080fd5b50620000353362000048565b620000426000336200009a565b620001ff565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620000a68282620000aa565b5050565b620000c18282620000ed60201b6200209b1760201c565b6000828152600160209081526040909120620000e8918390620021396200018d821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000a6576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001493390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001a4836001600160a01b038416620001ad565b90505b92915050565b6000818152600183016020526040812054620001f657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001a7565b506000620001a7565b612f13806200020f6000396000f3fe6080604052600436106102a05760003560e01c8063715018a61161016e5780639f87fad7116100cb578063e82ad7d41161007f578063f2fde38b11610064578063f2fde38b14610821578063faa536ec14610841578063fbd6d77e1461086757600080fd5b8063e82ad7d4146107e1578063ea74b84d1461080157600080fd5b8063ca15c873116100b0578063ca15c8731461078c578063d547741f146107ac578063da41d4b3146107cc57600080fd5b80639f87fad714610757578063a217fddf1461077757600080fd5b80638da5cb5b1161012257806391d148541161010757806391d14854146106d757806393c89ef11461071b5780639dca362f1461074257600080fd5b80638da5cb5b146106995780639010d07c146106b757600080fd5b806377ae211a1161015357806377ae211a1461062957806382d87af3146106595780638cb5a0c01461067957600080fd5b8063715018a6146105f45780637341c10c1461060957600080fd5b8063302727101161021c5780634a418973116101d057806364d51a2a116101b557806364d51a2a146105485780636b366cb5146105705780636d5e8a79146105a457600080fd5b80634a418973146104db5780634c91f4ff1461051b57600080fd5b80634000a007116102015780634000a00714610462578063433879831461049b57806344a287ca146104bb57600080fd5b8063302727101461042257806336568abe1461044257600080fd5b806312b5834911610273578063181f5a7711610258578063181f5a7714610386578063248a9ca3146103d25780632f2ff15d1461040257600080fd5b806312b5834914610354578063137658381461037357600080fd5b806301ffc9a7146102a557806304f1be08146102da578063080e221b1461031257806312207e6a14610334575b600080fd5b3480156102b157600080fd5b506102c56102c0366004612a61565b610887565b60405190151581526020015b60405180910390f35b3480156102e657600080fd5b506102fa6102f5366004612a8b565b6108cb565b6040516001600160a01b0390911681526020016102d1565b34801561031e57600080fd5b5061033261032d366004612ad8565b6108f5565b005b34801561034057600080fd5b5061033261034f366004612b0b565b6109a8565b34801561036057600080fd5b506003545b6040519081526020016102d1565b610332610381366004612b0b565b610af6565b34801561039257600080fd5b50604080518082018252600f81527f5072657061796d656e742076302e310000000000000000000000000000000000602082015290516102d19190612b4a565b3480156103de57600080fd5b506103656103ed366004612a8b565b60009081526020819052604090206001015490565b34801561040e57600080fd5b5061033261041d366004612b7d565b610b93565b34801561042e57600080fd5b5061033261043d366004612a8b565b610bbd565b34801561044e57600080fd5b5061033261045d366004612b7d565b610d14565b34801561046e57600080fd5b5061048261047d366004612ba0565b610da0565b60405167ffffffffffffffff90911681526020016102d1565b3480156104a757600080fd5b506103326104b6366004612bca565b610e57565b3480156104c757600080fd5b506103326104d6366004612bf4565b611031565b3480156104e757600080fd5b506102fa6104f6366004612b0b565b67ffffffffffffffff166000908152600660205260409020546001600160a01b031690565b34801561052757600080fd5b50610365610536366004612c17565b60086020526000908152604090205481565b34801561055457600080fd5b5061055d606481565b60405161ffff90911681526020016102d1565b34801561057c57600080fd5b506103657f2e8b98eef02e8df3bd27d1270ded3bea3d14db99c5234c7b14001a7fff957bcc81565b3480156105b057600080fd5b506104826105bf366004612ba0565b6001600160a01b0391909116600090815260056020908152604080832067ffffffffffffffff94851684529091529020541690565b34801561060057600080fd5b506103326110d5565b34801561061557600080fd5b50610332610624366004612ad8565b6110e9565b34801561063557600080fd5b50610649610644366004612b0b565b611291565b6040516102d19493929190612c32565b34801561066557600080fd5b50610332610674366004612ad8565b611384565b34801561068557600080fd5b50610332610694366004612c17565b611497565b3480156106a557600080fd5b506002546001600160a01b03166102fa565b3480156106c357600080fd5b506102fa6106d2366004612ca5565b6115d8565b3480156106e357600080fd5b506102c56106f2366004612b7d565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561072757600080fd5b50610730606481565b60405160ff90911681526020016102d1565b34801561074e57600080fd5b506104826115f7565b34801561076357600080fd5b50610332610772366004612ad8565b61176c565b34801561078357600080fd5b50610365600081565b34801561079857600080fd5b506103656107a7366004612a8b565b611a81565b3480156107b857600080fd5b506103326107c7366004612b7d565b611a98565b3480156107d857600080fd5b50610730600081565b3480156107ed57600080fd5b506102c56107fc366004612b0b565b611abd565b34801561080d57600080fd5b5061033261081c366004612cc7565b611cd1565b34801561082d57600080fd5b5061033261083c366004612c17565b611efe565b34801561084d57600080fd5b506004546107309068010000000000000000900460ff1681565b34801561087357600080fd5b50610332610882366004612c17565b611f8e565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806108c557506108c58261214e565b92915050565b600981815481106108db57600080fd5b6000918252602090912001546001600160a01b0316905081565b67ffffffffffffffff821660009081526006602052604090205482906001600160a01b03168061093857604051630da30f6560e31b815260040160405180910390fd5b336001600160a01b038216146109715760405163901d952160e01b81526001600160a01b03821660048201526024015b60405180910390fd5b61097a84611abd565b1561099857604051631685ecdd60e31b815260040160405180910390fd5b6109a284846121b5565b50505050565b67ffffffffffffffff81166000908152600660205260409020546001600160a01b03166109e857604051630da30f6560e31b815260040160405180910390fd5b67ffffffffffffffff81166000908152600660205260409020600101546001600160a01b03163314610a705767ffffffffffffffff8116600090815260066020526040908190206001015490517fd084e9750000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152602401610968565b67ffffffffffffffff81166000818152600660209081526040918290208054336001600160a01b0319808316821784556001909301805490931690925583516001600160a01b03909116808252928101919091529092917f048b267147cb3de127974a8d4590e362caeaf224016765e6fa656d3b9d441fa6910160405180910390a25050565b67ffffffffffffffff811660009081526007602052604081208054349290918391610b218385612d19565b925050819055508160036000828254610b3a9190612d19565b909155505067ffffffffffffffff83167faf3d9fb1c57e7b7764b81db151a26af4f4eb375e7e3c7ee23d8adc3f149f760b82610b768582612d19565b6040805192835260208301919091520160405180910390a2505050565b600082815260208190526040902060010154610bae81612457565b610bb88383612461565b505050565b80600003610bf7576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80471015610c1857604051631e9acf1760e31b815260040160405180910390fd5b3360009081526008602052604090205481811015610c4957604051631e9acf1760e31b815260040160405180910390fd5b3360009081526008602052604081208054849290610c68908490612d2c565b9091555050604051600090339084908381818185875af1925050503d8060008114610caf576040519150601f19603f3d011682016040523d82523d6000602084013e610cb4565b606091505b5050905080610cd657604051631e9acf1760e31b815260040160405180910390fd5b60408051338152602081018590527feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d910160405180910390a1505050565b6001600160a01b0381163314610d925760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610968565b610d9c8282612483565b5050565b60007f2e8b98eef02e8df3bd27d1270ded3bea3d14db99c5234c7b14001a7fff957bcc610dcc81612457565b6001600160a01b038416600090815260056020908152604080832067ffffffffffffffff808816855292528220541690610e07826001612d3f565b6001600160a01b038716600090815260056020908152604080832067ffffffffffffffff8a811685529252909120805467ffffffffffffffff1916918316919091179055935050505b5092915050565b67ffffffffffffffff821660009081526006602052604090205482906001600160a01b031680610e9a57604051630da30f6560e31b815260040160405180910390fd5b336001600160a01b03821614610ece5760405163901d952160e01b81526001600160a01b0382166004820152602401610968565b610ed784611abd565b15610ef557604051631685ecdd60e31b815260040160405180910390fd5b67ffffffffffffffff841660009081526007602052604090205483811080610f1c57508347105b15610f3a57604051631e9acf1760e31b815260040160405180910390fd5b67ffffffffffffffff851660009081526007602052604081208054869290610f63908490612d2c565b9091555050604051600090339086908381818185875af1925050503d8060008114610faa576040519150601f19603f3d011682016040523d82523d6000602084013e610faf565b606091505b5050905080610fd157604051631e9acf1760e31b815260040160405180910390fd5b67ffffffffffffffff86167f1aa2ced328cf62f816244b343d21e32b609f2651bf5a7a593fca245d3cfd0204836110088882612d2c565b6040805192835260208301919091526000908201526060015b60405180910390a2505050505050565b6110396124a5565b606460ff82161115611077576040517f345cb3cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004805468ff000000000000000019166801000000000000000060ff8416908102919091179091556040519081527f0f1db622a68af62a7752ca69b8060662f7c914040a9e0b5712b4127a8c76486f9060200160405180910390a150565b6110dd6124a5565b6110e760006124ff565b565b67ffffffffffffffff821660009081526006602052604090205482906001600160a01b03168061112c57604051630da30f6560e31b815260040160405180910390fd5b336001600160a01b038216146111605760405163901d952160e01b81526001600160a01b0382166004820152602401610968565b67ffffffffffffffff84166000908152600660205260409020600201546064116111b6576040517f05a48e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038316600090815260056020908152604080832067ffffffffffffffff808916855292528220541690036109a2576001600160a01b038316600081815260056020908152604080832067ffffffffffffffff8916808552908352818420805467ffffffffffffffff19166001908117909155600684528285206002018054918201815585529383902090930180546001600160a01b031916851790555192835290917f7894faa1f0036964938f730572ac59cb10a7300d75d21c8185b3331e563c1e0291015b60405180910390a250505050565b67ffffffffffffffff8116600090815260066020526040812054819081906060906001600160a01b03166112d857604051630da30f6560e31b815260040160405180910390fd5b67ffffffffffffffff808616600090815260076020908152604080832080546001909101546006845293829020805460029091018054845181870281018701909552808552929695909516946001600160a01b0390911693909291839183018282801561136e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611350575b5050505050905093509350935093509193509193565b67ffffffffffffffff821660009081526006602052604090205482906001600160a01b0316806113c757604051630da30f6560e31b815260040160405180910390fd5b336001600160a01b038216146113fb5760405163901d952160e01b81526001600160a01b0382166004820152602401610968565b67ffffffffffffffff84166000908152600660205260409020600101546001600160a01b038481169116146109a25767ffffffffffffffff841660008181526006602090815260409182902060010180546001600160a01b0319166001600160a01b0388169081179091558251338152918201527f16af79d7ecfd9b6d6e5a0ddacdbcc62123ae4fb0ee026d1a4127e0bf601750219101611283565b61149f6124a5565b6114c97f2e8b98eef02e8df3bd27d1270ded3bea3d14db99c5234c7b14001a7fff957bcc82612483565b60005b600954811015610d9c57816001600160a01b0316600982815481106114f3576114f3612d60565b6000918252602090912001546001600160a01b0316036115c657600980546000919061152190600190612d2c565b8154811061153157611531612d60565b600091825260209091200154600980546001600160a01b03909216925082918490811061156057611560612d60565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600980548061159f5761159f612d76565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b806115d081612d8c565b9150506114cc565b60008281526001602052604081206115f09083612551565b9392505050565b6004805460009167ffffffffffffffff909116908261161583612da5565b82546101009290920a67ffffffffffffffff818102199093169183160217909155600454169050600080604051908082528060200260200182016040528015611668578160200160208202803683370190505b506040805180820182526000808252602080830182815267ffffffffffffffff888116808552600784528685209551865591516001958601805467ffffffffffffffff19169190921617905584516060810186523381528083018481528187018881529285526006845295909320835181546001600160a01b03199081166001600160a01b03928316178355965195820180549097169516949094179094559251805194955090939192611724926002850192909101906129cd565b505060405133815267ffffffffffffffff841691507fb11f5bd59847fcbf709975a48b39d9a73c39005f186a0e7c9e16d071707426019060200160405180910390a250919050565b67ffffffffffffffff821660009081526006602052604090205482906001600160a01b0316806117af57604051630da30f6560e31b815260040160405180910390fd5b336001600160a01b038216146117e35760405163901d952160e01b81526001600160a01b0382166004820152602401610968565b6001600160a01b038316600090815260056020908152604080832067ffffffffffffffff80891685529252822054169003611865576040517ff0019fe600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff851660048201526001600160a01b0384166024820152604401610968565b67ffffffffffffffff84166000908152600660209081526040808320600201805482518185028101850190935280835291929091908301828280156118d357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118b5575b505050505090506000600182516118ea9190612d2c565b905060005b8251811015611a1357856001600160a01b031683828151811061191457611914612d60565b60200260200101516001600160a01b031603611a0157600083838151811061193e5761193e612d60565b6020026020010151905080600660008a67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201838154811061198457611984612d60565b600091825260208083209190910180546001600160a01b0319166001600160a01b03949094169390931790925567ffffffffffffffff8a1681526006909152604090206002018054806119d9576119d9612d76565b600082815260209020810160001990810180546001600160a01b031916905501905550611a13565b80611a0b81612d8c565b9150506118ef565b506001600160a01b038516600081815260056020908152604080832067ffffffffffffffff8b1680855290835292819020805467ffffffffffffffff191690555192835290917fa4be0a97eff918a7bcc570a09d2a8812983d49f7cd84d1f29a8148cf0ed401e69101611021565b60008181526001602052604081206108c59061255d565b600082815260208190526040902060010154611ab381612457565b610bb88383612483565b67ffffffffffffffff81166000908152600660209081526040808320815160608101835281546001600160a01b0390811682526001830154168185015260028201805484518187028101870186528181528796939586019390929190830182828015611b5257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b34575b505050505081525050905060005b816040015151811015611cc75760005b600954811015611cb45760098181548110611b8d57611b8d612d60565b600091825260209091200154604084015180516001600160a01b0390921691631a892832919085908110611bc357611bc3612d60565b6020026020010151876005600088604001518881518110611be657611be6612d60565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812067ffffffffffffffff8e81168352925282902054915160e087901b6001600160e01b03191681529490921660048501529181166024840152166044820152606401602060405180830381865afa158015611c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c929190612de2565b15611ca257506001949350505050565b80611cac81612d8c565b915050611b70565b5080611cbf81612d8c565b915050611b60565b5060009392505050565b7f2e8b98eef02e8df3bd27d1270ded3bea3d14db99c5234c7b14001a7fff957bcc611cfb81612457565b67ffffffffffffffff841660009081526007602052604090205483811015611d3657604051631e9acf1760e31b815260040160405180910390fd5b67ffffffffffffffff851660009081526007602052604081208054869290611d5f908490612d2c565b909155505067ffffffffffffffff8086166000908152600760205260408120600190810180549193909291611d9691859116612d3f565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006064600460089054906101000a900460ff1660ff1686611dde9190612e04565b611de89190612e23565b9050611df48186612d2c565b6001600160a01b03851660009081526008602052604081208054909190611e1c908490612d19565b90915550508015611eab57604051600090819083908281818185825af1925050503d8060008114611e69576040519150601f19603f3d011682016040523d82523d6000602084013e611e6e565b606091505b5050905080611ea9576040517f0e27e65d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b67ffffffffffffffff86167f1aa2ced328cf62f816244b343d21e32b609f2651bf5a7a593fca245d3cfd020483611ee28882612d2c565b6040805192835260208301919091528101849052606001611021565b611f066124a5565b6001600160a01b038116611f825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610968565b611f8b816124ff565b50565b611f966124a5565b60005b60095481101561201e57816001600160a01b031660098281548110611fc057611fc0612d60565b6000918252602090912001546001600160a01b03160361200c576040517f59f4e0cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061201681612d8c565b915050611f99565b506120497f2e8b98eef02e8df3bd27d1270ded3bea3d14db99c5234c7b14001a7fff957bcc82612461565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610d9c576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556120f53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006115f0836001600160a01b038416612567565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806108c557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146108c5565b67ffffffffffffffff82166000908152600660209081526040808320815160608101835281546001600160a01b0390811682526001830154168185015260028201805484518187028101870186528181529295939486019383018282801561224657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612228575b5050509190925250505067ffffffffffffffff808516600090815260076020908152604080832081518083019092528054808352600190910154909416918101919091529293505b8360400151518110156123105760056000856040015183815181106122b5576122b5612d60565b6020908102919091018101516001600160a01b03168252818101929092526040908101600090812067ffffffffffffffff8a1682529092529020805467ffffffffffffffff191690558061230881612d8c565b91505061228e565b5067ffffffffffffffff8516600090815260066020526040812080546001600160a01b031990811682556001820180549091169055906123536002830182612a32565b505067ffffffffffffffff85166000908152600760205260408120818155600101805467ffffffffffffffff1916905560038054839290612395908490612d2c565b90915550506040516000906001600160a01b0386169083908381818185875af1925050503d80600081146123e5576040519150601f19603f3d011682016040523d82523d6000602084013e6123ea565b606091505b505090508061240c57604051631e9acf1760e31b815260040160405180910390fd5b604080516001600160a01b03871681526020810184905267ffffffffffffffff8816917fa4b415eea92d547f572903f94d46c3f89d4accdd251f08b275660d0b2b8b9bb59101611021565b611f8b81336125b6565b61246b828261209b565b6000828152600160205260409020610bb89082612139565b61248d8282612629565b6000828152600160205260409020610bb890826126a8565b6002546001600160a01b031633146110e75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610968565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006115f083836126bd565b60006108c5825490565b60008181526001830160205260408120546125ae575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108c5565b5060006108c5565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610d9c576125e7816126e7565b6125f28360206126f9565b604051602001612603929190612e45565b60408051601f198184030181529082905262461bcd60e51b825261096891600401612b4a565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610d9c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006115f0836001600160a01b0384166128da565b60008260000182815481106126d4576126d4612d60565b9060005260206000200154905092915050565b60606108c56001600160a01b03831660145b60606000612708836002612e04565b612713906002612d19565b67ffffffffffffffff81111561272b5761272b612dcc565b6040519080825280601f01601f191660200182016040528015612755576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061278c5761278c612d60565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106127d7576127d7612d60565b60200101906001600160f81b031916908160001a90535060006127fb846002612e04565b612806906001612d19565b90505b600181111561288b577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061284757612847612d60565b1a60f81b82828151811061285d5761285d612d60565b60200101906001600160f81b031916908160001a90535060049490941c9361288481612ec6565b9050612809565b5083156115f05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610968565b600081815260018301602052604081205480156129c35760006128fe600183612d2c565b855490915060009061291290600190612d2c565b905081811461297757600086600001828154811061293257612932612d60565b906000526020600020015490508087600001848154811061295557612955612d60565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061298857612988612d76565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108c5565b60009150506108c5565b828054828255906000526020600020908101928215612a22579160200282015b82811115612a2257825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906129ed565b50612a2e929150612a4c565b5090565b5080546000825590600052602060002090810190611f8b91905b5b80821115612a2e5760008155600101612a4d565b600060208284031215612a7357600080fd5b81356001600160e01b0319811681146115f057600080fd5b600060208284031215612a9d57600080fd5b5035919050565b803567ffffffffffffffff81168114612abc57600080fd5b919050565b80356001600160a01b0381168114612abc57600080fd5b60008060408385031215612aeb57600080fd5b612af483612aa4565b9150612b0260208401612ac1565b90509250929050565b600060208284031215612b1d57600080fd5b6115f082612aa4565b60005b83811015612b41578181015183820152602001612b29565b50506000910152565b6020815260008251806020840152612b69816040850160208701612b26565b601f01601f19169190910160400192915050565b60008060408385031215612b9057600080fd5b82359150612b0260208401612ac1565b60008060408385031215612bb357600080fd5b612bbc83612ac1565b9150612b0260208401612aa4565b60008060408385031215612bdd57600080fd5b612be683612aa4565b946020939093013593505050565b600060208284031215612c0657600080fd5b813560ff811681146115f057600080fd5b600060208284031215612c2957600080fd5b6115f082612ac1565b600060808201868352602067ffffffffffffffff8716818501526001600160a01b0380871660408601526080606086015282865180855260a087019150838801945060005b81811015612c95578551841683529484019491840191600101612c77565b50909a9950505050505050505050565b60008060408385031215612cb857600080fd5b50508035926020909101359150565b600080600060608486031215612cdc57600080fd5b612ce584612aa4565b925060208401359150612cfa60408501612ac1565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b808201808211156108c5576108c5612d03565b818103818111156108c5576108c5612d03565b67ffffffffffffffff818116838216019080821115610e5057610e50612d03565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600060018201612d9e57612d9e612d03565b5060010190565b600067ffffffffffffffff808316818103612dc257612dc2612d03565b6001019392505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215612df457600080fd5b815180151581146115f057600080fd5b6000816000190483118215151615612e1e57612e1e612d03565b500290565b600082612e4057634e487b7160e01b600052601260045260246000fd5b500490565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612e7d816017850160208801612b26565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612eba816028840160208801612b26565b01602801949350505050565b600081612ed557612ed5612d03565b50600019019056fea26469706673582212205323a88e9ea9b26d89136551567aa2d9778537cba3df2a97d183537504b429b664736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106102a05760003560e01c8063715018a61161016e5780639f87fad7116100cb578063e82ad7d41161007f578063f2fde38b11610064578063f2fde38b14610821578063faa536ec14610841578063fbd6d77e1461086757600080fd5b8063e82ad7d4146107e1578063ea74b84d1461080157600080fd5b8063ca15c873116100b0578063ca15c8731461078c578063d547741f146107ac578063da41d4b3146107cc57600080fd5b80639f87fad714610757578063a217fddf1461077757600080fd5b80638da5cb5b1161012257806391d148541161010757806391d14854146106d757806393c89ef11461071b5780639dca362f1461074257600080fd5b80638da5cb5b146106995780639010d07c146106b757600080fd5b806377ae211a1161015357806377ae211a1461062957806382d87af3146106595780638cb5a0c01461067957600080fd5b8063715018a6146105f45780637341c10c1461060957600080fd5b8063302727101161021c5780634a418973116101d057806364d51a2a116101b557806364d51a2a146105485780636b366cb5146105705780636d5e8a79146105a457600080fd5b80634a418973146104db5780634c91f4ff1461051b57600080fd5b80634000a007116102015780634000a00714610462578063433879831461049b57806344a287ca146104bb57600080fd5b8063302727101461042257806336568abe1461044257600080fd5b806312b5834911610273578063181f5a7711610258578063181f5a7714610386578063248a9ca3146103d25780632f2ff15d1461040257600080fd5b806312b5834914610354578063137658381461037357600080fd5b806301ffc9a7146102a557806304f1be08146102da578063080e221b1461031257806312207e6a14610334575b600080fd5b3480156102b157600080fd5b506102c56102c0366004612a61565b610887565b60405190151581526020015b60405180910390f35b3480156102e657600080fd5b506102fa6102f5366004612a8b565b6108cb565b6040516001600160a01b0390911681526020016102d1565b34801561031e57600080fd5b5061033261032d366004612ad8565b6108f5565b005b34801561034057600080fd5b5061033261034f366004612b0b565b6109a8565b34801561036057600080fd5b506003545b6040519081526020016102d1565b610332610381366004612b0b565b610af6565b34801561039257600080fd5b50604080518082018252600f81527f5072657061796d656e742076302e310000000000000000000000000000000000602082015290516102d19190612b4a565b3480156103de57600080fd5b506103656103ed366004612a8b565b60009081526020819052604090206001015490565b34801561040e57600080fd5b5061033261041d366004612b7d565b610b93565b34801561042e57600080fd5b5061033261043d366004612a8b565b610bbd565b34801561044e57600080fd5b5061033261045d366004612b7d565b610d14565b34801561046e57600080fd5b5061048261047d366004612ba0565b610da0565b60405167ffffffffffffffff90911681526020016102d1565b3480156104a757600080fd5b506103326104b6366004612bca565b610e57565b3480156104c757600080fd5b506103326104d6366004612bf4565b611031565b3480156104e757600080fd5b506102fa6104f6366004612b0b565b67ffffffffffffffff166000908152600660205260409020546001600160a01b031690565b34801561052757600080fd5b50610365610536366004612c17565b60086020526000908152604090205481565b34801561055457600080fd5b5061055d606481565b60405161ffff90911681526020016102d1565b34801561057c57600080fd5b506103657f2e8b98eef02e8df3bd27d1270ded3bea3d14db99c5234c7b14001a7fff957bcc81565b3480156105b057600080fd5b506104826105bf366004612ba0565b6001600160a01b0391909116600090815260056020908152604080832067ffffffffffffffff94851684529091529020541690565b34801561060057600080fd5b506103326110d5565b34801561061557600080fd5b50610332610624366004612ad8565b6110e9565b34801561063557600080fd5b50610649610644366004612b0b565b611291565b6040516102d19493929190612c32565b34801561066557600080fd5b50610332610674366004612ad8565b611384565b34801561068557600080fd5b50610332610694366004612c17565b611497565b3480156106a557600080fd5b506002546001600160a01b03166102fa565b3480156106c357600080fd5b506102fa6106d2366004612ca5565b6115d8565b3480156106e357600080fd5b506102c56106f2366004612b7d565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561072757600080fd5b50610730606481565b60405160ff90911681526020016102d1565b34801561074e57600080fd5b506104826115f7565b34801561076357600080fd5b50610332610772366004612ad8565b61176c565b34801561078357600080fd5b50610365600081565b34801561079857600080fd5b506103656107a7366004612a8b565b611a81565b3480156107b857600080fd5b506103326107c7366004612b7d565b611a98565b3480156107d857600080fd5b50610730600081565b3480156107ed57600080fd5b506102c56107fc366004612b0b565b611abd565b34801561080d57600080fd5b5061033261081c366004612cc7565b611cd1565b34801561082d57600080fd5b5061033261083c366004612c17565b611efe565b34801561084d57600080fd5b506004546107309068010000000000000000900460ff1681565b34801561087357600080fd5b50610332610882366004612c17565b611f8e565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806108c557506108c58261214e565b92915050565b600981815481106108db57600080fd5b6000918252602090912001546001600160a01b0316905081565b67ffffffffffffffff821660009081526006602052604090205482906001600160a01b03168061093857604051630da30f6560e31b815260040160405180910390fd5b336001600160a01b038216146109715760405163901d952160e01b81526001600160a01b03821660048201526024015b60405180910390fd5b61097a84611abd565b1561099857604051631685ecdd60e31b815260040160405180910390fd5b6109a284846121b5565b50505050565b67ffffffffffffffff81166000908152600660205260409020546001600160a01b03166109e857604051630da30f6560e31b815260040160405180910390fd5b67ffffffffffffffff81166000908152600660205260409020600101546001600160a01b03163314610a705767ffffffffffffffff8116600090815260066020526040908190206001015490517fd084e9750000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152602401610968565b67ffffffffffffffff81166000818152600660209081526040918290208054336001600160a01b0319808316821784556001909301805490931690925583516001600160a01b03909116808252928101919091529092917f048b267147cb3de127974a8d4590e362caeaf224016765e6fa656d3b9d441fa6910160405180910390a25050565b67ffffffffffffffff811660009081526007602052604081208054349290918391610b218385612d19565b925050819055508160036000828254610b3a9190612d19565b909155505067ffffffffffffffff83167faf3d9fb1c57e7b7764b81db151a26af4f4eb375e7e3c7ee23d8adc3f149f760b82610b768582612d19565b6040805192835260208301919091520160405180910390a2505050565b600082815260208190526040902060010154610bae81612457565b610bb88383612461565b505050565b80600003610bf7576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80471015610c1857604051631e9acf1760e31b815260040160405180910390fd5b3360009081526008602052604090205481811015610c4957604051631e9acf1760e31b815260040160405180910390fd5b3360009081526008602052604081208054849290610c68908490612d2c565b9091555050604051600090339084908381818185875af1925050503d8060008114610caf576040519150601f19603f3d011682016040523d82523d6000602084013e610cb4565b606091505b5050905080610cd657604051631e9acf1760e31b815260040160405180910390fd5b60408051338152602081018590527feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d910160405180910390a1505050565b6001600160a01b0381163314610d925760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610968565b610d9c8282612483565b5050565b60007f2e8b98eef02e8df3bd27d1270ded3bea3d14db99c5234c7b14001a7fff957bcc610dcc81612457565b6001600160a01b038416600090815260056020908152604080832067ffffffffffffffff808816855292528220541690610e07826001612d3f565b6001600160a01b038716600090815260056020908152604080832067ffffffffffffffff8a811685529252909120805467ffffffffffffffff1916918316919091179055935050505b5092915050565b67ffffffffffffffff821660009081526006602052604090205482906001600160a01b031680610e9a57604051630da30f6560e31b815260040160405180910390fd5b336001600160a01b03821614610ece5760405163901d952160e01b81526001600160a01b0382166004820152602401610968565b610ed784611abd565b15610ef557604051631685ecdd60e31b815260040160405180910390fd5b67ffffffffffffffff841660009081526007602052604090205483811080610f1c57508347105b15610f3a57604051631e9acf1760e31b815260040160405180910390fd5b67ffffffffffffffff851660009081526007602052604081208054869290610f63908490612d2c565b9091555050604051600090339086908381818185875af1925050503d8060008114610faa576040519150601f19603f3d011682016040523d82523d6000602084013e610faf565b606091505b5050905080610fd157604051631e9acf1760e31b815260040160405180910390fd5b67ffffffffffffffff86167f1aa2ced328cf62f816244b343d21e32b609f2651bf5a7a593fca245d3cfd0204836110088882612d2c565b6040805192835260208301919091526000908201526060015b60405180910390a2505050505050565b6110396124a5565b606460ff82161115611077576040517f345cb3cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004805468ff000000000000000019166801000000000000000060ff8416908102919091179091556040519081527f0f1db622a68af62a7752ca69b8060662f7c914040a9e0b5712b4127a8c76486f9060200160405180910390a150565b6110dd6124a5565b6110e760006124ff565b565b67ffffffffffffffff821660009081526006602052604090205482906001600160a01b03168061112c57604051630da30f6560e31b815260040160405180910390fd5b336001600160a01b038216146111605760405163901d952160e01b81526001600160a01b0382166004820152602401610968565b67ffffffffffffffff84166000908152600660205260409020600201546064116111b6576040517f05a48e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038316600090815260056020908152604080832067ffffffffffffffff808916855292528220541690036109a2576001600160a01b038316600081815260056020908152604080832067ffffffffffffffff8916808552908352818420805467ffffffffffffffff19166001908117909155600684528285206002018054918201815585529383902090930180546001600160a01b031916851790555192835290917f7894faa1f0036964938f730572ac59cb10a7300d75d21c8185b3331e563c1e0291015b60405180910390a250505050565b67ffffffffffffffff8116600090815260066020526040812054819081906060906001600160a01b03166112d857604051630da30f6560e31b815260040160405180910390fd5b67ffffffffffffffff808616600090815260076020908152604080832080546001909101546006845293829020805460029091018054845181870281018701909552808552929695909516946001600160a01b0390911693909291839183018282801561136e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611350575b5050505050905093509350935093509193509193565b67ffffffffffffffff821660009081526006602052604090205482906001600160a01b0316806113c757604051630da30f6560e31b815260040160405180910390fd5b336001600160a01b038216146113fb5760405163901d952160e01b81526001600160a01b0382166004820152602401610968565b67ffffffffffffffff84166000908152600660205260409020600101546001600160a01b038481169116146109a25767ffffffffffffffff841660008181526006602090815260409182902060010180546001600160a01b0319166001600160a01b0388169081179091558251338152918201527f16af79d7ecfd9b6d6e5a0ddacdbcc62123ae4fb0ee026d1a4127e0bf601750219101611283565b61149f6124a5565b6114c97f2e8b98eef02e8df3bd27d1270ded3bea3d14db99c5234c7b14001a7fff957bcc82612483565b60005b600954811015610d9c57816001600160a01b0316600982815481106114f3576114f3612d60565b6000918252602090912001546001600160a01b0316036115c657600980546000919061152190600190612d2c565b8154811061153157611531612d60565b600091825260209091200154600980546001600160a01b03909216925082918490811061156057611560612d60565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600980548061159f5761159f612d76565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b806115d081612d8c565b9150506114cc565b60008281526001602052604081206115f09083612551565b9392505050565b6004805460009167ffffffffffffffff909116908261161583612da5565b82546101009290920a67ffffffffffffffff818102199093169183160217909155600454169050600080604051908082528060200260200182016040528015611668578160200160208202803683370190505b506040805180820182526000808252602080830182815267ffffffffffffffff888116808552600784528685209551865591516001958601805467ffffffffffffffff19169190921617905584516060810186523381528083018481528187018881529285526006845295909320835181546001600160a01b03199081166001600160a01b03928316178355965195820180549097169516949094179094559251805194955090939192611724926002850192909101906129cd565b505060405133815267ffffffffffffffff841691507fb11f5bd59847fcbf709975a48b39d9a73c39005f186a0e7c9e16d071707426019060200160405180910390a250919050565b67ffffffffffffffff821660009081526006602052604090205482906001600160a01b0316806117af57604051630da30f6560e31b815260040160405180910390fd5b336001600160a01b038216146117e35760405163901d952160e01b81526001600160a01b0382166004820152602401610968565b6001600160a01b038316600090815260056020908152604080832067ffffffffffffffff80891685529252822054169003611865576040517ff0019fe600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff851660048201526001600160a01b0384166024820152604401610968565b67ffffffffffffffff84166000908152600660209081526040808320600201805482518185028101850190935280835291929091908301828280156118d357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118b5575b505050505090506000600182516118ea9190612d2c565b905060005b8251811015611a1357856001600160a01b031683828151811061191457611914612d60565b60200260200101516001600160a01b031603611a0157600083838151811061193e5761193e612d60565b6020026020010151905080600660008a67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201838154811061198457611984612d60565b600091825260208083209190910180546001600160a01b0319166001600160a01b03949094169390931790925567ffffffffffffffff8a1681526006909152604090206002018054806119d9576119d9612d76565b600082815260209020810160001990810180546001600160a01b031916905501905550611a13565b80611a0b81612d8c565b9150506118ef565b506001600160a01b038516600081815260056020908152604080832067ffffffffffffffff8b1680855290835292819020805467ffffffffffffffff191690555192835290917fa4be0a97eff918a7bcc570a09d2a8812983d49f7cd84d1f29a8148cf0ed401e69101611021565b60008181526001602052604081206108c59061255d565b600082815260208190526040902060010154611ab381612457565b610bb88383612483565b67ffffffffffffffff81166000908152600660209081526040808320815160608101835281546001600160a01b0390811682526001830154168185015260028201805484518187028101870186528181528796939586019390929190830182828015611b5257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b34575b505050505081525050905060005b816040015151811015611cc75760005b600954811015611cb45760098181548110611b8d57611b8d612d60565b600091825260209091200154604084015180516001600160a01b0390921691631a892832919085908110611bc357611bc3612d60565b6020026020010151876005600088604001518881518110611be657611be6612d60565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812067ffffffffffffffff8e81168352925282902054915160e087901b6001600160e01b03191681529490921660048501529181166024840152166044820152606401602060405180830381865afa158015611c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c929190612de2565b15611ca257506001949350505050565b80611cac81612d8c565b915050611b70565b5080611cbf81612d8c565b915050611b60565b5060009392505050565b7f2e8b98eef02e8df3bd27d1270ded3bea3d14db99c5234c7b14001a7fff957bcc611cfb81612457565b67ffffffffffffffff841660009081526007602052604090205483811015611d3657604051631e9acf1760e31b815260040160405180910390fd5b67ffffffffffffffff851660009081526007602052604081208054869290611d5f908490612d2c565b909155505067ffffffffffffffff8086166000908152600760205260408120600190810180549193909291611d9691859116612d3f565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006064600460089054906101000a900460ff1660ff1686611dde9190612e04565b611de89190612e23565b9050611df48186612d2c565b6001600160a01b03851660009081526008602052604081208054909190611e1c908490612d19565b90915550508015611eab57604051600090819083908281818185825af1925050503d8060008114611e69576040519150601f19603f3d011682016040523d82523d6000602084013e611e6e565b606091505b5050905080611ea9576040517f0e27e65d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b67ffffffffffffffff86167f1aa2ced328cf62f816244b343d21e32b609f2651bf5a7a593fca245d3cfd020483611ee28882612d2c565b6040805192835260208301919091528101849052606001611021565b611f066124a5565b6001600160a01b038116611f825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610968565b611f8b816124ff565b50565b611f966124a5565b60005b60095481101561201e57816001600160a01b031660098281548110611fc057611fc0612d60565b6000918252602090912001546001600160a01b03160361200c576040517f59f4e0cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061201681612d8c565b915050611f99565b506120497f2e8b98eef02e8df3bd27d1270ded3bea3d14db99c5234c7b14001a7fff957bcc82612461565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610d9c576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556120f53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006115f0836001600160a01b038416612567565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806108c557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146108c5565b67ffffffffffffffff82166000908152600660209081526040808320815160608101835281546001600160a01b0390811682526001830154168185015260028201805484518187028101870186528181529295939486019383018282801561224657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612228575b5050509190925250505067ffffffffffffffff808516600090815260076020908152604080832081518083019092528054808352600190910154909416918101919091529293505b8360400151518110156123105760056000856040015183815181106122b5576122b5612d60565b6020908102919091018101516001600160a01b03168252818101929092526040908101600090812067ffffffffffffffff8a1682529092529020805467ffffffffffffffff191690558061230881612d8c565b91505061228e565b5067ffffffffffffffff8516600090815260066020526040812080546001600160a01b031990811682556001820180549091169055906123536002830182612a32565b505067ffffffffffffffff85166000908152600760205260408120818155600101805467ffffffffffffffff1916905560038054839290612395908490612d2c565b90915550506040516000906001600160a01b0386169083908381818185875af1925050503d80600081146123e5576040519150601f19603f3d011682016040523d82523d6000602084013e6123ea565b606091505b505090508061240c57604051631e9acf1760e31b815260040160405180910390fd5b604080516001600160a01b03871681526020810184905267ffffffffffffffff8816917fa4b415eea92d547f572903f94d46c3f89d4accdd251f08b275660d0b2b8b9bb59101611021565b611f8b81336125b6565b61246b828261209b565b6000828152600160205260409020610bb89082612139565b61248d8282612629565b6000828152600160205260409020610bb890826126a8565b6002546001600160a01b031633146110e75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610968565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006115f083836126bd565b60006108c5825490565b60008181526001830160205260408120546125ae575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108c5565b5060006108c5565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610d9c576125e7816126e7565b6125f28360206126f9565b604051602001612603929190612e45565b60408051601f198184030181529082905262461bcd60e51b825261096891600401612b4a565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610d9c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006115f0836001600160a01b0384166128da565b60008260000182815481106126d4576126d4612d60565b9060005260206000200154905092915050565b60606108c56001600160a01b03831660145b60606000612708836002612e04565b612713906002612d19565b67ffffffffffffffff81111561272b5761272b612dcc565b6040519080825280601f01601f191660200182016040528015612755576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061278c5761278c612d60565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106127d7576127d7612d60565b60200101906001600160f81b031916908160001a90535060006127fb846002612e04565b612806906001612d19565b90505b600181111561288b577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061284757612847612d60565b1a60f81b82828151811061285d5761285d612d60565b60200101906001600160f81b031916908160001a90535060049490941c9361288481612ec6565b9050612809565b5083156115f05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610968565b600081815260018301602052604081205480156129c35760006128fe600183612d2c565b855490915060009061291290600190612d2c565b905081811461297757600086600001828154811061293257612932612d60565b906000526020600020015490508087600001848154811061295557612955612d60565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061298857612988612d76565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108c5565b60009150506108c5565b828054828255906000526020600020908101928215612a22579160200282015b82811115612a2257825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906129ed565b50612a2e929150612a4c565b5090565b5080546000825590600052602060002090810190611f8b91905b5b80821115612a2e5760008155600101612a4d565b600060208284031215612a7357600080fd5b81356001600160e01b0319811681146115f057600080fd5b600060208284031215612a9d57600080fd5b5035919050565b803567ffffffffffffffff81168114612abc57600080fd5b919050565b80356001600160a01b0381168114612abc57600080fd5b60008060408385031215612aeb57600080fd5b612af483612aa4565b9150612b0260208401612ac1565b90509250929050565b600060208284031215612b1d57600080fd5b6115f082612aa4565b60005b83811015612b41578181015183820152602001612b29565b50506000910152565b6020815260008251806020840152612b69816040850160208701612b26565b601f01601f19169190910160400192915050565b60008060408385031215612b9057600080fd5b82359150612b0260208401612ac1565b60008060408385031215612bb357600080fd5b612bbc83612ac1565b9150612b0260208401612aa4565b60008060408385031215612bdd57600080fd5b612be683612aa4565b946020939093013593505050565b600060208284031215612c0657600080fd5b813560ff811681146115f057600080fd5b600060208284031215612c2957600080fd5b6115f082612ac1565b600060808201868352602067ffffffffffffffff8716818501526001600160a01b0380871660408601526080606086015282865180855260a087019150838801945060005b81811015612c95578551841683529484019491840191600101612c77565b50909a9950505050505050505050565b60008060408385031215612cb857600080fd5b50508035926020909101359150565b600080600060608486031215612cdc57600080fd5b612ce584612aa4565b925060208401359150612cfa60408501612ac1565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b808201808211156108c5576108c5612d03565b818103818111156108c5576108c5612d03565b67ffffffffffffffff818116838216019080821115610e5057610e50612d03565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600060018201612d9e57612d9e612d03565b5060010190565b600067ffffffffffffffff808316818103612dc257612dc2612d03565b6001019392505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215612df457600080fd5b815180151581146115f057600080fd5b6000816000190483118215151615612e1e57612e1e612d03565b500290565b600082612e4057634e487b7160e01b600052601260045260246000fd5b500490565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612e7d816017850160208801612b26565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612eba816028840160208801612b26565b01602801949350505050565b600081612ed557612ed5612d03565b50600019019056fea26469706673582212205323a88e9ea9b26d89136551567aa2d9778537cba3df2a97d183537504b429b664736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptAccountOwnerTransfer(uint64)": {
        "details": "will revert if original owner of accId has not requested that msg.sender become the new owner.",
        "params": {
          "accId": "- ID of the account"
        }
      },
      "addConsumer(uint64,address)": {
        "params": {
          "accId": "- ID of the account",
          "consumer": "- New consumer which can use the account"
        }
      },
      "cancelAccount(uint64,address)": {
        "params": {
          "accId": "- ID of the account",
          "to": "- Where to send the remaining KLAY to"
        }
      },
      "chargeFee(uint64,uint256,address)": {
        "params": {
          "accId": "- ID of the account",
          "amount": "- KLAY amount to be charged"
        }
      },
      "createAccount()": {
        "details": "You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the account, use deposit function.",
        "returns": {
          "_0": "accId - A unique account id."
        }
      },
      "deposit(uint64)": {
        "params": {
          "accId": "- ID of the account"
        }
      },
      "getAccount(uint64)": {
        "params": {
          "accId": "- ID of the account"
        },
        "returns": {
          "balance": "- KLAY balance of the account in juels.",
          "consumers": "- list of consumer address which are able to use this account.",
          "owner": "- owner of the account.",
          "reqCount": "- number of requests for this account, determines fee tier."
        }
      },
      "getAccountOwner(uint64)": {
        "params": {
          "accId": "- ID of the account"
        }
      },
      "getNonce(address,uint64)": {
        "params": {
          "accId": "- ID of the account",
          "consumer": "- Address of consumer registered under accId"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getTotalBalance()": {
        "returns": {
          "_0": "balance - A unique account id."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseNonce(address,uint64)": {
        "params": {
          "accId": "- ID of the account",
          "consumer": "- Address of consumer registered under accId"
        }
      },
      "nodeWithdraw(uint256)": {
        "params": {
          "amount": "- KLAY amount to be withdrawn"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingRequestExists(uint64)": {
        "details": "Looping is bounded to MAX_CONSUMERS*(number of keyhashes).Used to disable subscription canceling while outstanding request are present."
      },
      "removeConsumer(uint64,address)": {
        "params": {
          "accId": "- ID of the account",
          "consumer": "- Consumer to remove from the account"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "requestAccountOwnerTransfer(uint64,address)": {
        "params": {
          "accId": "- ID of the account",
          "newOwner": "- proposed new owner of the account"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "typeAndVersion()": {
        "returns": {
          "_0": "Type and version string"
        }
      },
      "withdraw(uint64,uint256)": {
        "params": {
          "accId": "- ID of the account",
          "amount": "- KLAY amount to be withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptAccountOwnerTransfer(uint64)": {
        "notice": "Request account owner transfer."
      },
      "addConsumer(uint64,address)": {
        "notice": "Add a consumer to an account."
      },
      "cancelAccount(uint64,address)": {
        "notice": "Cancel account"
      },
      "chargeFee(uint64,uint256,address)": {
        "notice": "Charge fee from service connected to account."
      },
      "createAccount()": {
        "notice": "Create an account."
      },
      "deposit(uint64)": {
        "notice": "Deposit KLAY to account.Anybody can deposit KLAY, there are no restrictions."
      },
      "getAccount(uint64)": {
        "notice": "Get an account."
      },
      "getAccountOwner(uint64)": {
        "notice": "Get address of account owner."
      },
      "getNonce(address,uint64)": {
        "notice": "Return nonce value."
      },
      "getTotalBalance()": {
        "notice": "Return total amount of KLAY held in contract."
      },
      "increaseNonce(address,uint64)": {
        "notice": "Increase nonce for consumer registered under accId."
      },
      "nodeWithdraw(uint256)": {
        "notice": "Withdraw funds stored in contract.Can be executed only by WITHDRAWER_ROLE."
      },
      "removeConsumer(uint64,address)": {
        "notice": "Remove a consumer from a account."
      },
      "requestAccountOwnerTransfer(uint64,address)": {
        "notice": "Request account owner transfer."
      },
      "typeAndVersion()": {
        "notice": "The type and version of this contract"
      },
      "withdraw(uint64,uint256)": {
        "notice": "Withdraw KLAY from account.Only account owner can withdraw KLAY."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 334,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2075_storage)"
      },
      {
        "astId": 546,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6029,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "s_totalBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6031,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "s_currentAccId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 6034,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "s_BurnRatio",
        "offset": 8,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 6040,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "s_consumers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint64,t_uint64))"
      },
      {
        "astId": 6045,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "s_accountConfigs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint64,t_struct(AccountConfig)6067_storage)"
      },
      {
        "astId": 6050,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "s_accounts",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint64,t_struct(Account)6059_storage)"
      },
      {
        "astId": 6054,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "s_nodes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6071,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "s_coordinators",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_contract(CoordinatorBaseInterface)10322)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(CoordinatorBaseInterface)10322)dyn_storage": {
        "base": "t_contract(CoordinatorBaseInterface)10322",
        "encoding": "dynamic_array",
        "label": "contract CoordinatorBaseInterface[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CoordinatorBaseInterface)10322": {
        "encoding": "inplace",
        "label": "contract CoordinatorBaseInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint64,t_uint64))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint64 => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_uint64)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2075_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2075_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_struct(Account)6059_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct Prepayment.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)6059_storage"
      },
      "t_mapping(t_uint64,t_struct(AccountConfig)6067_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct Prepayment.AccountConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountConfig)6067_storage"
      },
      "t_mapping(t_uint64,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_struct(Account)6059_storage": {
        "encoding": "inplace",
        "label": "struct Prepayment.Account",
        "members": [
          {
            "astId": 6056,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6058,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "reqCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AccountConfig)6067_storage": {
        "encoding": "inplace",
        "label": "struct Prepayment.AccountConfig",
        "members": [
          {
            "astId": 6061,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6063,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "requestedOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6066,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "consumers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AddressSet)2075_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2074,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1760_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1760_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1755,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1759,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}