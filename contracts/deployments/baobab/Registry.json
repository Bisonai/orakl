{
  "address": "0x89c589256AcaC342c641Cd472Fd8d07550d347a8",
  "abi": [
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidChainID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFee",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "ChainConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "ChainProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ProposeFeeSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainRegistry",
      "outputs": [
        {
          "internalType": "string",
          "name": "jsonRpc",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "confirmChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_jsonRpc",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Aggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Aggregator",
          "type": "address"
        }
      ],
      "name": "proposeChain",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setProposeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2351d859345332963825895ab686002492b9f8f4fcee06d907d92cca13ec4e39",
  "receipt": {
    "to": null,
    "from": "0xa195bE68Bd37EBFfB056279Dc3d236fAa6F23670",
    "contractAddress": "0x89c589256AcaC342c641Cd472Fd8d07550d347a8",
    "transactionIndex": 0,
    "gasUsed": "1045811",
    "logsBloom": "0x
    "blockHash": "0xe125bfb7851f73a1fdb0f6178b0a216ee9972e9b9f5e06c580d8c3939d548cb9",
    "transactionHash": "0x2351d859345332963825895ab686002492b9f8f4fcee06d907d92cca13ec4e39",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 129194758,
        "transactionHash": "0x2351d859345332963825895ab686002492b9f8f4fcee06d907d92cca13ec4e39",
        "address": "0x89c589256AcaC342c641Cd472Fd8d07550d347a8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a195be68bd37ebffb056279dc3d236faa6f23670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe125bfb7851f73a1fdb0f6178b0a216ee9972e9b9f5e06c580d8c3939d548cb9"
      }
    ],
    "blockNumber": 129194758,
    "cumulativeGasUsed": "1045811",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bcba04f41f6993f6e4fb6aaefddf602c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidChainID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"ChainConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"ChainProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ProposeFeeSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainRegistry\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"jsonRpc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"confirmChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_jsonRpc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Aggregator\",\"type\":\"address\"}],\"name\":\"proposeChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setProposeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/Registry.sol\":\"Registry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/v0.1/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Registry is Ownable {\\n    error NotEnoughFee();\\n    error InvalidChainID();\\n    error InsufficientBalance();\\n\\n    event ChainProposed(address sender, uint chainID);\\n    event ChainConfirmed(uint256 chainID);\\n    event ProposeFeeSet(uint256 fee);\\n\\n    uint256 public proposeFee;\\n    struct AggregatorPair {\\n        address l1Aggregator;\\n        address l2Aggregator;\\n    }\\n\\n    struct L2Endpoint {\\n        string jsonRpc;\\n        address endpoint;\\n        address owner;\\n        AggregatorPair[] aggregatorPair;\\n    }\\n    // chainId => L2 Endpoint\\n    mapping(uint256 => L2Endpoint) public chainRegistry;\\n    // pending proposal\\n    mapping(uint256 => L2Endpoint) pendingProposal;\\n\\n    // L2 consumer => L1 payer\\n    // Can be updated only by Orakl Network through call from L2\\n    // mapping(address => address) accountRegistry;\\n\\n    function proposeChain(\\n        uint256 _chainID,\\n        string memory _jsonRpc,\\n        address _endpoint,\\n        address _l1Aggregator,\\n        address _l2Aggregator\\n    ) external payable {\\n        if (msg.value < proposeFee) {\\n            revert NotEnoughFee();\\n        }\\n        pendingProposal[_chainID].jsonRpc = _jsonRpc;\\n        pendingProposal[_chainID].endpoint = _endpoint;\\n        pendingProposal[_chainID].owner = msg.sender;\\n        AggregatorPair memory pair = AggregatorPair({\\n            l1Aggregator: _l1Aggregator,\\n            l2Aggregator: _l2Aggregator\\n        });\\n        pendingProposal[_chainID].aggregatorPair.push(pair);\\n        emit ChainProposed(msg.sender, _chainID);\\n    }\\n\\n    function setProposeFee(uint256 _fee) public onlyOwner {\\n        proposeFee = _fee;\\n        emit ProposeFeeSet(_fee);\\n    }\\n\\n    function confirmChain(uint256 _chainId) public onlyOwner {\\n        if (pendingProposal[_chainId].owner == address(0)) {\\n            revert InvalidChainID();\\n        }\\n        chainRegistry[_chainId] = pendingProposal[_chainId];\\n        delete pendingProposal[_chainId];\\n        emit ChainConfirmed(_chainId);\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw(uint256 _amount) external onlyOwner returns (bool) {\\n        uint256 balance = address(this).balance;\\n        if (balance < _amount) {\\n            revert InsufficientBalance();\\n        }\\n        (bool sent, ) = payable(msg.sender).call{value: _amount}(\\\"\\\");\\n        return sent;\\n    }\\n}\\n\",\"keccak256\":\"0x76fd087ba2a7ab377acd1feace9f470e8ffd693208b88dd171e3653ec733700a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c728061007e6000396000f3fe60806040526004361061009a5760003560e01c806383e279a811610069578063be43ddf81161004e578063be43ddf814610180578063cd5fd675146101a0578063f2fde38b146101c057600080fd5b806383e279a8146101295780638da5cb5b1461015857600080fd5b80632e1a7d4d146100a65780633df4e34a146100db5780635dc2bb38146100ff578063715018a61461011457600080fd5b366100a157005b600080fd5b3480156100b257600080fd5b506100c66100c136600461085a565b6101e0565b60405190151581526020015b60405180910390f35b3480156100e757600080fd5b506100f160015481565b6040519081526020016100d2565b61011261010d3660046108a0565b610279565b005b34801561012057600080fd5b506101126103a8565b34801561013557600080fd5b5061014961014436600461085a565b6103bc565b6040516100d29392919061098d565b34801561016457600080fd5b506000546040516001600160a01b0390911681526020016100d2565b34801561018c57600080fd5b5061011261019b36600461085a565b610473565b3480156101ac57600080fd5b506101126101bb36600461085a565b6104b7565b3480156101cc57600080fd5b506101126101db3660046109f6565b6105ff565b60006101ea610694565b4782811015610225576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051600090339085908381818185875af1925050503d8060008114610267576040519150601f19603f3d011682016040523d82523d6000602084013e61026c565b606091505b509093505050505b919050565b6001543410156102b5576040517f688e55ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008581526003602052604090206102cd8582610aa1565b506000858152600360208181526040808420600180820180546001600160a01b03199081166001600160a01b038c81169190911790925560028085018054339084168117909155865180880188528c851681528b8516818a019081528a8a529690990180548087018255908b529988902089519a909202909101805483169984169990991789559351979092018054909216961695909517909455805193845290830188905290917f46fa9a723fb10fd3c406ccd6c5678d81c1caa828ca12496afbfea32fc89287e2910160405180910390a1505050505050565b6103b0610694565b6103ba60006106ee565b565b6002602052600090815260409020805481906103d790610a18565b80601f016020809104026020016040519081016040528092919081815260200182805461040390610a18565b80156104505780601f1061042557610100808354040283529160200191610450565b820191906000526020600020905b81548152906001019060200180831161043357829003601f168201915b50505050600183015460029093015491926001600160a01b039081169216905083565b61047b610694565b60018190556040518181527f87c23b2c855a07ae0f7249c2d4ee1c3e0c65b9f5aa9f4e6fa4193bd4e19e1285906020015b60405180910390a150565b6104bf610694565b6000818152600360205260409020600201546001600160a01b0316610510576040517f86d846fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526003602090815260408083206002909252909120806105348382610b61565b5060018281015490820180546001600160a01b039283166001600160a01b031991821617909155600280850154908401805491909316911617905560038083018054610583928401919061073e565b50505060008181526003602052604081209061059f82826107c2565b6001820180546001600160a01b031990811690915560028301805490911690556105cd6003830160006107fc565b50506040518181527f01eb903cb8df881165c89e0e1fae146b762441fee3e390097368a9e02d041c43906020016104ac565b610607610694565b6001600160a01b0381166106885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610691816106ee565b50565b6000546001600160a01b031633146103ba5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209060020281019282156107b25760005260206000209160020282015b828111156107b257825482546001600160a01b039182166001600160a01b0319918216178455600180860154908501805491909316911617905560029283019290910190610769565b506107be929150610819565b5090565b5080546107ce90610a18565b6000825580601f106107de575050565b601f0160209004906000526020600020908101906106919190610845565b508054600082556002029060005260206000209081019061069191905b5b808211156107be5780546001600160a01b03199081168255600182018054909116905560020161081a565b5b808211156107be5760008155600101610846565b60006020828403121561086c57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461027457600080fd5b600080600080600060a086880312156108b857600080fd5b85359450602086013567ffffffffffffffff808211156108d757600080fd5b818801915088601f8301126108eb57600080fd5b8135818111156108fd576108fd610873565b604051601f8201601f19908116603f0116810190838211818310171561092557610925610873565b816040528281528b602084870101111561093e57600080fd5b82602086016020830137600060208483010152809850505050505061096560408701610889565b925061097360608701610889565b915061098160808701610889565b90509295509295909350565b606081526000845180606084015260005b818110156109bb576020818801810151608086840101520161099e565b506000608082850101526080601f19601f8301168401019150506001600160a01b038085166020840152808416604084015250949350505050565b600060208284031215610a0857600080fd5b610a1182610889565b9392505050565b600181811c90821680610a2c57607f821691505b602082108103610a4c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610a9c57600081815260208120601f850160051c81016020861015610a795750805b601f850160051c820191505b81811015610a9857828155600101610a85565b5050505b505050565b815167ffffffffffffffff811115610abb57610abb610873565b610acf81610ac98454610a18565b84610a52565b602080601f831160018114610b045760008415610aec5750858301515b600019600386901b1c1916600185901b178555610a98565b600085815260208120601f198616915b82811015610b3357888601518255948401946001909101908401610b14565b5085821015610b515787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103610b6c575050565b610b768254610a18565b67ffffffffffffffff811115610b8e57610b8e610873565b610b9c81610ac98454610a18565b6000601f821160018114610bd05760008315610bb85750848201545b600019600385901b1c1916600184901b178455610c35565b600085815260209020601f19841690600086815260209020845b83811015610c0a5782860154825560019586019590910190602001610bea565b5085831015610c285781850154600019600388901b60f8161c191681555b50505060018360011b0184555b505050505056fea26469706673582212203b3a4f8955530fbd66663345a165428b96e671bd89f76547bbf195cb19de482c64736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361061009a5760003560e01c806383e279a811610069578063be43ddf81161004e578063be43ddf814610180578063cd5fd675146101a0578063f2fde38b146101c057600080fd5b806383e279a8146101295780638da5cb5b1461015857600080fd5b80632e1a7d4d146100a65780633df4e34a146100db5780635dc2bb38146100ff578063715018a61461011457600080fd5b366100a157005b600080fd5b3480156100b257600080fd5b506100c66100c136600461085a565b6101e0565b60405190151581526020015b60405180910390f35b3480156100e757600080fd5b506100f160015481565b6040519081526020016100d2565b61011261010d3660046108a0565b610279565b005b34801561012057600080fd5b506101126103a8565b34801561013557600080fd5b5061014961014436600461085a565b6103bc565b6040516100d29392919061098d565b34801561016457600080fd5b506000546040516001600160a01b0390911681526020016100d2565b34801561018c57600080fd5b5061011261019b36600461085a565b610473565b3480156101ac57600080fd5b506101126101bb36600461085a565b6104b7565b3480156101cc57600080fd5b506101126101db3660046109f6565b6105ff565b60006101ea610694565b4782811015610225576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051600090339085908381818185875af1925050503d8060008114610267576040519150601f19603f3d011682016040523d82523d6000602084013e61026c565b606091505b509093505050505b919050565b6001543410156102b5576040517f688e55ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008581526003602052604090206102cd8582610aa1565b506000858152600360208181526040808420600180820180546001600160a01b03199081166001600160a01b038c81169190911790925560028085018054339084168117909155865180880188528c851681528b8516818a019081528a8a529690990180548087018255908b529988902089519a909202909101805483169984169990991789559351979092018054909216961695909517909455805193845290830188905290917f46fa9a723fb10fd3c406ccd6c5678d81c1caa828ca12496afbfea32fc89287e2910160405180910390a1505050505050565b6103b0610694565b6103ba60006106ee565b565b6002602052600090815260409020805481906103d790610a18565b80601f016020809104026020016040519081016040528092919081815260200182805461040390610a18565b80156104505780601f1061042557610100808354040283529160200191610450565b820191906000526020600020905b81548152906001019060200180831161043357829003601f168201915b50505050600183015460029093015491926001600160a01b039081169216905083565b61047b610694565b60018190556040518181527f87c23b2c855a07ae0f7249c2d4ee1c3e0c65b9f5aa9f4e6fa4193bd4e19e1285906020015b60405180910390a150565b6104bf610694565b6000818152600360205260409020600201546001600160a01b0316610510576040517f86d846fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526003602090815260408083206002909252909120806105348382610b61565b5060018281015490820180546001600160a01b039283166001600160a01b031991821617909155600280850154908401805491909316911617905560038083018054610583928401919061073e565b50505060008181526003602052604081209061059f82826107c2565b6001820180546001600160a01b031990811690915560028301805490911690556105cd6003830160006107fc565b50506040518181527f01eb903cb8df881165c89e0e1fae146b762441fee3e390097368a9e02d041c43906020016104ac565b610607610694565b6001600160a01b0381166106885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610691816106ee565b50565b6000546001600160a01b031633146103ba5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209060020281019282156107b25760005260206000209160020282015b828111156107b257825482546001600160a01b039182166001600160a01b0319918216178455600180860154908501805491909316911617905560029283019290910190610769565b506107be929150610819565b5090565b5080546107ce90610a18565b6000825580601f106107de575050565b601f0160209004906000526020600020908101906106919190610845565b508054600082556002029060005260206000209081019061069191905b5b808211156107be5780546001600160a01b03199081168255600182018054909116905560020161081a565b5b808211156107be5760008155600101610846565b60006020828403121561086c57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461027457600080fd5b600080600080600060a086880312156108b857600080fd5b85359450602086013567ffffffffffffffff808211156108d757600080fd5b818801915088601f8301126108eb57600080fd5b8135818111156108fd576108fd610873565b604051601f8201601f19908116603f0116810190838211818310171561092557610925610873565b816040528281528b602084870101111561093e57600080fd5b82602086016020830137600060208483010152809850505050505061096560408701610889565b925061097360608701610889565b915061098160808701610889565b90509295509295909350565b606081526000845180606084015260005b818110156109bb576020818801810151608086840101520161099e565b506000608082850101526080601f19601f8301168401019150506001600160a01b038085166020840152808416604084015250949350505050565b600060208284031215610a0857600080fd5b610a1182610889565b9392505050565b600181811c90821680610a2c57607f821691505b602082108103610a4c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610a9c57600081815260208120601f850160051c81016020861015610a795750805b601f850160051c820191505b81811015610a9857828155600101610a85565b5050505b505050565b815167ffffffffffffffff811115610abb57610abb610873565b610acf81610ac98454610a18565b84610a52565b602080601f831160018114610b045760008415610aec5750858301515b600019600386901b1c1916600185901b178555610a98565b600085815260208120601f198616915b82811015610b3357888601518255948401946001909101908401610b14565b5085821015610b515787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103610b6c575050565b610b768254610a18565b67ffffffffffffffff811115610b8e57610b8e610873565b610b9c81610ac98454610a18565b6000601f821160018114610bd05760008315610bb85750848201545b600019600385901b1c1916600184901b178455610c35565b600085815260209020601f19841690600086815260209020845b83811015610c0a5782860154825560019586019590910190602001610bea565b5085831015610c285781850154600019600388901b60f8161c191681555b50505060018360011b0184555b505050505056fea26469706673582212203b3a4f8955530fbd66663345a165428b96e671bd89f76547bbf195cb19de482c64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/v0.1/Registry.sol:Registry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5171,
        "contract": "src/v0.1/Registry.sol:Registry",
        "label": "proposeFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5192,
        "contract": "src/v0.1/Registry.sol:Registry",
        "label": "chainRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(L2Endpoint)5187_storage)"
      },
      {
        "astId": 5197,
        "contract": "src/v0.1/Registry.sol:Registry",
        "label": "pendingProposal",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(L2Endpoint)5187_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AggregatorPair)5176_storage)dyn_storage": {
        "base": "t_struct(AggregatorPair)5176_storage",
        "encoding": "dynamic_array",
        "label": "struct Registry.AggregatorPair[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(L2Endpoint)5187_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Registry.L2Endpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(L2Endpoint)5187_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AggregatorPair)5176_storage": {
        "encoding": "inplace",
        "label": "struct Registry.AggregatorPair",
        "members": [
          {
            "astId": 5173,
            "contract": "src/v0.1/Registry.sol:Registry",
            "label": "l1Aggregator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5175,
            "contract": "src/v0.1/Registry.sol:Registry",
            "label": "l2Aggregator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(L2Endpoint)5187_storage": {
        "encoding": "inplace",
        "label": "struct Registry.L2Endpoint",
        "members": [
          {
            "astId": 5178,
            "contract": "src/v0.1/Registry.sol:Registry",
            "label": "jsonRpc",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5180,
            "contract": "src/v0.1/Registry.sol:Registry",
            "label": "endpoint",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5182,
            "contract": "src/v0.1/Registry.sol:Registry",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5186,
            "contract": "src/v0.1/Registry.sol:Registry",
            "label": "aggregatorPair",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(AggregatorPair)5176_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
