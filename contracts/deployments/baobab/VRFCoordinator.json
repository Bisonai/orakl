{
  "address": "0x7cb70669dB89f6d20C47ecF8f010F477722D1E22",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prepayment",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "have",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "want",
          "type": "uint32"
        }
      ],
      "name": "GasLimitTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectCommitment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "have",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "want",
          "type": "uint256"
        }
      ],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "InvalidConsumer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        }
      ],
      "name": "InvalidKeyHash",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCorrespondingRequest",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        }
      ],
      "name": "NoSuchProvingKey",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "have",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "want",
          "type": "uint32"
        }
      ],
      "name": "NumWordsTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        }
      ],
      "name": "ProvingKeyAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrant",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RefundFailure",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier3",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier4",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier5",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier2",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier3",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier4",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier5",
              "type": "uint24"
            }
          ],
          "indexed": false,
          "internalType": "struct VRFCoordinator.FeeConfig",
          "name": "feeConfig",
          "type": "tuple"
        }
      ],
      "name": "ConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fulfillmentFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseFee",
          "type": "uint256"
        }
      ],
      "name": "DirectPaymentConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBalance",
          "type": "uint256"
        }
      ],
      "name": "MinBalanceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "ProvingKeyDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "ProvingKeyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputSeed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "RandomWordsFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preSeed",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDirectPayment",
          "type": "bool"
        }
      ],
      "name": "RandomWordsRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "publicProvingKey",
          "type": "uint256[2]"
        }
      ],
      "name": "deregisterProvingKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDirectPaymentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "pk",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[4]",
              "name": "proof",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "uPoint",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[4]",
              "name": "vComponents",
              "type": "uint256[4]"
            }
          ],
          "internalType": "struct VRF.Proof",
          "name": "proof",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "blockNum",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accId",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numWords",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "internalType": "struct VRFCoordinator.RequestCommitment",
          "name": "rc",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isDirectPayment",
          "type": "bool"
        }
      ],
      "name": "fulfillRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getCommitment",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDirectPaymentConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier2",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier3",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier4",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier5",
          "type": "uint32"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier2",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier3",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier4",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier5",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "reqCount",
          "type": "uint64"
        }
      ],
      "name": "getFeeTier",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrepaymentAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "publicKey",
          "type": "uint256[2]"
        }
      ],
      "name": "hashOfKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "pendingRequestExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "uint256[2]",
          "name": "publicProvingKey",
          "type": "uint256[2]"
        }
      ],
      "name": "registerProvingKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "requestRandomWordsPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_minBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier3",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier4",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier5",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier2",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier3",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier4",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier5",
              "type": "uint24"
            }
          ],
          "internalType": "struct VRFCoordinator.FeeConfig",
          "name": "feeConfig",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fulfillmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct VRFCoordinator.DirectPaymentConfig",
          "name": "directPaymentConfig",
          "type": "tuple"
        }
      ],
      "name": "setDirectPaymentConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minBalance",
          "type": "uint256"
        }
      ],
      "name": "setMinBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typeAndVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x37850c78ed55ebd7857f463293b4f9c309d61f4fdeeac9eb0f195ca1e4b9b510",
  "receipt": {
    "to": null,
    "from": "0xAe3d14Ed2B8a0B71D05DEF51baBfAeFBcE33054d",
    "contractAddress": "0x7cb70669dB89f6d20C47ecF8f010F477722D1E22",
    "transactionIndex": 0,
    "gasUsed": "4599649",
    "logsBloom": "0x
    "blockHash": "0xf7737cd732420c7315a3db72525170a2396d3cc9630dba61a14fdc3d1d1baca5",
    "transactionHash": "0x37850c78ed55ebd7857f463293b4f9c309d61f4fdeeac9eb0f195ca1e4b9b510",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 114253984,
        "transactionHash": "0x37850c78ed55ebd7857f463293b4f9c309d61f4fdeeac9eb0f195ca1e4b9b510",
        "address": "0x7cb70669dB89f6d20C47ecF8f010F477722D1E22",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae3d14ed2b8a0b71d05def51babfaefbce33054d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf7737cd732420c7315a3db72525170a2396d3cc9630dba61a14fdc3d1d1baca5"
      }
    ],
    "blockNumber": 114253984,
    "cumulativeGasUsed": "4599649",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE22e67F7ce4b6FA9E3ABCB6125Fb53Cb577B34Ef"
  ],
  "numDeployments": 1,
  "solcInputHash": "fa56e8cc296933aafbed3a3276231c2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prepayment\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"have\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"want\",\"type\":\"uint32\"}],\"name\":\"GasLimitTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectCommitment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"have\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"want\",\"type\":\"uint256\"}],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidKeyHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCorrespondingRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"NoSuchProvingKey\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"have\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"want\",\"type\":\"uint32\"}],\"name\":\"NumWordsTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"ProvingKeyAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailure\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"struct VRFCoordinator.FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fulfillmentFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"name\":\"DirectPaymentConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"}],\"name\":\"MinBalanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"ProvingKeyDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"ProvingKeyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDirectPayment\",\"type\":\"bool\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicProvingKey\",\"type\":\"uint256[2]\"}],\"name\":\"deregisterProvingKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDirectPaymentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"pk\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"proof\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"uPoint\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"vComponents\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct VRF.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"internalType\":\"struct VRFCoordinator.RequestCommitment\",\"name\":\"rc\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isDirectPayment\",\"type\":\"bool\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDirectPaymentConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"}],\"name\":\"getFeeTier\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrepaymentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"hashOfKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"publicProvingKey\",\"type\":\"uint256[2]\"}],\"name\":\"registerProvingKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWordsPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_minBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"internalType\":\"struct VRFCoordinator.FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fulfillmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"internalType\":\"struct VRFCoordinator.DirectPaymentConfig\",\"name\":\"directPaymentConfig\",\"type\":\"tuple\"}],\"name\":\"setDirectPaymentConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"}],\"name\":\"setMinBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deregisterProvingKey(uint256[2])\":{\"params\":{\"publicProvingKey\":\"key that oracle can use to submit VRF fulfillments\"}},\"getCommitment(uint256)\":{\"details\":\"used to determine if a request is fulfilled or not\",\"params\":{\"requestId\":\"id of request\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"maxGasLimit global max for request gas limit\",\"_1\":\"s_provingKeyHashes list of registered key hashes\"}},\"hashOfKey(uint256[2])\":{\"params\":{\"publicKey\":\"the key to return the hash of\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingRequestExists(address,uint64,uint64)\":{\"params\":{\"accId\":\"- ID of the account\"},\"returns\":{\"_0\":\"true if there exists at least one unfulfilled request for the account, false otherwise.\"}},\"registerProvingKey(address,uint256[2])\":{\"params\":{\"oracle\":\"address of the oracle\",\"publicProvingKey\":\"key that oracle can use to submit VRF fulfillments\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestRandomWords(bytes32,uint64,uint32,uint32)\":{\"params\":{\"accId\":\"- The ID of the account. Must be funded with the minimum account balance required for the selected keyHash.\",\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))\":{\"params\":{\"feeConfig\":\"fee tier configuration\",\"gasAfterPaymentCalculation\":\"gas used in doing accounting after completing the gas measurement\",\"maxGasLimit\":\"global max for request gas limit\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"typeAndVersion()\":{\"returns\":{\"_0\":\"Type and version string\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deregisterProvingKey(uint256[2])\":{\"notice\":\"Deregisters a proving key to an oracle.\"},\"getCommitment(uint256)\":{\"notice\":\"Get request commitment\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"hashOfKey(uint256[2])\":{\"notice\":\"Returns the proving key hash key associated with this public key\"},\"pendingRequestExists(address,uint64,uint64)\":{\"notice\":\"Check to see if there exists a request commitment consumers for all consumers and keyhashes for a given acc.\"},\"registerProvingKey(address,uint256[2])\":{\"notice\":\"Registers a proving key to an oracle.\"},\"requestRandomWords(bytes32,uint64,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))\":{\"notice\":\"Sets the configuration of the VRF coordinator\"},\"typeAndVersion()\":{\"notice\":\"The type and version of this contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/VRFCoordinator.sol\":\"VRFCoordinator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/v0.1/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFConsumerBaseV2.sol\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create account, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev account management functions).\\n * @dev Call requestRandomWords(keyHash, accId,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomWords method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomWords method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomWords method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomWords\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBase {\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    address private immutable vrfCoordinator;\\n\\n    /**\\n     * @param _vrfCoordinator address of VRFCoordinator contract\\n     */\\n    constructor(address _vrfCoordinator) {\\n        vrfCoordinator = _vrfCoordinator;\\n    }\\n\\n    /**\\n     * @notice fulfillRandomWords handles the VRF response. Your contract must\\n     * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n     * @notice principles to keep in mind when implementing your fulfillRandomWords\\n     * @notice method.\\n     *\\n     * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n     * @dev signature, and will call it once it has verified the proof\\n     * @dev associated with the randomness. (It is triggered via a call to\\n     * @dev rawFulfillRandomWords, below.)\\n     *\\n     * @param requestId The Id initially returned by requestRandomWords\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n    /**\\n     * @notice rawFulfillRandomWords is called by VRFCoordinator when it\\n     * @notice receives a valid VRF proof. rawFulfillRandomWords then calls\\n     * @notice fulfillRandomWords, after validating the origin of the call\\n     *\\n     * @param requestId The Id initially returned by requestRandomWords\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n        if (msg.sender != vrfCoordinator) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n        }\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n}\\n\",\"keccak256\":\"0x8f25cf557237f53059663038b409a6a09210710ebc86bed6f416d418c02f6425\",\"license\":\"MIT\"},\"src/v0.1/VRFCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFCoordinatorV2.sol\\n\\nimport \\\"./interfaces/CoordinatorBaseInterface.sol\\\";\\nimport \\\"./interfaces/PrepaymentInterface.sol\\\";\\nimport \\\"./interfaces/TypeAndVersionInterface.sol\\\";\\nimport \\\"./interfaces/VRFCoordinatorInterface.sol\\\";\\nimport \\\"./libraries/VRF.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./VRFConsumerBase.sol\\\";\\n\\ncontract VRFCoordinator is\\n    CoordinatorBaseInterface,\\n    Ownable,\\n    TypeAndVersionInterface,\\n    VRFCoordinatorInterface\\n{\\n    uint32 public constant MAX_NUM_WORDS = 500;\\n    // 5k is plenty for an EXTCODESIZE call (2600) + warm CALL (100)\\n    // and some arithmetic operations.\\n    uint256 private constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n\\n    bytes32[] private s_provingKeyHashes;\\n\\n    /* keyHash */\\n    /* oracle */\\n    mapping(bytes32 => address) private s_provingKeys;\\n\\n    /* requestID */\\n    /* commitment */\\n    mapping(uint256 => bytes32) private s_requestCommitments;\\n\\n    uint256 public s_minBalance;\\n\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint64 accId;\\n        uint32 callbackGasLimit;\\n        uint32 numWords;\\n        address sender;\\n    }\\n\\n    struct Config {\\n        uint32 maxGasLimit;\\n        // Reentrancy protection.\\n        bool reentrancyLock;\\n        // Gas to cover oracle payment after we calculate the payment.\\n        // We make it configurable in case those operations are repriced.\\n        uint32 gasAfterPaymentCalculation;\\n    }\\n    Config private s_config;\\n\\n    struct FeeConfig {\\n        // Flat fee charged per fulfillment in millionths of KLAY\\n        // So fee range is [0, 2^32/10^6].\\n        uint32 fulfillmentFlatFeeKlayPPMTier1;\\n        uint32 fulfillmentFlatFeeKlayPPMTier2;\\n        uint32 fulfillmentFlatFeeKlayPPMTier3;\\n        uint32 fulfillmentFlatFeeKlayPPMTier4;\\n        uint32 fulfillmentFlatFeeKlayPPMTier5;\\n        uint24 reqsForTier2;\\n        uint24 reqsForTier3;\\n        uint24 reqsForTier4;\\n        uint24 reqsForTier5;\\n    }\\n    FeeConfig private s_feeConfig;\\n\\n    PrepaymentInterface s_prepayment;\\n\\n    struct DirectPaymentConfig {\\n        uint256 fulfillmentFee;\\n        uint256 baseFee;\\n    }\\n\\n    DirectPaymentConfig s_directPaymentConfig;\\n\\n    error InvalidKeyHash(bytes32 keyHash);\\n    error InvalidConsumer(uint64 accId, address consumer);\\n    error InvalidAccount();\\n    error GasLimitTooBig(uint32 have, uint32 want);\\n    error NumWordsTooBig(uint32 have, uint32 want);\\n    error ProvingKeyAlreadyRegistered(bytes32 keyHash);\\n    error NoSuchProvingKey(bytes32 keyHash);\\n    error NoCorrespondingRequest();\\n    error IncorrectCommitment();\\n    error Reentrant();\\n    error InsufficientPayment(uint256 have, uint256 want);\\n    error RefundFailure();\\n\\n    event ProvingKeyRegistered(bytes32 keyHash, address indexed oracle);\\n    event ProvingKeyDeregistered(bytes32 keyHash, address indexed oracle);\\n    event RandomWordsRequested(\\n        bytes32 indexed keyHash,\\n        uint256 requestId,\\n        uint256 preSeed,\\n        uint64 indexed accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords,\\n        address indexed sender,\\n        bool isDirectPayment\\n    );\\n    event RandomWordsFulfilled(\\n        uint256 indexed requestId,\\n        uint256 outputSeed,\\n        uint256 payment,\\n        bool success\\n    );\\n    event ConfigSet(uint32 maxGasLimit, uint32 gasAfterPaymentCalculation, FeeConfig feeConfig);\\n    event DirectPaymentConfigSet(uint256 fulfillmentFee, uint256 baseFee);\\n    event MinBalanceSet(uint256 minBalance);\\n\\n    modifier nonReentrant() {\\n        if (s_config.reentrancyLock) {\\n            revert Reentrant();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyValidKeyHash(bytes32 keyHash) {\\n        if (s_provingKeys[keyHash] == address(0)) {\\n            revert InvalidKeyHash(keyHash);\\n        }\\n        _;\\n    }\\n\\n    constructor(address prepayment) {\\n        s_prepayment = PrepaymentInterface(prepayment);\\n    }\\n\\n    /**\\n     * @notice Registers a proving key to an oracle.\\n     * @param oracle address of the oracle\\n     * @param publicProvingKey key that oracle can use to submit VRF fulfillments\\n     */\\n    function registerProvingKey(\\n        address oracle,\\n        uint256[2] calldata publicProvingKey\\n    ) external onlyOwner {\\n        bytes32 kh = hashOfKey(publicProvingKey);\\n        if (s_provingKeys[kh] != address(0)) {\\n            revert ProvingKeyAlreadyRegistered(kh);\\n        }\\n        s_provingKeys[kh] = oracle;\\n        s_provingKeyHashes.push(kh);\\n        emit ProvingKeyRegistered(kh, oracle);\\n    }\\n\\n    /**\\n     * @notice Deregisters a proving key to an oracle.\\n     * @param publicProvingKey key that oracle can use to submit VRF fulfillments\\n     */\\n    function deregisterProvingKey(uint256[2] calldata publicProvingKey) external onlyOwner {\\n        bytes32 kh = hashOfKey(publicProvingKey);\\n        address oracle = s_provingKeys[kh];\\n        if (oracle == address(0)) {\\n            revert NoSuchProvingKey(kh);\\n        }\\n        delete s_provingKeys[kh];\\n        for (uint256 i = 0; i < s_provingKeyHashes.length; i++) {\\n            if (s_provingKeyHashes[i] == kh) {\\n                bytes32 last = s_provingKeyHashes[s_provingKeyHashes.length - 1];\\n                // Copy last element and overwrite kh to be deleted with it\\n                s_provingKeyHashes[i] = last;\\n                s_provingKeyHashes.pop();\\n                break;\\n            }\\n        }\\n        emit ProvingKeyDeregistered(kh, oracle);\\n    }\\n\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting after completing the gas measurement\\n     * @param feeConfig fee tier configuration\\n     */\\n    function setConfig(\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        FeeConfig memory feeConfig\\n    ) external onlyOwner {\\n        s_config = Config({\\n            maxGasLimit: maxGasLimit,\\n            gasAfterPaymentCalculation: gasAfterPaymentCalculation,\\n            reentrancyLock: false\\n        });\\n        s_feeConfig = feeConfig;\\n        emit ConfigSet(maxGasLimit, gasAfterPaymentCalculation, s_feeConfig);\\n    }\\n\\n    function getConfig()\\n        external\\n        view\\n        returns (uint32 maxGasLimit, uint32 gasAfterPaymentCalculation)\\n    {\\n        return (s_config.maxGasLimit, s_config.gasAfterPaymentCalculation);\\n    }\\n\\n    function getFeeConfig()\\n        external\\n        view\\n        returns (\\n            uint32 fulfillmentFlatFeeKlayPPMTier1,\\n            uint32 fulfillmentFlatFeeKlayPPMTier2,\\n            uint32 fulfillmentFlatFeeKlayPPMTier3,\\n            uint32 fulfillmentFlatFeeKlayPPMTier4,\\n            uint32 fulfillmentFlatFeeKlayPPMTier5,\\n            uint24 reqsForTier2,\\n            uint24 reqsForTier3,\\n            uint24 reqsForTier4,\\n            uint24 reqsForTier5\\n        )\\n    {\\n        return (\\n            s_feeConfig.fulfillmentFlatFeeKlayPPMTier1,\\n            s_feeConfig.fulfillmentFlatFeeKlayPPMTier2,\\n            s_feeConfig.fulfillmentFlatFeeKlayPPMTier3,\\n            s_feeConfig.fulfillmentFlatFeeKlayPPMTier4,\\n            s_feeConfig.fulfillmentFlatFeeKlayPPMTier5,\\n            s_feeConfig.reqsForTier2,\\n            s_feeConfig.reqsForTier3,\\n            s_feeConfig.reqsForTier4,\\n            s_feeConfig.reqsForTier5\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorInterface\\n     */\\n    function getRequestConfig() external view returns (uint32, bytes32[] memory) {\\n        return (s_config.maxGasLimit, s_provingKeyHashes);\\n    }\\n\\n    function setDirectPaymentConfig(\\n        DirectPaymentConfig memory directPaymentConfig\\n    ) public onlyOwner {\\n        s_directPaymentConfig = directPaymentConfig;\\n        emit DirectPaymentConfigSet(\\n            directPaymentConfig.fulfillmentFee,\\n            directPaymentConfig.baseFee\\n        );\\n    }\\n\\n    function getDirectPaymentConfig() external view returns (uint256, uint256) {\\n        return (s_directPaymentConfig.fulfillmentFee, s_directPaymentConfig.baseFee);\\n    }\\n\\n    function estimateDirectPaymentFee() public view returns (uint256) {\\n        return s_directPaymentConfig.fulfillmentFee + s_directPaymentConfig.baseFee;\\n    }\\n\\n    function getPrepaymentAddress() public view returns (address) {\\n        return address(s_prepayment);\\n    }\\n\\n    /**\\n     * @notice Get request commitment\\n     * @param requestId id of request\\n     * @dev used to determine if a request is fulfilled or not\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32) {\\n        return s_requestCommitments[requestId];\\n    }\\n\\n    function setMinBalance(uint256 minBalance) public onlyOwner {\\n        s_minBalance = minBalance;\\n        emit MinBalanceSet(minBalance);\\n    }\\n\\n    /*\\n     * @notice Fulfill a randomness request\\n     * @param proof contains the proof and randomness\\n     * @param rc request commitment pre-image, committed to at request time\\n     * @return payment amount billed to the account\\n     * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\\n     */\\n    function fulfillRandomWords(\\n        VRF.Proof memory proof,\\n        RequestCommitment memory rc,\\n        bool isDirectPayment\\n    ) external nonReentrant returns (uint256) {\\n        uint256 startGas = gasleft();\\n        (bytes32 keyHash, uint256 requestId, uint256 randomness) = getRandomnessFromProof(\\n            proof,\\n            rc\\n        );\\n\\n        uint256[] memory randomWords = new uint256[](rc.numWords);\\n        for (uint256 i = 0; i < rc.numWords; i++) {\\n            randomWords[i] = uint256(keccak256(abi.encode(randomness, i)));\\n        }\\n\\n        delete s_requestCommitments[requestId];\\n        VRFConsumerBase v;\\n        bytes memory resp = abi.encodeWithSelector(\\n            v.rawFulfillRandomWords.selector,\\n            requestId,\\n            randomWords\\n        );\\n\\n        // Call with explicitly the amount of callback gas requested\\n        // Important to not let them exhaust the gas budget and avoid oracle payment.\\n        // Do not allow any non-view/non-pure coordinator functions to be called\\n        // during the consumers callback code via reentrancyLock.\\n        // Note that callWithExactGas will revert if we do not have sufficient gas\\n        // to give the callee their requested amount.\\n        s_config.reentrancyLock = true;\\n        bool success = callWithExactGas(rc.callbackGasLimit, rc.sender, resp);\\n        s_config.reentrancyLock = false;\\n\\n        // We want to charge users exactly for how much gas they use in their callback.\\n        // The gasAfterPaymentCalculation is meant to cover these additional operations where we\\n        // decrement the account balance and increment the oracles withdrawable balance.\\n        // We also add the flat KLAY fee to the payment amount.\\n        // Its specified in millionths of KLAY, if s_config.fulfillmentFlatFeeKlayPPM = 1\\n        // 1 KLAY / 1e6 = 1e18 pebs / 1e6 = 1e12 pebs.\\n        (uint256 balance, uint64 reqCount, , ) = s_prepayment.getAccount(rc.accId);\\n\\n        uint256 payment;\\n        if (isDirectPayment) {\\n            payment = balance;\\n        } else {\\n            payment = calculatePaymentAmount(\\n                startGas,\\n                s_config.gasAfterPaymentCalculation,\\n                getFeeTier(reqCount)\\n            );\\n        }\\n\\n        s_prepayment.chargeFee(rc.accId, payment, s_provingKeys[keyHash]);\\n\\n        // FIXME\\n        //s_withdrawableTokens[s_provingKeys[rc.keyHash]] += payment;\\n\\n        // Include payment in the event for tracking costs.\\n        emit RandomWordsFulfilled(requestId, randomness, payment, success);\\n        return payment;\\n    }\\n\\n    /**\\n     * @notice The type and version of this contract\\n     * @return Type and version string\\n     */\\n    function typeAndVersion() external pure virtual override returns (string memory) {\\n        return \\\"VRFCoordinator v0.1\\\";\\n    }\\n\\n    /*\\n     * @notice Compute fee based on the request count\\n     * @param reqCount number of requests\\n     * @return feePPM fee in KLAY PPM\\n     */\\n    function getFeeTier(uint64 reqCount) public view returns (uint32) {\\n        FeeConfig memory fc = s_feeConfig;\\n        if (0 <= reqCount && reqCount <= fc.reqsForTier2) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier1;\\n        }\\n        if (fc.reqsForTier2 < reqCount && reqCount <= fc.reqsForTier3) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier2;\\n        }\\n        if (fc.reqsForTier3 < reqCount && reqCount <= fc.reqsForTier4) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier3;\\n        }\\n        if (fc.reqsForTier4 < reqCount && reqCount <= fc.reqsForTier5) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier4;\\n        }\\n        return fc.fulfillmentFlatFeeKlayPPMTier5;\\n    }\\n\\n    /**\\n     * @inheritdoc CoordinatorBaseInterface\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) public view returns (bool) {\\n        for (uint256 i = 0; i < s_provingKeyHashes.length; i++) {\\n            (uint256 reqId, ) = computeRequestId(s_provingKeyHashes[i], consumer, accId, nonce);\\n            if (s_requestCommitments[reqId] != 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns the proving key hash key associated with this public key\\n     * @param publicKey the key to return the hash of\\n     */\\n    function hashOfKey(uint256[2] memory publicKey) public pure returns (bytes32) {\\n        return keccak256(abi.encode(publicKey));\\n    }\\n\\n    function requestRandomWordsInternal(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords,\\n        bool isDirectPayment\\n    ) internal returns (uint256) {\\n        // Input validation using the account storage.\\n        // call to prepayment contract\\n        address owner = s_prepayment.getAccountOwner(accId);\\n        if (owner == address(0)) {\\n            revert InvalidAccount();\\n        }\\n\\n        // Its important to ensure that the consumer is in fact who they say they\\n        // are, otherwise they could use someone else's account balance.\\n        // A nonce of 0 indicates consumer is not allocated to the acc.\\n        uint64 currentNonce = s_prepayment.getNonce(msg.sender, accId);\\n        if (currentNonce == 0) {\\n            revert InvalidConsumer(accId, msg.sender);\\n        }\\n\\n        // No lower bound on the requested gas limit. A user could request 0\\n        // and they would simply be billed for the proof verification and wouldn't be\\n        // able to do anything with the random value.\\n        if (callbackGasLimit > s_config.maxGasLimit) {\\n            revert GasLimitTooBig(callbackGasLimit, s_config.maxGasLimit);\\n        }\\n\\n        if (numWords > MAX_NUM_WORDS) {\\n            revert NumWordsTooBig(numWords, MAX_NUM_WORDS);\\n        }\\n\\n        uint64 nonce = s_prepayment.increaseNonce(msg.sender, accId);\\n        (uint256 requestId, uint256 preSeed) = computeRequestId(keyHash, msg.sender, accId, nonce);\\n\\n        s_requestCommitments[requestId] = keccak256(\\n            abi.encode(requestId, block.number, accId, callbackGasLimit, numWords, msg.sender)\\n        );\\n        emit RandomWordsRequested(\\n            keyHash,\\n            requestId,\\n            preSeed,\\n            accId,\\n            callbackGasLimit,\\n            numWords,\\n            msg.sender,\\n            isDirectPayment\\n        );\\n\\n        return requestId;\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorInterface\\n     */\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external nonReentrant onlyValidKeyHash(keyHash) returns (uint256 requestId) {\\n        (uint256 balance, , , ) = s_prepayment.getAccount(accId);\\n\\n        if (balance < s_minBalance) {\\n            revert InsufficientPayment(balance, s_minBalance);\\n        }\\n        bool isDirectPayment = false;\\n\\n        requestId = requestRandomWordsInternal(\\n            keyHash,\\n            accId,\\n            callbackGasLimit,\\n            numWords,\\n            isDirectPayment\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorInterface\\n     */\\n    function requestRandomWordsPayment(\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external payable nonReentrant onlyValidKeyHash(keyHash) returns (uint256) {\\n        uint256 vrfFee = estimateDirectPaymentFee();\\n        if (msg.value < vrfFee) {\\n            revert InsufficientPayment(msg.value, vrfFee);\\n        }\\n\\n        uint64 accId = s_prepayment.createAccount();\\n        s_prepayment.addConsumer(accId, msg.sender);\\n        bool isDirectPayment = true;\\n        uint256 requestId = requestRandomWordsInternal(\\n            keyHash,\\n            accId,\\n            callbackGasLimit,\\n            numWords,\\n            isDirectPayment\\n        );\\n        s_prepayment.deposit{value: vrfFee}(accId);\\n\\n        uint256 remaining = msg.value - vrfFee;\\n        if (remaining > 0) {\\n            (bool sent, ) = msg.sender.call{value: remaining}(\\\"\\\");\\n            if (!sent) {\\n                revert RefundFailure();\\n            }\\n        }\\n\\n        return requestId;\\n    }\\n\\n    function calculatePaymentAmount(\\n        uint256 startGas,\\n        uint256 gasAfterPaymentCalculation,\\n        uint32 fulfillmentFlatFeeKlayPPM\\n    ) internal view returns (uint256) {\\n        uint256 paymentNoFee = tx.gasprice * (gasAfterPaymentCalculation + startGas - gasleft());\\n        uint256 fee = 1e12 * uint256(fulfillmentFlatFeeKlayPPM);\\n        return paymentNoFee + fee;\\n    }\\n\\n    function computeRequestId(\\n        bytes32 keyHash,\\n        address sender,\\n        uint64 accId,\\n        uint64 nonce\\n    ) private pure returns (uint256, uint256) {\\n        uint256 preSeed = uint256(keccak256(abi.encode(keyHash, sender, accId, nonce)));\\n        return (uint256(keccak256(abi.encode(keyHash, preSeed))), preSeed);\\n    }\\n\\n    /**\\n     * @dev calls target address with exactly gasAmount gas and data as calldata\\n     * or reverts if at least gasAmount gas is not available.\\n     */\\n    function callWithExactGas(\\n        uint256 gasAmount,\\n        address target,\\n        bytes memory data\\n    ) private returns (bool success) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let g := gas()\\n            // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\\n            // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\\n            // We want to ensure that we revert if gasAmount >  63//64*gas available\\n            // as we do not want to provide them with less, however that check itself costs\\n            // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\\n            // to revert if gasAmount >  63//64*gas available.\\n            if lt(g, GAS_FOR_CALL_EXACT_CHECK) {\\n                revert(0, 0)\\n            }\\n            g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\\n            // if g - g//64 <= gasAmount, revert\\n            // (we subtract g//64 because of EIP-150)\\n            if iszero(gt(sub(g, div(g, 64)), gasAmount)) {\\n                revert(0, 0)\\n            }\\n            // solidity calls check that a contract actually exists at the destination, so we do the same\\n            if iszero(extcodesize(target)) {\\n                revert(0, 0)\\n            }\\n            // call and return whether we succeeded. ignore return data\\n            // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n            success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\\n        }\\n        return success;\\n    }\\n\\n    function getRandomnessFromProof(\\n        VRF.Proof memory proof,\\n        RequestCommitment memory rc\\n    ) private view returns (bytes32 keyHash, uint256 requestId, uint256 randomness) {\\n        keyHash = hashOfKey(proof.pk);\\n        // Only registered proving keys are permitted.\\n        address oracle = s_provingKeys[keyHash];\\n        if (oracle == address(0)) {\\n            revert NoSuchProvingKey(keyHash);\\n        }\\n        requestId = uint256(keccak256(abi.encode(keyHash, proof.seed)));\\n        bytes32 commitment = s_requestCommitments[requestId];\\n        if (commitment == 0) {\\n            revert NoCorrespondingRequest();\\n        }\\n        if (\\n            commitment !=\\n            keccak256(\\n                abi.encode(\\n                    requestId,\\n                    rc.blockNum,\\n                    rc.accId,\\n                    rc.callbackGasLimit,\\n                    rc.numWords,\\n                    rc.sender\\n                )\\n            )\\n        ) {\\n            revert IncorrectCommitment();\\n        }\\n\\n        bytes32 blockHash = blockhash(rc.blockNum);\\n\\n        // The seed actually used by the VRF machinery, mixing in the blockhash\\n        bytes memory actualSeed = abi.encodePacked(\\n            keccak256(abi.encodePacked(proof.seed, blockHash))\\n        );\\n        randomness = VRF.randomValueFromVRFProof(proof, actualSeed); // Reverts on failure\\n    }\\n}\\n\",\"keccak256\":\"0x5b72882642b9c608457cff5228da1ec1c55d6a56bc9f1ae752b89f0a41ec68e0\",\"license\":\"MIT\"},\"src/v0.1/interfaces/CoordinatorBaseInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface CoordinatorBaseInterface {\\n    /**\\n     * @notice Check to see if there exists a request commitment consumers\\n     * for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request for the account, false\\n     * otherwise.\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x227416dfeab97173d5bbf25a60f6e8012bade3381b575a2ea0d923c04b88a2be\",\"license\":\"MIT\"},\"src/v0.1/interfaces/PrepaymentInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface PrepaymentInterface {\\n    /**\\n     * @notice Return total amount of KLAY held in contract.\\n     * @return balance - A unique account id.\\n     */\\n    function getTotalBalance() external returns (uint256);\\n\\n    /**\\n     * @notice Get an account.\\n     * @param accId - ID of the account\\n     * @return balance - KLAY balance of the account in juels.\\n     * @return reqCount - number of requests for this account, determines fee tier.\\n     * @return owner - owner of the account.\\n     * @return consumers - list of consumer address which are able to use this account.\\n     */\\n    function getAccount(uint64 accId) external view\\n        returns (uint256 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n    /**\\n     * @notice Create an account.\\n     * @return accId - A unique account id.\\n     * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n     * @dev Note to fund the account, use deposit function.\\n     */\\n    function createAccount() external returns (uint64);\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @param accId - ID of the account\\n     * @param newOwner - proposed new owner of the account\\n     */\\n    function requestAccountOwnerTransfer(uint64 accId, address newOwner) external;\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @param accId - ID of the account\\n     * @dev will revert if original owner of accId has\\n     * not requested that msg.sender become the new owner.\\n     */\\n    function acceptAccountOwnerTransfer(uint64 accId) external;\\n\\n    /**\\n     * @notice Remove a consumer from a account.\\n     * @param accId - ID of the account\\n     * @param consumer - Consumer to remove from the account\\n     */\\n    function removeConsumer(uint64 accId, address consumer) external;\\n\\n    /**\\n     * @notice Add a consumer to an account.\\n     * @param accId - ID of the account\\n     * @param consumer - New consumer which can use the account\\n     */\\n    function addConsumer(uint64 accId, address consumer) external;\\n\\n    /**\\n     * @notice Cancel account\\n     * @param accId - ID of the account\\n     * @param to - Where to send the remaining KLAY to\\n     */\\n    function cancelAccount(uint64 accId, address to) external;\\n\\n    /**\\n     * @notice Deposit KLAY to account.\\n     * @notice Anybody can deposit KLAY, there are no restrictions.\\n     * @param accId - ID of the account\\n     */\\n    function deposit(uint64 accId) payable external;\\n\\n    /**\\n     * @notice Withdraw KLAY from account.\\n     * @notice Only account owner can withdraw KLAY.\\n     * @param accId - ID of the account\\n     * @param amount - KLAY amount to be withdrawn\\n     */\\n    function withdraw(uint64 accId, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw funds stored in contract.\\n     * @notice Can be executed only by WITHDRAWER_ROLE.\\n     * @param amount - KLAY amount to be withdrawn\\n     */\\n    function nodeWithdraw(uint256 amount) external;\\n\\n    /**\\n     * @notice Charge fee from service connected to account.\\n     * @param accId - ID of the account\\n     * @param amount - KLAY amount to be charged\\n     */\\n    function chargeFee(uint64 accId, uint256 amount,address node) external;\\n\\n    /**\\n     * @notice Return nonce value.\\n     * @param consumer - Address of consumer registered under accId\\n     * @param accId - ID of the account\\n     */\\n    function getNonce(address consumer, uint64 accId) external view returns (uint64);\\n\\n    /**\\n     * @notice Increase nonce for consumer registered under accId.\\n     * @param consumer - Address of consumer registered under accId\\n     * @param accId - ID of the account\\n     */\\n    function increaseNonce(address consumer, uint64 accId) external returns (uint64);\\n\\n    /**\\n     * @notice Get address of account owner.\\n     * @param accId - ID of the account\\n     */\\n    function getAccountOwner(uint64 accId) external returns (address owner);\\n\\n    /*\\n     * @notice Check to see if there exists a request commitment consumers\\n     * for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request for the account, false\\n     * otherwise.\\n     */\\n    function pendingRequestExists(uint64 accId) external view returns (bool);\\n\\n    /*\\n     * @notice Add coordinator to be able to charge using Prepayment method.\\n     * @param coordinator - address of coordinator\\n     */\\n    function addCoordinator(address coordinator) external;\\n\\n    /*\\n     * @notice Block coordinator from using Prepayment method.\\n     * @param coordinator - address of coordinator\\n     */\\n    function removeCoordinator(address coordinator) external;\\n}\\n\",\"keccak256\":\"0x20d9e215526e15f693b1330e3c3e09b4c8ff8c7fd42a34e73df3f5319f6060f1\",\"license\":\"MIT\"},\"src/v0.1/interfaces/TypeAndVersionInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol\\n\\nabstract contract TypeAndVersionInterface {\\n  function typeAndVersion() external pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x349822ac8c316553c2333fffc540be585de77beaec54b32476c2ac56b1c5bfa8\",\"license\":\"MIT\"},\"src/v0.1/interfaces/VRFCoordinatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface VRFCoordinatorInterface {\\n    /**\\n     * @notice Get configuration relevant for making requests\\n     * @return maxGasLimit global max for request gas limit\\n     * @return s_provingKeyHashes list of registered key hashes\\n     */\\n    function getRequestConfig() external view returns (uint32, bytes32[] memory);\\n\\n    /**\\n     * @notice Request a set of random words.\\n     * @param keyHash - Corresponds to a particular oracle job which uses\\n     * that key for generating the VRF proof. Different keyHash's have different gas price\\n     * ceilings, so you can select a specific one to bound your maximum per request cost.\\n     * @param accId  - The ID of the account. Must be funded\\n     * with the minimum account balance required for the selected keyHash.\\n     * @param callbackGasLimit - How much gas you'd like to receive in your\\n     * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n     * may be slightly less than this amount because of gas used calling the function\\n     * (argument decoding etc.), so you may need to request slightly more than you expect\\n     * to have inside fulfillRandomWords. The acceptable range is\\n     * [0, maxGasLimit]\\n     * @param numWords - The number of uint256 random values you'd like to receive\\n     * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n     * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n     * @return requestId - A unique identifier of the request. Can be used to match\\n     * a request to a response in fulfillRandomWords.\\n     */\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external returns (uint256 requestId);\\n\\n    function requestRandomWordsPayment(\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external payable returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0xdb9550e2f272d270587a27052e22c29bb544eaacbc9a676cc35f1d8160bfe7ee\",\"license\":\"MIT\"},\"src/v0.1/libraries/VRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n// https://github.com/KenshiTech/vrf-consumer/blob/master/contracts/lib/VRF.sol\\n\\nimport \\\"./ecc/EllipticCurve.sol\\\";\\n\\n/**\\n * @title Verifiable Random Functions (VRF)\\n * @notice Library verifying VRF proofs using the `Secp256k1` curve and the `SHA256` hash function.\\n * @dev This library follows the algorithms described in [VRF-draft-10](https://tools.ietf.org/pdf/draft-irtf-cfrg-vrf-10) and [RFC6979](https://tools.ietf.org/html/rfc6979).\\n * It supports the _SECP256K1_SHA256_TAI_ cipher suite, i.e. the aforementioned algorithms using `SHA256` and the `Secp256k1` curve.\\n * @author Witnet Foundation / Kenshi\\n */\\nlibrary VRF {\\n    /**\\n     * Secp256k1 parameters\\n     */\\n\\n    // Generator coordinate `x` of the EC curve\\n    uint256 public constant GX =\\n        0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;\\n    // Generator coordinate `y` of the EC curve\\n    uint256 public constant GY =\\n        0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;\\n    // Constant `a` of EC equation\\n    uint256 public constant AA = 0;\\n    // Constant `b` of EC equation\\n    uint256 public constant BB = 7;\\n    // Prime number of the curve\\n    uint256 public constant PP =\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\\n    // Order of the curve\\n    uint256 public constant NN =\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n\\n  struct Proof {\\n    uint256[2] pk;\\n    uint256[4] proof;\\n    uint256 seed;\\n    uint256[2] uPoint;\\n    uint256[4] vComponents;\\n  }\\n\\n    /// @dev Public key derivation from private key.\\n    /// Warning: this function should not be used to derive your public key as it would expose the private key.\\n    /// @param _d The scalar\\n    /// @param _x The coordinate x\\n    /// @param _y The coordinate y\\n    /// @return (qx, qy) The derived point\\n    function derivePoint(\\n        uint256 _d,\\n        uint256 _x,\\n        uint256 _y\\n    ) internal pure returns (uint256, uint256) {\\n        return EllipticCurve.ecMul(_d, _x, _y, AA, PP);\\n    }\\n\\n    /// @dev Function to derive the `y` coordinate given the `x` coordinate and the parity byte (`0x03` for odd `y` and `0x04` for even `y`).\\n    /// @param _yByte The parity byte following the ec point compressed format\\n    /// @param _x The coordinate `x` of the point\\n    /// @return The coordinate `y` of the point\\n    function deriveY(uint8 _yByte, uint256 _x) internal pure returns (uint256) {\\n        return EllipticCurve.deriveY(_yByte, _x, AA, BB, PP);\\n    }\\n\\n    /// @dev Computes the VRF hash output as result of the digest of a ciphersuite-dependent prefix\\n    /// concatenated with the gamma point\\n    /// @param _gammaX The x-coordinate of the gamma EC point\\n    /// @param _gammaY The y-coordinate of the gamma EC point\\n    /// @return The VRF hash ouput as shas256 digest\\n    function gammaToHash(uint256 _gammaX, uint256 _gammaY)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory c = abi.encodePacked(\\n            // Cipher suite code (SECP256K1-SHA256-TAI is 0xFE)\\n            uint8(0xFE),\\n            // 0x03\\n            uint8(0x03),\\n            // Compressed Gamma Point\\n            encodePoint(_gammaX, _gammaY),\\n            uint8(0x0)\\n        );\\n\\n        return sha256(c);\\n    }\\n\\n    /// @dev VRF verification by providing the public key, the message and the VRF proof.\\n    /// This function computes several elliptic curve operations which may lead to extensive gas consumption.\\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\\n    /// @param _proof The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\\n    /// @param _message The message (in bytes) used for computing the VRF\\n    /// @return true, if VRF proof is valid\\n    function verify(\\n        uint256[2] memory _publicKey,\\n        uint256[4] memory _proof,\\n        bytes memory _message\\n    ) internal pure returns (bool) {\\n        // Step 2: Hash to try and increment (outputs a hashed value, a finite EC point in G)\\n        (uint256 hPointX, uint256 hPointY) = hashToTryAndIncrement(\\n            _publicKey,\\n            _message\\n        );\\n\\n        // Step 3: U = s*B - c*Y (where B is the generator)\\n        (uint256 uPointX, uint256 uPointY) = ecMulSubMul(\\n            _proof[3],\\n            GX,\\n            GY,\\n            _proof[2],\\n            _publicKey[0],\\n            _publicKey[1]\\n        );\\n\\n        // Step 4: V = s*H - c*Gamma\\n        (uint256 vPointX, uint256 vPointY) = ecMulSubMul(\\n            _proof[3],\\n            hPointX,\\n            hPointY,\\n            _proof[2],\\n            _proof[0],\\n            _proof[1]\\n        );\\n\\n        // Step 5: derived c from hash points(...)\\n        bytes16 derivedC = hashPoints(\\n            hPointX,\\n            hPointY,\\n            _proof[0],\\n            _proof[1],\\n            uPointX,\\n            uPointY,\\n            vPointX,\\n            vPointY\\n        );\\n\\n        // Step 6: Check validity c == c'\\n        return uint128(derivedC) == _proof[2];\\n    }\\n\\n    /// @dev VRF fast verification by providing the public key, the message, the VRF proof and several intermediate elliptic curve points that enable the verification shortcut.\\n    /// This function leverages the EVM's `ecrecover` precompile to verify elliptic curve multiplications by decreasing the security from 32 to 20 bytes.\\n    /// Based on the original idea of Vitalik Buterin: https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\\n    /// @param _proof The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\\n    /// @param _message The message (in bytes) used for computing the VRF\\n    /// @param _uPoint The `u` EC point defined as `U = s*B - c*Y`\\n    /// @param _vComponents The components required to compute `v` as `V = s*H - c*Gamma`\\n    /// @return true, if VRF proof is valid\\n    function fastVerify(\\n        uint256[2] memory _publicKey,\\n        uint256[4] memory _proof,\\n        bytes memory _message,\\n        uint256[2] memory _uPoint,\\n        uint256[4] memory _vComponents\\n    ) internal pure returns (bool) {\\n        // Step 2: Hash to try and increment -> hashed value, a finite EC point in G\\n        (uint256 hPointX, uint256 hPointY) = hashToTryAndIncrement(\\n            _publicKey,\\n            _message\\n        );\\n\\n        // Step 3 & Step 4:\\n        // U = s*B - c*Y (where B is the generator)\\n        // V = s*H - c*Gamma\\n        if (\\n            !ecMulSubMulVerify(\\n                _proof[3],\\n                _proof[2],\\n                _publicKey[0],\\n                _publicKey[1],\\n                _uPoint[0],\\n                _uPoint[1]\\n            ) ||\\n            !ecMulVerify(\\n                _proof[3],\\n                hPointX,\\n                hPointY,\\n                _vComponents[0],\\n                _vComponents[1]\\n            ) ||\\n            !ecMulVerify(\\n                _proof[2],\\n                _proof[0],\\n                _proof[1],\\n                _vComponents[2],\\n                _vComponents[3]\\n            )\\n        ) {\\n            return false;\\n        }\\n        (uint256 vPointX, uint256 vPointY) = EllipticCurve.ecSub(\\n            _vComponents[0],\\n            _vComponents[1],\\n            _vComponents[2],\\n            _vComponents[3],\\n            AA,\\n            PP\\n        );\\n\\n        // Step 5: derived c from hash points(...)\\n        bytes16 derivedC = hashPoints(\\n            hPointX,\\n            hPointY,\\n            _proof[0],\\n            _proof[1],\\n            _uPoint[0],\\n            _uPoint[1],\\n            vPointX,\\n            vPointY\\n        );\\n\\n        // Step 6: Check validity c == c'\\n        require(uint128(derivedC) == _proof[2], \\\"invalid proof\\\");\\n        return true;\\n    }\\n\\n    /// @dev Decode VRF proof from bytes\\n    /// @param _proof The VRF proof as bytes\\n    /// @return The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\\n    function decodeProof(bytes memory _proof)\\n        internal\\n        pure\\n        returns (uint256[4] memory)\\n    {\\n        require(_proof.length == 81, \\\"Malformed VRF proof\\\");\\n        uint8 gammaSign;\\n        uint256 gammaX;\\n        uint128 c;\\n        uint256 s;\\n        assembly {\\n            gammaSign := mload(add(_proof, 1))\\n            gammaX := mload(add(_proof, 33))\\n            c := mload(add(_proof, 49))\\n            s := mload(add(_proof, 81))\\n        }\\n        uint256 gammaY = deriveY(gammaSign, gammaX);\\n\\n        return [gammaX, gammaY, c, s];\\n    }\\n\\n    /// @dev Decode EC point from bytes\\n    /// @param _point The EC point as bytes\\n    /// @return The point as `[point-x, point-y]`\\n    function decodePoint(bytes memory _point)\\n        internal\\n        pure\\n        returns (uint256[2] memory)\\n    {\\n        require(_point.length == 33, \\\"Malformed compressed EC point\\\");\\n        uint8 sign;\\n        uint256 x;\\n        assembly {\\n            sign := mload(add(_point, 1))\\n            x := mload(add(_point, 33))\\n        }\\n        uint256 y = deriveY(sign, x);\\n\\n        return [x, y];\\n    }\\n\\n    /// @dev Compute the parameters (EC points) required for the VRF fast verification function.\\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\\n    /// @param _proof The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\\n    /// @param _message The message (in bytes) used for computing the VRF\\n    /// @return The fast verify required parameters as the tuple `([uPointX, uPointY], [sHX, sHY, cGammaX, cGammaY])`\\n    function computeFastVerifyParams(\\n        uint256[2] memory _publicKey,\\n        uint256[4] memory _proof,\\n        bytes memory _message\\n    ) internal pure returns (uint256[2] memory, uint256[4] memory) {\\n        // Requirements for Step 3: U = s*B - c*Y (where B is the generator)\\n        (uint256 hPointX, uint256 hPointY) = hashToTryAndIncrement(\\n            _publicKey,\\n            _message\\n        );\\n        (uint256 uPointX, uint256 uPointY) = ecMulSubMul(\\n            _proof[3],\\n            GX,\\n            GY,\\n            _proof[2],\\n            _publicKey[0],\\n            _publicKey[1]\\n        );\\n        // Requirements for Step 4: V = s*H - c*Gamma\\n        (uint256 sHX, uint256 sHY) = derivePoint(_proof[3], hPointX, hPointY);\\n        (uint256 cGammaX, uint256 cGammaY) = derivePoint(\\n            _proof[2],\\n            _proof[0],\\n            _proof[1]\\n        );\\n\\n        return ([uPointX, uPointY], [sHX, sHY, cGammaX, cGammaY]);\\n    }\\n\\n    /// @dev Function to convert a `Hash(PK|DATA)` to a point in the curve as defined in [VRF-draft-04](https://tools.ietf.org/pdf/draft-irtf-cfrg-vrf-04).\\n    /// Used in Step 2 of VRF verification function.\\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\\n    /// @param _message The message used for computing the VRF\\n    /// @return The hash point in affine cooridnates\\n    function hashToTryAndIncrement(\\n        uint256[2] memory _publicKey,\\n        bytes memory _message\\n    ) internal pure returns (uint256, uint256) {\\n        // Step 1: public key to bytes\\n        // Step 2: V = cipher_suite | 0x01 | public_key_bytes | message | ctr | 0x0\\n        bytes memory c = abi.encodePacked(\\n            // Cipher suite code (SECP256K1-SHA256-TAI is 0xFE)\\n            uint8(254),\\n            // 0x01\\n            uint8(1),\\n            // Public Key\\n            encodePoint(_publicKey[0], _publicKey[1]),\\n            // Message\\n            _message\\n        );\\n\\n        // Step 3: find a valid EC point\\n        // Loop over counter ctr starting at 0x00 and do hash\\n        for (uint8 ctr = 0; ctr < 256; ctr++) {\\n            // Counter update\\n            // c[cLength-1] = byte(ctr);\\n            bytes32 sha = sha256(abi.encodePacked(c, ctr, uint8(0)));\\n            // Step 4: arbitraty string to point and check if it is on curve\\n            uint256 hPointX = uint256(sha);\\n            uint256 hPointY = deriveY(2, hPointX);\\n            if (EllipticCurve.isOnCurve(hPointX, hPointY, AA, BB, PP)) {\\n                // Step 5 (omitted): calculate H (cofactor is 1 on secp256k1)\\n                // If H is not \\\"INVALID\\\" and cofactor > 1, set H = cofactor * H\\n                return (hPointX, hPointY);\\n            }\\n        }\\n        revert(\\\"No valid point was found\\\");\\n    }\\n\\n    /// @dev Function to hash a certain set of points as specified in [VRF-draft-04](https://tools.ietf.org/pdf/draft-irtf-cfrg-vrf-04).\\n    /// Used in Step 5 of VRF verification function.\\n    /// @param _hPointX The coordinate `x` of point `H`\\n    /// @param _hPointY The coordinate `y` of point `H`\\n    /// @param _gammaX The coordinate `x` of the point `Gamma`\\n    /// @param _gammaX The coordinate `y` of the point `Gamma`\\n    /// @param _uPointX The coordinate `x` of point `U`\\n    /// @param _uPointY The coordinate `y` of point `U`\\n    /// @param _vPointX The coordinate `x` of point `V`\\n    /// @param _vPointY The coordinate `y` of point `V`\\n    /// @return The first half of the digest of the points using SHA256\\n    function hashPoints(\\n        uint256 _hPointX,\\n        uint256 _hPointY,\\n        uint256 _gammaX,\\n        uint256 _gammaY,\\n        uint256 _uPointX,\\n        uint256 _uPointY,\\n        uint256 _vPointX,\\n        uint256 _vPointY\\n    ) internal pure returns (bytes16) {\\n        bytes memory c = abi.encodePacked(\\n            // Ciphersuite 0xFE\\n            uint8(254),\\n            // Prefix 0x02\\n            uint8(2),\\n            // Points to Bytes\\n            encodePoint(_hPointX, _hPointY),\\n            encodePoint(_gammaX, _gammaY),\\n            encodePoint(_uPointX, _uPointY),\\n            encodePoint(_vPointX, _vPointY),\\n            uint8(0)\\n        );\\n        // Hash bytes and truncate\\n        bytes32 sha = sha256(c);\\n        bytes16 half1;\\n        assembly {\\n            let freemem_pointer := mload(0x40)\\n            mstore(add(freemem_pointer, 0x00), sha)\\n            half1 := mload(add(freemem_pointer, 0x00))\\n        }\\n\\n        return half1;\\n    }\\n\\n    /// @dev Encode an EC point to bytes\\n    /// @param _x The coordinate `x` of the point\\n    /// @param _y The coordinate `y` of the point\\n    /// @return The point coordinates as bytes\\n    function encodePoint(uint256 _x, uint256 _y)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        uint8 prefix = uint8(2 + (_y % 2));\\n\\n        return abi.encodePacked(prefix, _x);\\n    }\\n\\n    /// @dev Substracts two key derivation functionsas `s1*A - s2*B`.\\n    /// @param _scalar1 The scalar `s1`\\n    /// @param _a1 The `x` coordinate of point `A`\\n    /// @param _a2 The `y` coordinate of point `A`\\n    /// @param _scalar2 The scalar `s2`\\n    /// @param _b1 The `x` coordinate of point `B`\\n    /// @param _b2 The `y` coordinate of point `B`\\n    /// @return The derived point in affine cooridnates\\n    function ecMulSubMul(\\n        uint256 _scalar1,\\n        uint256 _a1,\\n        uint256 _a2,\\n        uint256 _scalar2,\\n        uint256 _b1,\\n        uint256 _b2\\n    ) internal pure returns (uint256, uint256) {\\n        (uint256 m1, uint256 m2) = derivePoint(_scalar1, _a1, _a2);\\n        (uint256 n1, uint256 n2) = derivePoint(_scalar2, _b1, _b2);\\n        (uint256 r1, uint256 r2) = EllipticCurve.ecSub(m1, m2, n1, n2, AA, PP);\\n\\n        return (r1, r2);\\n    }\\n\\n    /// @dev Verify an Elliptic Curve multiplication of the form `(qx,qy) = scalar*(x,y)` by using the precompiled `ecrecover` function.\\n    /// The usage of the precompiled `ecrecover` function decreases the security from 32 to 20 bytes.\\n    /// Based on the original idea of Vitalik Buterin: https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    /// @param _scalar The scalar of the point multiplication\\n    /// @param _x The coordinate `x` of the point\\n    /// @param _y The coordinate `y` of the point\\n    /// @param _qx The coordinate `x` of the multiplication result\\n    /// @param _qy The coordinate `y` of the multiplication result\\n    /// @return true, if first 20 bytes match\\n    function ecMulVerify(\\n        uint256 _scalar,\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _qx,\\n        uint256 _qy\\n    ) internal pure returns (bool) {\\n        address result = ecrecover(\\n            0,\\n            _y % 2 != 0 ? 28 : 27,\\n            bytes32(_x),\\n            bytes32(mulmod(_scalar, _x, NN))\\n        );\\n\\n        return pointToAddress(_qx, _qy) == result;\\n    }\\n\\n    /// @dev Verify an Elliptic Curve operation of the form `Q = scalar1*(gx,gy) - scalar2*(x,y)` by using the precompiled `ecrecover` function, where `(gx,gy)` is the generator of the EC.\\n    /// The usage of the precompiled `ecrecover` function decreases the security from 32 to 20 bytes.\\n    /// Based on SolCrypto library: https://github.com/HarryR/solcrypto\\n    /// @param _scalar1 The scalar of the multiplication of `(gx,gy)`\\n    /// @param _scalar2 The scalar of the multiplication of `(x,y)`\\n    /// @param _x The coordinate `x` of the point to be mutiply by `scalar2`\\n    /// @param _y The coordinate `y` of the point to be mutiply by `scalar2`\\n    /// @param _qx The coordinate `x` of the equation result\\n    /// @param _qy The coordinate `y` of the equation result\\n    /// @return true, if first 20 bytes match\\n    function ecMulSubMulVerify(\\n        uint256 _scalar1,\\n        uint256 _scalar2,\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _qx,\\n        uint256 _qy\\n    ) internal pure returns (bool) {\\n        uint256 scalar1 = (NN - _scalar1) % NN;\\n        scalar1 = mulmod(scalar1, _x, NN);\\n        uint256 scalar2 = (NN - _scalar2) % NN;\\n\\n        address result = ecrecover(\\n            bytes32(scalar1),\\n            _y % 2 != 0 ? 28 : 27,\\n            bytes32(_x),\\n            bytes32(mulmod(scalar2, _x, NN))\\n        );\\n\\n        return pointToAddress(_qx, _qy) == result;\\n    }\\n\\n    /// @dev Gets the address corresponding to the EC point digest (keccak256), i.e. the first 20 bytes of the digest.\\n    /// This function is used for performing a fast EC multiplication verification.\\n    /// @param _x The coordinate `x` of the point\\n    /// @param _y The coordinate `y` of the point\\n    /// @return The address of the EC point digest (keccak256)\\n    function pointToAddress(uint256 _x, uint256 _y)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return\\n            address(\\n                uint160(\\n                    uint256(keccak256(abi.encodePacked(_x, _y))) &\\n                        0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            );\\n    }\\n\\n  /* ***************************************************************************\\n     * @notice Returns proof's output, if proof is valid. Otherwise reverts\\n\\n     * @param proof vrf proof components\\n     * @param seed  seed used to generate the vrf output\\n     *\\n     * Throws if proof is invalid, otherwise:\\n     * @return output i.e., the random output implied by the proof\\n     * ***************************************************************************\\n     */\\n  function randomValueFromVRFProof(Proof memory proof, bytes memory seed) internal pure returns (uint256 output) {\\n    fastVerify(\\n        proof.pk,\\n        proof.proof,\\n        seed,\\n        proof.uPoint,\\n        proof.vComponents\\n    );\\n    output = uint256(keccak256(abi.encode(proof.proof[0], proof.proof[1])));\\n  }\\n}\\n\",\"keccak256\":\"0xf3ea18a12432c8549d7acae420ccdfce0bad05a78f81f5acd0cdc1db680e6a56\",\"license\":\"MIT\"},\"src/v0.1/libraries/ecc/EllipticCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n// https://github.com/KenshiTech/vrf-consumer/blob/master/contracts/lib/ecc/EllipticCurve.sol\\n\\n/**\\n * @title Elliptic Curve Library\\n * @dev Library providing arithmetic operations over elliptic curves.\\n * This library does not check whether the inserted points belong to the curve\\n * `isOnCurve` function should be used by the library user to check the aforementioned statement.\\n * @author Witnet Foundation\\n */\\nlibrary EllipticCurve {\\n    // Pre-computed constant for 2 ** 255\\n    uint256 private constant U255_MAX_PLUS_1 =\\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\\n\\n    /// @dev Modular euclidean inverse of a number (mod p).\\n    /// @param _x The number\\n    /// @param _pp The modulus\\n    /// @return q such that x*q = 1 (mod _pp)\\n    function invMod(uint256 _x, uint256 _pp) internal pure returns (uint256) {\\n        require(_x != 0 && _x != _pp && _pp != 0, \\\"Invalid number\\\");\\n        uint256 q = 0;\\n        uint256 newT = 1;\\n        uint256 r = _pp;\\n        uint256 t;\\n        while (_x != 0) {\\n            t = r / _x;\\n            (q, newT) = (newT, addmod(q, (_pp - mulmod(t, newT, _pp)), _pp));\\n            (r, _x) = (_x, r - t * _x);\\n        }\\n\\n        return q;\\n    }\\n\\n    /// @dev Modular exponentiation, b^e % _pp.\\n    /// Source: https://github.com/androlo/standard-contracts/blob/master/contracts/src/crypto/ECCMath.sol\\n    /// @param _base base\\n    /// @param _exp exponent\\n    /// @param _pp modulus\\n    /// @return r such that r = b**e (mod _pp)\\n    function expMod(\\n        uint256 _base,\\n        uint256 _exp,\\n        uint256 _pp\\n    ) internal pure returns (uint256) {\\n        require(_pp != 0, \\\"Modulus is zero\\\");\\n\\n        if (_base == 0) return 0;\\n        if (_exp == 0) return 1;\\n\\n        uint256 r = 1;\\n        uint256 bit = U255_MAX_PLUS_1;\\n        assembly {\\n            for {\\n\\n            } gt(bit, 0) {\\n\\n            } {\\n                r := mulmod(\\n                    mulmod(r, r, _pp),\\n                    exp(_base, iszero(iszero(and(_exp, bit)))),\\n                    _pp\\n                )\\n                r := mulmod(\\n                    mulmod(r, r, _pp),\\n                    exp(_base, iszero(iszero(and(_exp, div(bit, 2))))),\\n                    _pp\\n                )\\n                r := mulmod(\\n                    mulmod(r, r, _pp),\\n                    exp(_base, iszero(iszero(and(_exp, div(bit, 4))))),\\n                    _pp\\n                )\\n                r := mulmod(\\n                    mulmod(r, r, _pp),\\n                    exp(_base, iszero(iszero(and(_exp, div(bit, 8))))),\\n                    _pp\\n                )\\n                bit := div(bit, 16)\\n            }\\n        }\\n\\n        return r;\\n    }\\n\\n    /// @dev Converts a point (x, y, z) expressed in Jacobian coordinates to affine coordinates (x', y', 1).\\n    /// @param _x coordinate x\\n    /// @param _y coordinate y\\n    /// @param _z coordinate z\\n    /// @param _pp the modulus\\n    /// @return (x', y') affine coordinates\\n    function toAffine(\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _z,\\n        uint256 _pp\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 zInv = invMod(_z, _pp);\\n        uint256 zInv2 = mulmod(zInv, zInv, _pp);\\n        uint256 x2 = mulmod(_x, zInv2, _pp);\\n        uint256 y2 = mulmod(_y, mulmod(zInv, zInv2, _pp), _pp);\\n\\n        return (x2, y2);\\n    }\\n\\n    /// @dev Derives the y coordinate from a compressed-format point x [[SEC-1]](https://www.secg.org/SEC1-Ver-1.0.pdf).\\n    /// @param _prefix parity byte (0x02 even, 0x03 odd)\\n    /// @param _x coordinate x\\n    /// @param _aa constant of curve\\n    /// @param _bb constant of curve\\n    /// @param _pp the modulus\\n    /// @return y coordinate y\\n    function deriveY(\\n        uint8 _prefix,\\n        uint256 _x,\\n        uint256 _aa,\\n        uint256 _bb,\\n        uint256 _pp\\n    ) internal pure returns (uint256) {\\n        require(\\n            _prefix == 0x02 || _prefix == 0x03,\\n            \\\"Invalid compressed EC point prefix\\\"\\n        );\\n\\n        // x^3 + ax + b\\n        uint256 y2 = addmod(\\n            mulmod(_x, mulmod(_x, _x, _pp), _pp),\\n            addmod(mulmod(_x, _aa, _pp), _bb, _pp),\\n            _pp\\n        );\\n        y2 = expMod(y2, (_pp + 1) / 4, _pp);\\n        // uint256 cmp = yBit ^ y_ & 1;\\n        uint256 y = (y2 + _prefix) % 2 == 0 ? y2 : _pp - y2;\\n\\n        return y;\\n    }\\n\\n    /// @dev Check whether point (x,y) is on curve defined by a, b, and _pp.\\n    /// @param _x coordinate x of P1\\n    /// @param _y coordinate y of P1\\n    /// @param _aa constant of curve\\n    /// @param _bb constant of curve\\n    /// @param _pp the modulus\\n    /// @return true if x,y in the curve, false else\\n    function isOnCurve(\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _aa,\\n        uint256 _bb,\\n        uint256 _pp\\n    ) internal pure returns (bool) {\\n        if (0 == _x || _x >= _pp || 0 == _y || _y >= _pp) {\\n            return false;\\n        }\\n        // y^2\\n        uint256 lhs = mulmod(_y, _y, _pp);\\n        // x^3\\n        uint256 rhs = mulmod(mulmod(_x, _x, _pp), _x, _pp);\\n        if (_aa != 0) {\\n            // x^3 + a*x\\n            rhs = addmod(rhs, mulmod(_x, _aa, _pp), _pp);\\n        }\\n        if (_bb != 0) {\\n            // x^3 + a*x + b\\n            rhs = addmod(rhs, _bb, _pp);\\n        }\\n\\n        return lhs == rhs;\\n    }\\n\\n    /// @dev Calculate inverse (x, -y) of point (x, y).\\n    /// @param _x coordinate x of P1\\n    /// @param _y coordinate y of P1\\n    /// @param _pp the modulus\\n    /// @return (x, -y)\\n    function ecInv(\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _pp\\n    ) internal pure returns (uint256, uint256) {\\n        return (_x, (_pp - _y) % _pp);\\n    }\\n\\n    /// @dev Add two points (x1, y1) and (x2, y2) in affine coordinates.\\n    /// @param _x1 coordinate x of P1\\n    /// @param _y1 coordinate y of P1\\n    /// @param _x2 coordinate x of P2\\n    /// @param _y2 coordinate y of P2\\n    /// @param _aa constant of the curve\\n    /// @param _pp the modulus\\n    /// @return (qx, qy) = P1+P2 in affine coordinates\\n    function ecAdd(\\n        uint256 _x1,\\n        uint256 _y1,\\n        uint256 _x2,\\n        uint256 _y2,\\n        uint256 _aa,\\n        uint256 _pp\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 x = 0;\\n        uint256 y = 0;\\n        uint256 z = 0;\\n\\n        // Double if x1==x2 else add\\n        if (_x1 == _x2) {\\n            // y1 = -y2 mod p\\n            if (addmod(_y1, _y2, _pp) == 0) {\\n                return (0, 0);\\n            } else {\\n                // P1 = P2\\n                (x, y, z) = jacDouble(_x1, _y1, 1, _aa, _pp);\\n            }\\n        } else {\\n            (x, y, z) = jacAdd(_x1, _y1, 1, _x2, _y2, 1, _pp);\\n        }\\n        // Get back to affine\\n        return toAffine(x, y, z, _pp);\\n    }\\n\\n    /// @dev Substract two points (x1, y1) and (x2, y2) in affine coordinates.\\n    /// @param _x1 coordinate x of P1\\n    /// @param _y1 coordinate y of P1\\n    /// @param _x2 coordinate x of P2\\n    /// @param _y2 coordinate y of P2\\n    /// @param _aa constant of the curve\\n    /// @param _pp the modulus\\n    /// @return (qx, qy) = P1-P2 in affine coordinates\\n    function ecSub(\\n        uint256 _x1,\\n        uint256 _y1,\\n        uint256 _x2,\\n        uint256 _y2,\\n        uint256 _aa,\\n        uint256 _pp\\n    ) internal pure returns (uint256, uint256) {\\n        // invert square\\n        (uint256 x, uint256 y) = ecInv(_x2, _y2, _pp);\\n        // P1-square\\n        return ecAdd(_x1, _y1, x, y, _aa, _pp);\\n    }\\n\\n    /// @dev Multiply point (x1, y1, z1) times d in affine coordinates.\\n    /// @param _k scalar to multiply\\n    /// @param _x coordinate x of P1\\n    /// @param _y coordinate y of P1\\n    /// @param _aa constant of the curve\\n    /// @param _pp the modulus\\n    /// @return (qx, qy) = d*P in affine coordinates\\n    function ecMul(\\n        uint256 _k,\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _aa,\\n        uint256 _pp\\n    ) internal pure returns (uint256, uint256) {\\n        // Jacobian multiplication\\n        (uint256 x1, uint256 y1, uint256 z1) = jacMul(_k, _x, _y, 1, _aa, _pp);\\n        // Get back to affine\\n        return toAffine(x1, y1, z1, _pp);\\n    }\\n\\n    /// @dev Adds two points (x1, y1, z1) and (x2 y2, z2).\\n    /// @param _x1 coordinate x of P1\\n    /// @param _y1 coordinate y of P1\\n    /// @param _z1 coordinate z of P1\\n    /// @param _x2 coordinate x of square\\n    /// @param _y2 coordinate y of square\\n    /// @param _z2 coordinate z of square\\n    /// @param _pp the modulus\\n    /// @return (qx, qy, qz) P1+square in Jacobian\\n    function jacAdd(\\n        uint256 _x1,\\n        uint256 _y1,\\n        uint256 _z1,\\n        uint256 _x2,\\n        uint256 _y2,\\n        uint256 _z2,\\n        uint256 _pp\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        if (_x1 == 0 && _y1 == 0) return (_x2, _y2, _z2);\\n        if (_x2 == 0 && _y2 == 0) return (_x1, _y1, _z1);\\n\\n        // We follow the equations described in https://pdfs.semanticscholar.org/5c64/29952e08025a9649c2b0ba32518e9a7fb5c2.pdf Section 5\\n        uint256[4] memory zs; // z1^2, z1^3, z2^2, z2^3\\n        zs[0] = mulmod(_z1, _z1, _pp);\\n        zs[1] = mulmod(_z1, zs[0], _pp);\\n        zs[2] = mulmod(_z2, _z2, _pp);\\n        zs[3] = mulmod(_z2, zs[2], _pp);\\n\\n        // u1, s1, u2, s2\\n        zs = [\\n            mulmod(_x1, zs[2], _pp),\\n            mulmod(_y1, zs[3], _pp),\\n            mulmod(_x2, zs[0], _pp),\\n            mulmod(_y2, zs[1], _pp)\\n        ];\\n\\n        // In case of zs[0] == zs[2] && zs[1] == zs[3], double function should be used\\n        require(\\n            zs[0] != zs[2] || zs[1] != zs[3],\\n            \\\"Use jacDouble function instead\\\"\\n        );\\n\\n        uint256[4] memory hr;\\n        //h\\n        hr[0] = addmod(zs[2], _pp - zs[0], _pp);\\n        //r\\n        hr[1] = addmod(zs[3], _pp - zs[1], _pp);\\n        //h^2\\n        hr[2] = mulmod(hr[0], hr[0], _pp);\\n        // h^3\\n        hr[3] = mulmod(hr[2], hr[0], _pp);\\n        // qx = -h^3  -2u1h^2+r^2\\n        uint256 qx = addmod(mulmod(hr[1], hr[1], _pp), _pp - hr[3], _pp);\\n        qx = addmod(qx, _pp - mulmod(2, mulmod(zs[0], hr[2], _pp), _pp), _pp);\\n        // qy = -s1*z1*h^3+r(u1*h^2 -x^3)\\n        uint256 qy = mulmod(\\n            hr[1],\\n            addmod(mulmod(zs[0], hr[2], _pp), _pp - qx, _pp),\\n            _pp\\n        );\\n        qy = addmod(qy, _pp - mulmod(zs[1], hr[3], _pp), _pp);\\n        // qz = h*z1*z2\\n        uint256 qz = mulmod(hr[0], mulmod(_z1, _z2, _pp), _pp);\\n        return (qx, qy, qz);\\n    }\\n\\n    /// @dev Doubles a points (x, y, z).\\n    /// @param _x coordinate x of P1\\n    /// @param _y coordinate y of P1\\n    /// @param _z coordinate z of P1\\n    /// @param _aa the a scalar in the curve equation\\n    /// @param _pp the modulus\\n    /// @return (qx, qy, qz) 2P in Jacobian\\n    function jacDouble(\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _z,\\n        uint256 _aa,\\n        uint256 _pp\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        if (_z == 0) return (_x, _y, _z);\\n\\n        // We follow the equations described in https://pdfs.semanticscholar.org/5c64/29952e08025a9649c2b0ba32518e9a7fb5c2.pdf Section 5\\n        // Note: there is a bug in the paper regarding the m parameter, M=3*(x1^2)+a*(z1^4)\\n        // x, y, z at this point represent the squares of _x, _y, _z\\n        uint256 x = mulmod(_x, _x, _pp); //x1^2\\n        uint256 y = mulmod(_y, _y, _pp); //y1^2\\n        uint256 z = mulmod(_z, _z, _pp); //z1^2\\n\\n        // s\\n        uint256 s = mulmod(4, mulmod(_x, y, _pp), _pp);\\n        // m\\n        uint256 m = addmod(\\n            mulmod(3, x, _pp),\\n            mulmod(_aa, mulmod(z, z, _pp), _pp),\\n            _pp\\n        );\\n\\n        // x, y, z at this point will be reassigned and rather represent qx, qy, qz from the paper\\n        // This allows to reduce the gas cost and stack footprint of the algorithm\\n        // qx\\n        x = addmod(mulmod(m, m, _pp), _pp - addmod(s, s, _pp), _pp);\\n        // qy = -8*y1^4 + M(S-T)\\n        y = addmod(\\n            mulmod(m, addmod(s, _pp - x, _pp), _pp),\\n            _pp - mulmod(8, mulmod(y, y, _pp), _pp),\\n            _pp\\n        );\\n        // qz = 2*y1*z1\\n        z = mulmod(2, mulmod(_y, _z, _pp), _pp);\\n\\n        return (x, y, z);\\n    }\\n\\n    /// @dev Multiply point (x, y, z) times d.\\n    /// @param _d scalar to multiply\\n    /// @param _x coordinate x of P1\\n    /// @param _y coordinate y of P1\\n    /// @param _z coordinate z of P1\\n    /// @param _aa constant of curve\\n    /// @param _pp the modulus\\n    /// @return (qx, qy, qz) d*P1 in Jacobian\\n    function jacMul(\\n        uint256 _d,\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _z,\\n        uint256 _aa,\\n        uint256 _pp\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // Early return in case that `_d == 0`\\n        if (_d == 0) {\\n            return (_x, _y, _z);\\n        }\\n\\n        uint256 remaining = _d;\\n        uint256 qx = 0;\\n        uint256 qy = 0;\\n        uint256 qz = 1;\\n\\n        // Double and add algorithm\\n        while (remaining != 0) {\\n            if ((remaining & 1) != 0) {\\n                (qx, qy, qz) = jacAdd(qx, qy, qz, _x, _y, _z, _pp);\\n            }\\n            remaining = remaining / 2;\\n            (_x, _y, _z) = jacDouble(_x, _y, _z, _aa, _pp);\\n        }\\n        return (qx, qy, qz);\\n    }\\n}\\n\",\"keccak256\":\"0x42aea1ae23d707fdba8219ede0bbf686b8ee4eaec49382bc06ef353bcfa1b127\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003b2938038062003b298339810160408190526200003491620000b5565b6200003f3362000065565b600780546001600160a01b0319166001600160a01b0392909216919091179055620000e7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000c857600080fd5b81516001600160a01b0381168114620000e057600080fd5b9392505050565b613a3280620000f76000396000f3fe60806040526004361061018a5760003560e01c80637d08430e116100d6578063c91d956c1161007f578063d2f9f9a711610059578063d2f9f9a71461053d578063f2fde38b1461055d578063fa1d85da1461057d57600080fd5b8063c91d956c146104e7578063c9feea4a14610507578063caf70c4a1461051d57600080fd5b8063a690d7ae116100b0578063a690d7ae14610473578063a812ea7214610491578063c3f909d4146104b157600080fd5b80637d08430e146103f957806388e75972146104195780638da5cb5b1461044157600080fd5b806340d6bb82116101385780636f64f03f116101125780636f64f03f146103a4578063715018a6146103c4578063786708e6146103d957600080fd5b806340d6bb821461029c5780635fbbc0d2146102c757806369bcdb7d1461037757600080fd5b8063181f5a7711610169578063181f5a77146102005780631a8928321461024c5780632f34077b1461027c57600080fd5b80620122911461018f57806306b5536c146101bb57806308821d58146101de575b600080fd5b34801561019b57600080fd5b506101a4610590565b6040516101b2929190612f15565b60405180910390f35b3480156101c757600080fd5b506101d06105fc565b6040519081526020016101b2565b3480156101ea57600080fd5b506101fe6101f9366004612f7a565b610613565b005b34801561020c57600080fd5b50604080518082018252601381527f565246436f6f7264696e61746f722076302e3100000000000000000000000000602082015290516101b29190612fba565b34801561025857600080fd5b5061026c610267366004613018565b6107bb565b60405190151581526020016101b2565b34801561028857600080fd5b506101d061029736600461307c565b6108a9565b3480156102a857600080fd5b506102b26101f481565b60405163ffffffff90911681526020016101b2565b3480156102d357600080fd5b506006546040805163ffffffff80841682526401000000008404811660208301526801000000000000000084048116928201929092526c01000000000000000000000000830482166060820152600160801b8304909116608082015262ffffff600160a01b8304811660a0830152600160b81b8304811660c0830152600160d01b8304811660e0830152600160e81b909204909116610100820152610120016101b2565b34801561038357600080fd5b506101d06103923660046130cb565b60009081526003602052604090205490565b3480156103b057600080fd5b506101fe6103bf3660046130e4565b6109db565b3480156103d057600080fd5b506101fe610aff565b3480156103e557600080fd5b506101fe6103f43660046131c1565b610b13565b34801561040557600080fd5b506101fe6104143660046132b3565b610d5f565b34801561042557600080fd5b50600854600954604080519283526020830191909152016101b2565b34801561044d57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101b2565b34801561047f57600080fd5b506007546001600160a01b031661045b565b34801561049d57600080fd5b506101d06104ac3660046133c0565b610db3565b3480156104bd57600080fd5b506005546040805163ffffffff8084168252650100000000009093049092166020830152016101b2565b3480156104f357600080fd5b506101fe6105023660046130cb565b611189565b34801561051357600080fd5b506101d060045481565b34801561052957600080fd5b506101d06105383660046134cd565b6111c6565b34801561054957600080fd5b506102b26105583660046134e9565b6111f6565b34801561056957600080fd5b506101fe610578366004613506565b611388565b6101d061058b366004613523565b611418565b600554600180546040805160208084028201810190925282815260009460609463ffffffff9091169390928391908301828280156105ed57602002820191906000526020600020905b8154815260200190600101908083116105d9575b50505050509050915091509091565b60095460085460009161060e9161356c565b905090565b61061b611705565b60408051808201825260009161064a9190849060029083908390808284376000920191909152506111c6915050565b6000818152600260205260409020549091506001600160a01b03168061068b57604051631dfd6e1360e21b8152600481018390526024015b60405180910390fd5b6000828152600260205260408120805473ffffffffffffffffffffffffffffffffffffffff191690555b6001548110156107725782600182815481106106d3576106d361357f565b9060005260206000200154036107605760018054600091906106f6908290613595565b815481106107065761070661357f565b9060005260206000200154905080600183815481106107275761072761357f565b6000918252602090912001556001805480610744576107446135a8565b6001900381819060005260206000200160009055905550610772565b8061076a816135be565b9150506106b5565b50806001600160a01b03167f72be339577868f868798bac2c93e52d6f034fef4689a9848996c14ebb7416c0d836040516107ae91815260200190565b60405180910390a2505050565b6000805b60015481101561089c576000610866600183815481106107e1576107e161357f565b60009182526020918290200154604080518084018390526001600160a01b038b168183015267ffffffffffffffff808b16606083015289166080808301919091528251808303909101815260a08201835280519085012060c082019390935260e080820184905282518083039091018152610100909101909152805192019190912091565b5060008181526003602052604090205490915015610889576001925050506108a2565b5080610894816135be565b9150506107bf565b50600090505b9392505050565b600554600090640100000000900460ff16156108d85760405163769dd35360e11b815260040160405180910390fd5b60008581526002602052604090205485906001600160a01b03166109125760405163c954459d60e01b815260048101829052602401610682565b600754604051633bd7108d60e11b815267ffffffffffffffff871660048201526000916001600160a01b0316906377ae211a90602401600060405180830381865afa158015610965573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098d91908101906135d7565b50505090506004548110156109c0576004805460405163b99e2ab760e01b81529182018390526024820152604401610682565b60006109cf888888888561175f565b98975050505050505050565b6109e3611705565b604080518082018252600091610a129190849060029083908390808284376000920191909152506111c6915050565b6000818152600260205260409020549091506001600160a01b031615610a67576040517f4a0b8fa700000000000000000000000000000000000000000000000000000000815260048101829052602401610682565b6000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03881690811790915560018054808201825594527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909301849055518381527fe729ae16526293f74ade739043022254f1489f616295a25bf72dfb4511ed73b891016107ae565b610b07611705565b610b116000611bb8565b565b610b1b611705565b604080516060808201835263ffffffff86811680845260006020808601919091528783169486018590526005805468ffffffffffffffffff191690921765010000000000909502949094179055845160068054948701518787015194880151608089015160a08a015160c08b015160e08c01516101008d015197891667ffffffffffffffff19909b169a909a1764010000000095891695909502949094177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff1668010000000000000000988816989098027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff16979097176c0100000000000000000000000092871692909202919091177fffffffffffffffffff00000000000000ffffffffffffffffffffffffffffffff16600160801b91909516027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff1693909317600160a01b62ffffff95861602177fffffff000000000000ffffffffffffffffffffffffffffffffffffffffffffff16600160b81b938516939093027fffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffff1692909217600160d01b94841694909402939093177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b929093169190910291909117815590517f107fdd8d898f7a380d4a448bb9882a3e1bb767bd803a09721d828b4ce217b04391610d5291869186916136ba565b60405180910390a1505050565b610d67611705565b80516008819055602080830151600981905560408051938452918301527f6e080c19f3bdc7644116da0ba00746ad7b6452f89b6634457e4a41c331fd03dd91015b60405180910390a150565b600554600090640100000000900460ff1615610de25760405163769dd35360e11b815260040160405180910390fd5b60005a90506000806000610df68888611c15565b9250925092506000876060015163ffffffff1667ffffffffffffffff811115610e2157610e2161311a565b604051908082528060200260200182016040528015610e4a578160200160208202803683370190505b50905060005b886060015163ffffffff16811015610ebe5760408051602081018590529081018290526060016040516020818303038152906040528051906020012060001c828281518110610ea157610ea161357f565b602090810291909101015280610eb6816135be565b915050610e50565b506000838152600360205260408082208290555181907f1fe543e30000000000000000000000000000000000000000000000000000000090610f069087908690602401613777565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092526005805464ff000000001916640100000000179055908b015160808c0151919250600091610f9a9163ffffffff169084611e0d565b6005805464ff000000001916905560075460208d0151604051633bd7108d60e11b815267ffffffffffffffff909116600482015291925060009182916001600160a01b0316906377ae211a90602401600060405180830381865afa158015611006573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261102e91908101906135d7565b50509150915060008c1561104357508161106c565b600554611069908c9065010000000000900463ffffffff16611064856111f6565b611e59565b90505b600760009054906101000a90046001600160a01b03166001600160a01b031663ea74b84d8f6020015183600260008f815260200190815260200160002060009054906101000a90046001600160a01b03166040518463ffffffff1660e01b81526004016111019392919067ffffffffffffffff93909316835260208301919091526001600160a01b0316604082015260600190565b600060405180830381600087803b15801561111b57600080fd5b505af115801561112f573d6000803e3d6000fd5b5050604080518b8152602081018590528715158183015290518c93507f221ad2e5b871cead1dd7f75c2fb223c0cfa34bdc049a15f3f82a1f0e943e605a92509081900360600190a29e9d5050505050505050505050505050565b611191611705565b60048190556040518181527fc9ac0b9c6116d44b14ac8198e0802802d07cf6956054e7542f0460a4d3423b3a90602001610da8565b6000816040516020016111d991906137b4565b604051602081830303815290604052805190602001209050919050565b604080516101208101825260065463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c01000000000000000000000000810483166060830152600160801b8104909216608082015262ffffff600160a01b8304811660a08301819052600160b81b8404821660c0840152600160d01b8404821660e0840152600160e81b9093041661010082015260009167ffffffffffffffff8416116112b1575192915050565b8267ffffffffffffffff168160a0015162ffffff161080156112e657508060c0015162ffffff168367ffffffffffffffff1611155b156112f5576020015192915050565b8267ffffffffffffffff168160c0015162ffffff1610801561132a57508060e0015162ffffff168367ffffffffffffffff1611155b15611339576040015192915050565b8267ffffffffffffffff168160e0015162ffffff1610801561136f575080610100015162ffffff168367ffffffffffffffff1611155b1561137e576060015192915050565b6080015192915050565b611390611705565b6001600160a01b03811661140c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610682565b61141581611bb8565b50565b600554600090640100000000900460ff16156114475760405163769dd35360e11b815260040160405180910390fd5b60008481526002602052604090205484906001600160a01b03166114815760405163c954459d60e01b815260048101829052602401610682565b600061148b6105fc565b9050803410156114b75760405163b99e2ab760e01b815234600482015260248101829052604401610682565b600754604080517f9dca362f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691639dca362f916004808301926020929190829003018187875af115801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f91906137e5565b6007546040517f7341c10c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201523360248201529192506001600160a01b031690637341c10c90604401600060405180830381600087803b1580156115ae57600080fd5b505af11580156115c2573d6000803e3d6000fd5b5050505060006001905060006115db89848a8a8661175f565b6007546040517f1376583800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff861660048201529192506001600160a01b03169063137658389086906024016000604051808303818588803b15801561164557600080fd5b505af1158015611659573d6000803e3d6000fd5b50505050506000843461166c9190613595565b905080156116f857604051600090339083908381818185875af1925050503d80600081146116b6576040519150601f19603f3d011682016040523d82523d6000602084013e6116bb565b606091505b50509050806116f6576040517fef7a4b6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b5098975050505050505050565b6000546001600160a01b03163314610b115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610682565b6007546040517f4a41897300000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8616600482015260009182916001600160a01b0390911690634a418973906024016020604051808303816000875af11580156117d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f59190613802565b90506001600160a01b038116611837576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6007546040517f6d5e8a7900000000000000000000000000000000000000000000000000000000815233600482015267ffffffffffffffff881660248201526000916001600160a01b031690636d5e8a7990604401602060405180830381865afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd91906137e5565b90508067ffffffffffffffff16600003611925576040517ff0019fe600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff88166004820152336024820152604401610682565b60055463ffffffff908116908716111561197f576005546040517ff5d7e01e00000000000000000000000000000000000000000000000000000000815263ffffffff80891660048301529091166024820152604401610682565b6101f463ffffffff861611156119d1576040517f47386bec00000000000000000000000000000000000000000000000000000000815263ffffffff861660048201526101f46024820152604401610682565b6007546040517f4000a00700000000000000000000000000000000000000000000000000000000815233600482015267ffffffffffffffff891660248201526000916001600160a01b031690634000a007906044016020604051808303816000875af1158015611a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6991906137e5565b6040805160208082018d9052338284015267ffffffffffffffff808d16606084015284166080808401919091528351808403909101815260a08301845280519082012060c083018e905260e080840182905284518085039091018152610100909301909352815191012091925060009182916040805160208101849052439181019190915267ffffffffffffffff8d16606082015263ffffffff808d1660808301528b1660a08201523360c0820152919350915060e00160408051601f19818403018152828252805160209182012060008681526003835283902055848352820183905263ffffffff808c1691830191909152891660608201528715156080820152339067ffffffffffffffff8c16908d907f88c0534cab9d18b5e2f8fb9a9d142426403b507f2343cfaafe6cfe45e9900e309060a00160405180910390a45093505050505b95945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000611c2785600001516111c6565b6000818152600260205260409020549093506001600160a01b031680611c6357604051631dfd6e1360e21b815260048101859052602401610682565b6040808701518151602081018790529182015260600160408051601f198184030181529181528151602092830120600081815260039093529082205490945090819003611cdc576040517f3688124a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516020808801516040808a015160608b015160808c01519251611d48968b96909594910195865267ffffffffffffffff948516602087015292909316604085015263ffffffff90811660608501529190911660808301526001600160a01b031660a082015260c00190565b604051602081830303815290604052805190602001208114611d96576040517fd529142c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8551604080890151905167ffffffffffffffff9092164091600091611dc8918490602001918252602082015260400190565b60408051601f19818403018152828252805160209182012090830152016040516020818303038152906040529050611e008982611eaa565b9450505050509250925092565b60005a611388811015611e1f57600080fd5b611388810390508460408204820311611e3757600080fd5b50823b611e4357600080fd5b60008083516020850160008789f1949350505050565b6000805a611e67868661356c565b611e719190613595565b611e7b903a61381f565b90506000611e9463ffffffff851664e8d4a5100061381f565b9050611ea0818361356c565b9695505050505050565b6000611ec9836000015184602001518486606001518760800151611f02565b50505060209081015180519082015160408051808501939093528281019190915280518083038201815260609092019052805191012090565b6000806000611f11888761205b565b606089015160408a01518b5160208d8101518b51918c0151969850949650611f3f95939492939192916121c3565b1580611f66575060608701518451611f649190849084908860015b602002015161230b565b155b80611f8c5750604080880151885160208a015192870151611f8a9390886003611f5a565b155b15611f9c57600092505050611baf565b83516020850151604086015160608701516000938493611fc8939192909190856401000003d0196123e2565b8a516020808d01518b51918c0151949650929450600093611ff0938993899390928989612417565b60408b0151909150608082901c1461204a5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610682565b5060019a9950505050505050505050565b6000808060fe600161207a8784602002015188600160200201516124d6565b8660405160200161208e949392919061383e565b604051602081830303815290604052905060005b6101008160ff1610156121735760006002838360006040516020016120c993929190613895565b60408051601f19818403018152908290526120e3916138d1565b602060405180830381855afa158015612100573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061212391906138ed565b905080600061213360028361252d565b905061214a8282600060076401000003d019612544565b1561215d5790955093506121bc92505050565b505050808061216b90613906565b9150506120a2565b5060405162461bcd60e51b815260206004820152601860248201527f4e6f2076616c696420706f696e742077617320666f756e6400000000000000006044820152606401610682565b9250929050565b60008070014551231950b75fc4402da1732fc9bebe196121e38982613595565b6121ed919061393b565b905070014551231950b75fc4402da1732fc9bebe198682099050600070014551231950b75fc4402da1732fc9bebe196122268982613595565b612230919061393b565b9050600060018361224260028a61393b565b60000361225057601b612253565b601c5b8a70014551231950b75fc4402da1732fc9bebe198c87096040805160008152602081018083529590955260ff909316928401929092526060830152608082015260a0016020604051602081039080840390855afa1580156122b8573d6000803e3d6000fd5b505060408051601f1981015160208083019a909a5281830198909852815180820383018152606090910190915280519701969096206001600160a01b039081169516949094149998505050505050505050565b60008060018161231c60028861393b565b60000361232a57601b61232d565b601c5b8870014551231950b75fc4402da1732fc9bebe198a8c096040805160008152602081018083529590955260ff909316928401929092526060830152608082015260a0016020604051602081039080840390855afa158015612392573d6000803e3d6000fd5b505060408051601f1981015160208083019890985281830196909652815180820383018152606090910190915280519501949094206001600160a01b039081169316929092149695505050505050565b6000806000806123f38888876125fd565b915091506124058a8a84848a8a612622565b9350935050505b965096945050505050565b60008060fe60026124288c8c6124d6565b6124328b8b6124d6565b61243c8a8a6124d6565b61244689896124d6565b600060405160200161245e979695949392919061394f565b6040516020818303038152906040529050600060028260405161248191906138d1565b602060405180830381855afa15801561249e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906124c191906138ed565b6040518190529b9a5050505050505050505050565b606060006124e560028461393b565b6124f090600261356c565b6040516001600160f81b031960f883901b166020820152602181018690529091506041016040516020818303038152906040529150505b92915050565b60006108a28383600060076401000003d0196126a9565b60008515806125535750818610155b8061255c575084155b806125675750818510155b1561257457506000611baf565b6000828061258457612584613925565b86870990506000838061259957612599613925565b8885806125a8576125a8613925565b8a8b0909905085156125d85783806125c2576125c2613925565b84806125d0576125d0613925565b878a09820890505b84156125f25783806125ec576125ec613925565b85820890505b149695505050505050565b600080848361260c8682613595565b612616919061393b565b91509150935093915050565b6000806000806000888b0361267257858061263f5761263f613925565b888b08600003612658576000809450945050505061240c565b6126668b8b60018a8a6127e4565b9194509250905061268b565b6126838b8b60018c8c60018c612987565b919450925090505b61269783838389612cba565b94509450505050965096945050505050565b60008560ff16600214806126c057508560ff166003145b6127325760405162461bcd60e51b815260206004820152602260248201527f496e76616c696420636f6d7072657373656420454320706f696e74207072656660448201527f69780000000000000000000000000000000000000000000000000000000000006064820152608401610682565b6000828061274257612742613925565b838061275057612750613925565b85858061275f5761275f613925565b888a0908848061277157612771613925565b858061277f5761277f613925565b898a0989090890506127a881600461279886600161356c565b6127a291906139e8565b85612d29565b9050600060026127bb60ff8a168461356c565b6127c5919061393b565b156127d9576127d48285613595565b6109cf565b509695505050505050565b6000806000856000036127fe57508691508590508461297c565b6000848061280e5761280e613925565b898a0990506000858061282357612823613925565b898a0990506000868061283857612838613925565b898a0990506000878061284d5761284d613925565b888061285b5761285b613925565b848e0960040990506000888061287357612873613925565b898061288157612881613925565b8a8061288f5761288f613925565b8586098c098a806128a2576128a2613925565b8760030908905088806128b7576128b7613925565b89806128c5576128c5613925565b8384086128d2908b613595565b8a806128e0576128e0613925565b83840908945088806128f4576128f4613925565b898061290257612902613925565b8a8061291057612910613925565b868709600809612920908b613595565b8a8061292e5761292e613925565b8b8061293c5761293c613925565b612946898e613595565b86088409089350888061295b5761295b613925565b898061296957612969613925565b8c8e096002099497509295509293505050505b955095509592505050565b6000808089158015612997575088155b156129a9575085915084905083612cad565b861580156129b5575085155b156129c7575088915087905086612cad565b6129cf612ef7565b84806129dd576129dd613925565b898a09815284806129f0576129f0613925565b81518a0960208201528480612a0757612a07613925565b86870960408201528480612a1d57612a1d613925565b6040820151870960608201526040805160808101909152808680612a4357612a43613925565b60408401518e0981526020018680612a5d57612a5d613925565b60608401518d0981526020018680612a7757612a77613925565b83518b0981526020018680612a8e57612a8e613925565b60208401518a09905260408101518151919250141580612ab657506060810151602082015114155b612b025760405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606401610682565b612b0a612ef7565b8580612b1857612b18613925565b8251612b249088613595565b60408401510881528580612b3a57612b3a613925565b6020830151612b499088613595565b60608401510860208201528580612b6257612b62613925565b8151800960408201528580612b7957612b79613925565b8151604083015109606082015260008680612b9657612b96613925565b6060830151612ba59089613595565b8880612bb357612bb3613925565b602085015180090890508680612bcb57612bcb613925565b8780612bd957612bd9613925565b8880612be757612be7613925565b6040850151865109600209612bfc9089613595565b8208905060008780612c1057612c10613925565b8880612c1e57612c1e613925565b612c28848b613595565b8a80612c3657612c36613925565b60408701518851090860208501510990508780612c5557612c55613925565b8880612c6357612c63613925565b6060850151602087015109612c78908a613595565b8208905060008880612c8c57612c8c613925565b8980612c9a57612c9a613925565b8b8f098551099297509095509093505050505b9750975097945050505050565b6000806000612cc98585612e1c565b905060008480612cdb57612cdb613925565b828309905060008580612cf057612cf0613925565b828a09905060008680612d0557612d05613925565b8780612d1357612d13613925565b8486098a09919a91995090975050505050505050565b600081600003612d7b5760405162461bcd60e51b815260206004820152600f60248201527f4d6f64756c7573206973207a65726f00000000000000000000000000000000006044820152606401610682565b83600003612d8b575060006108a2565b82600003612d9b575060016108a2565b60017f80000000000000000000000000000000000000000000000000000000000000005b8015612e1357838186161515870a85848509099150836002820486161515870a85848509099150836004820486161515870a85848509099150836008820486161515870a8584850909915060109004612dbf565b50949350505050565b60008215801590612e2d5750818314155b8015612e3857508115155b612e845760405162461bcd60e51b815260206004820152600e60248201527f496e76616c6964206e756d6265720000000000000000000000000000000000006044820152606401610682565b6000600183825b8615612eec57612e9b87836139e8565b9050828680612eac57612eac613925565b8780612eba57612eba613925565b858409612ec79089613595565b8608909450925086612ed9818361381f565b612ee39084613595565b97509150612e8b565b509195945050505050565b60405180608001604052806004906020820280368337509192915050565b60006040820163ffffffff851683526020604081850152818551808452606086019150828701935060005b81811015612f5c57845183529383019391830191600101612f40565b5090979650505050505050565b806040810183101561252757600080fd5b600060408284031215612f8c57600080fd5b6108a28383612f69565b60005b83811015612fb1578181015183820152602001612f99565b50506000910152565b6020815260008251806020840152612fd9816040850160208701612f96565b601f01601f19169190910160400192915050565b6001600160a01b038116811461141557600080fd5b67ffffffffffffffff8116811461141557600080fd5b60008060006060848603121561302d57600080fd5b833561303881612fed565b9250602084013561304881613002565b9150604084013561305881613002565b809150509250925092565b803563ffffffff8116811461307757600080fd5b919050565b6000806000806080858703121561309257600080fd5b8435935060208501356130a481613002565b92506130b260408601613063565b91506130c060608601613063565b905092959194509250565b6000602082840312156130dd57600080fd5b5035919050565b600080606083850312156130f757600080fd5b823561310281612fed565b91506131118460208501612f69565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156131545761315461311a565b60405290565b60405160a0810167ffffffffffffffff811182821017156131545761315461311a565b604051601f8201601f1916810167ffffffffffffffff811182821017156131a6576131a661311a565b604052919050565b803562ffffff8116811461307757600080fd5b60008060008385036101608112156131d857600080fd5b6131e185613063565b93506131ef60208601613063565b925061012080603f198301121561320557600080fd5b61320d613130565b915061321b60408701613063565b825261322960608701613063565b602083015261323a60808701613063565b604083015261324b60a08701613063565b606083015261325c60c08701613063565b608083015261326d60e087016131ae565b60a08301526101006132808188016131ae565b60c08401526132908288016131ae565b60e08401526132a261014088016131ae565b818401525050809150509250925092565b6000604082840312156132c557600080fd5b6040516040810181811067ffffffffffffffff821117156132e8576132e861311a565b604052823581526020928301359281019290925250919050565b600082601f83011261331357600080fd5b6040516040810181811067ffffffffffffffff821117156133365761333661311a565b806040525080604084018581111561334d57600080fd5b845b81811015612eec57803583526020928301920161334f565b600082601f83011261337857600080fd5b6040516080810181811067ffffffffffffffff8211171561339b5761339b61311a565b60405280608084018581111561334d57600080fd5b8035801515811461307757600080fd5b60008060008385036102608112156133d757600080fd5b6101a0808212156133e757600080fd5b6133ef61315a565b6133f98888613302565b81526134088860408901613367565b602082015260c087013560408201526134248860e08901613302565b6060820152613437886101208901613367565b6080820152945060a061019f198301121561345157600080fd5b61345961315a565b915085013561346781613002565b81526101c085013561347881613002565b602082015261348a6101e08601613063565b604082015261349c6102008601613063565b60608201526102208501356134b081612fed565b608082015291506134c461024085016133b0565b90509250925092565b6000604082840312156134df57600080fd5b6108a28383613302565b6000602082840312156134fb57600080fd5b81356108a281613002565b60006020828403121561351857600080fd5b81356108a281612fed565b60008060006060848603121561353857600080fd5b8335925061354860208501613063565b91506134c460408501613063565b634e487b7160e01b600052601160045260246000fd5b8082018082111561252757612527613556565b634e487b7160e01b600052603260045260246000fd5b8181038181111561252757612527613556565b634e487b7160e01b600052603160045260246000fd5b6000600182016135d0576135d0613556565b5060010190565b600080600080608085870312156135ed57600080fd5b8451935060208086015161360081613002565b604087015190945061361181612fed565b606087015190935067ffffffffffffffff8082111561362f57600080fd5b818801915088601f83011261364357600080fd5b8151818111156136555761365561311a565b8060051b915061366684830161317d565b818152918301840191848101908b84111561368057600080fd5b938501935b838510156136aa578451925061369a83612fed565b8282529385019390850190613685565b989b979a50959850505050505050565b63ffffffff8481168252838116602083015282548082166040840152610160830191906136f460608501838360201c1663ffffffff169052565b61370b60808501838360401c1663ffffffff169052565b61372260a08501838360601c1663ffffffff169052565b61373960c08501838360801c1663ffffffff169052565b62ffffff60a082901c811660e086015260b882901c811661010086015260d082901c1661012085015260e81c61014090930192909252949350505050565b82815260406020808301829052835191830182905260009184820191906060850190848115612f5c57845183529383019391830191600101612f40565b60408101818360005b60028110156137dc5781518352602092830192909101906001016137bd565b50505092915050565b6000602082840312156137f757600080fd5b81516108a281613002565b60006020828403121561381457600080fd5b81516108a281612fed565b600081600019048311821515161561383957613839613556565b500290565b60006001600160f81b0319808760f81b168352808660f81b166001840152508351613870816002850160208801612f96565b835190830190613887816002840160208801612f96565b016002019695505050505050565b600084516138a7818460208901612f96565b6001600160f81b031960f895861b8116919093019081529290931b16600182015260020192915050565b600082516138e3818460208701612f96565b9190910192915050565b6000602082840312156138ff57600080fd5b5051919050565b600060ff821660ff810361391c5761391c613556565b60010192915050565b634e487b7160e01b600052601260045260246000fd5b60008261394a5761394a613925565b500690565b60006001600160f81b0319808a60f81b168352808960f81b1660018401528751613980816002860160208c01612f96565b875190840190613997816002840160208c01612f96565b87519101906139ad816002840160208b01612f96565b86519101906139c3816002840160208a01612f96565b808201915050818560f81b166002820152600381019250505098975050505050505050565b6000826139f7576139f7613925565b50049056fea2646970667358221220b87286b5500a5efbea0a76fd602e0a10d4ba4ae40c12a98f71fcfc4fc6d613c064736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361061018a5760003560e01c80637d08430e116100d6578063c91d956c1161007f578063d2f9f9a711610059578063d2f9f9a71461053d578063f2fde38b1461055d578063fa1d85da1461057d57600080fd5b8063c91d956c146104e7578063c9feea4a14610507578063caf70c4a1461051d57600080fd5b8063a690d7ae116100b0578063a690d7ae14610473578063a812ea7214610491578063c3f909d4146104b157600080fd5b80637d08430e146103f957806388e75972146104195780638da5cb5b1461044157600080fd5b806340d6bb82116101385780636f64f03f116101125780636f64f03f146103a4578063715018a6146103c4578063786708e6146103d957600080fd5b806340d6bb821461029c5780635fbbc0d2146102c757806369bcdb7d1461037757600080fd5b8063181f5a7711610169578063181f5a77146102005780631a8928321461024c5780632f34077b1461027c57600080fd5b80620122911461018f57806306b5536c146101bb57806308821d58146101de575b600080fd5b34801561019b57600080fd5b506101a4610590565b6040516101b2929190612f15565b60405180910390f35b3480156101c757600080fd5b506101d06105fc565b6040519081526020016101b2565b3480156101ea57600080fd5b506101fe6101f9366004612f7a565b610613565b005b34801561020c57600080fd5b50604080518082018252601381527f565246436f6f7264696e61746f722076302e3100000000000000000000000000602082015290516101b29190612fba565b34801561025857600080fd5b5061026c610267366004613018565b6107bb565b60405190151581526020016101b2565b34801561028857600080fd5b506101d061029736600461307c565b6108a9565b3480156102a857600080fd5b506102b26101f481565b60405163ffffffff90911681526020016101b2565b3480156102d357600080fd5b506006546040805163ffffffff80841682526401000000008404811660208301526801000000000000000084048116928201929092526c01000000000000000000000000830482166060820152600160801b8304909116608082015262ffffff600160a01b8304811660a0830152600160b81b8304811660c0830152600160d01b8304811660e0830152600160e81b909204909116610100820152610120016101b2565b34801561038357600080fd5b506101d06103923660046130cb565b60009081526003602052604090205490565b3480156103b057600080fd5b506101fe6103bf3660046130e4565b6109db565b3480156103d057600080fd5b506101fe610aff565b3480156103e557600080fd5b506101fe6103f43660046131c1565b610b13565b34801561040557600080fd5b506101fe6104143660046132b3565b610d5f565b34801561042557600080fd5b50600854600954604080519283526020830191909152016101b2565b34801561044d57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101b2565b34801561047f57600080fd5b506007546001600160a01b031661045b565b34801561049d57600080fd5b506101d06104ac3660046133c0565b610db3565b3480156104bd57600080fd5b506005546040805163ffffffff8084168252650100000000009093049092166020830152016101b2565b3480156104f357600080fd5b506101fe6105023660046130cb565b611189565b34801561051357600080fd5b506101d060045481565b34801561052957600080fd5b506101d06105383660046134cd565b6111c6565b34801561054957600080fd5b506102b26105583660046134e9565b6111f6565b34801561056957600080fd5b506101fe610578366004613506565b611388565b6101d061058b366004613523565b611418565b600554600180546040805160208084028201810190925282815260009460609463ffffffff9091169390928391908301828280156105ed57602002820191906000526020600020905b8154815260200190600101908083116105d9575b50505050509050915091509091565b60095460085460009161060e9161356c565b905090565b61061b611705565b60408051808201825260009161064a9190849060029083908390808284376000920191909152506111c6915050565b6000818152600260205260409020549091506001600160a01b03168061068b57604051631dfd6e1360e21b8152600481018390526024015b60405180910390fd5b6000828152600260205260408120805473ffffffffffffffffffffffffffffffffffffffff191690555b6001548110156107725782600182815481106106d3576106d361357f565b9060005260206000200154036107605760018054600091906106f6908290613595565b815481106107065761070661357f565b9060005260206000200154905080600183815481106107275761072761357f565b6000918252602090912001556001805480610744576107446135a8565b6001900381819060005260206000200160009055905550610772565b8061076a816135be565b9150506106b5565b50806001600160a01b03167f72be339577868f868798bac2c93e52d6f034fef4689a9848996c14ebb7416c0d836040516107ae91815260200190565b60405180910390a2505050565b6000805b60015481101561089c576000610866600183815481106107e1576107e161357f565b60009182526020918290200154604080518084018390526001600160a01b038b168183015267ffffffffffffffff808b16606083015289166080808301919091528251808303909101815260a08201835280519085012060c082019390935260e080820184905282518083039091018152610100909101909152805192019190912091565b5060008181526003602052604090205490915015610889576001925050506108a2565b5080610894816135be565b9150506107bf565b50600090505b9392505050565b600554600090640100000000900460ff16156108d85760405163769dd35360e11b815260040160405180910390fd5b60008581526002602052604090205485906001600160a01b03166109125760405163c954459d60e01b815260048101829052602401610682565b600754604051633bd7108d60e11b815267ffffffffffffffff871660048201526000916001600160a01b0316906377ae211a90602401600060405180830381865afa158015610965573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098d91908101906135d7565b50505090506004548110156109c0576004805460405163b99e2ab760e01b81529182018390526024820152604401610682565b60006109cf888888888561175f565b98975050505050505050565b6109e3611705565b604080518082018252600091610a129190849060029083908390808284376000920191909152506111c6915050565b6000818152600260205260409020549091506001600160a01b031615610a67576040517f4a0b8fa700000000000000000000000000000000000000000000000000000000815260048101829052602401610682565b6000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03881690811790915560018054808201825594527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909301849055518381527fe729ae16526293f74ade739043022254f1489f616295a25bf72dfb4511ed73b891016107ae565b610b07611705565b610b116000611bb8565b565b610b1b611705565b604080516060808201835263ffffffff86811680845260006020808601919091528783169486018590526005805468ffffffffffffffffff191690921765010000000000909502949094179055845160068054948701518787015194880151608089015160a08a015160c08b015160e08c01516101008d015197891667ffffffffffffffff19909b169a909a1764010000000095891695909502949094177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff1668010000000000000000988816989098027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff16979097176c0100000000000000000000000092871692909202919091177fffffffffffffffffff00000000000000ffffffffffffffffffffffffffffffff16600160801b91909516027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff1693909317600160a01b62ffffff95861602177fffffff000000000000ffffffffffffffffffffffffffffffffffffffffffffff16600160b81b938516939093027fffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffff1692909217600160d01b94841694909402939093177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b929093169190910291909117815590517f107fdd8d898f7a380d4a448bb9882a3e1bb767bd803a09721d828b4ce217b04391610d5291869186916136ba565b60405180910390a1505050565b610d67611705565b80516008819055602080830151600981905560408051938452918301527f6e080c19f3bdc7644116da0ba00746ad7b6452f89b6634457e4a41c331fd03dd91015b60405180910390a150565b600554600090640100000000900460ff1615610de25760405163769dd35360e11b815260040160405180910390fd5b60005a90506000806000610df68888611c15565b9250925092506000876060015163ffffffff1667ffffffffffffffff811115610e2157610e2161311a565b604051908082528060200260200182016040528015610e4a578160200160208202803683370190505b50905060005b886060015163ffffffff16811015610ebe5760408051602081018590529081018290526060016040516020818303038152906040528051906020012060001c828281518110610ea157610ea161357f565b602090810291909101015280610eb6816135be565b915050610e50565b506000838152600360205260408082208290555181907f1fe543e30000000000000000000000000000000000000000000000000000000090610f069087908690602401613777565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092526005805464ff000000001916640100000000179055908b015160808c0151919250600091610f9a9163ffffffff169084611e0d565b6005805464ff000000001916905560075460208d0151604051633bd7108d60e11b815267ffffffffffffffff909116600482015291925060009182916001600160a01b0316906377ae211a90602401600060405180830381865afa158015611006573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261102e91908101906135d7565b50509150915060008c1561104357508161106c565b600554611069908c9065010000000000900463ffffffff16611064856111f6565b611e59565b90505b600760009054906101000a90046001600160a01b03166001600160a01b031663ea74b84d8f6020015183600260008f815260200190815260200160002060009054906101000a90046001600160a01b03166040518463ffffffff1660e01b81526004016111019392919067ffffffffffffffff93909316835260208301919091526001600160a01b0316604082015260600190565b600060405180830381600087803b15801561111b57600080fd5b505af115801561112f573d6000803e3d6000fd5b5050604080518b8152602081018590528715158183015290518c93507f221ad2e5b871cead1dd7f75c2fb223c0cfa34bdc049a15f3f82a1f0e943e605a92509081900360600190a29e9d5050505050505050505050505050565b611191611705565b60048190556040518181527fc9ac0b9c6116d44b14ac8198e0802802d07cf6956054e7542f0460a4d3423b3a90602001610da8565b6000816040516020016111d991906137b4565b604051602081830303815290604052805190602001209050919050565b604080516101208101825260065463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c01000000000000000000000000810483166060830152600160801b8104909216608082015262ffffff600160a01b8304811660a08301819052600160b81b8404821660c0840152600160d01b8404821660e0840152600160e81b9093041661010082015260009167ffffffffffffffff8416116112b1575192915050565b8267ffffffffffffffff168160a0015162ffffff161080156112e657508060c0015162ffffff168367ffffffffffffffff1611155b156112f5576020015192915050565b8267ffffffffffffffff168160c0015162ffffff1610801561132a57508060e0015162ffffff168367ffffffffffffffff1611155b15611339576040015192915050565b8267ffffffffffffffff168160e0015162ffffff1610801561136f575080610100015162ffffff168367ffffffffffffffff1611155b1561137e576060015192915050565b6080015192915050565b611390611705565b6001600160a01b03811661140c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610682565b61141581611bb8565b50565b600554600090640100000000900460ff16156114475760405163769dd35360e11b815260040160405180910390fd5b60008481526002602052604090205484906001600160a01b03166114815760405163c954459d60e01b815260048101829052602401610682565b600061148b6105fc565b9050803410156114b75760405163b99e2ab760e01b815234600482015260248101829052604401610682565b600754604080517f9dca362f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691639dca362f916004808301926020929190829003018187875af115801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f91906137e5565b6007546040517f7341c10c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201523360248201529192506001600160a01b031690637341c10c90604401600060405180830381600087803b1580156115ae57600080fd5b505af11580156115c2573d6000803e3d6000fd5b5050505060006001905060006115db89848a8a8661175f565b6007546040517f1376583800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff861660048201529192506001600160a01b03169063137658389086906024016000604051808303818588803b15801561164557600080fd5b505af1158015611659573d6000803e3d6000fd5b50505050506000843461166c9190613595565b905080156116f857604051600090339083908381818185875af1925050503d80600081146116b6576040519150601f19603f3d011682016040523d82523d6000602084013e6116bb565b606091505b50509050806116f6576040517fef7a4b6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b5098975050505050505050565b6000546001600160a01b03163314610b115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610682565b6007546040517f4a41897300000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8616600482015260009182916001600160a01b0390911690634a418973906024016020604051808303816000875af11580156117d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f59190613802565b90506001600160a01b038116611837576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6007546040517f6d5e8a7900000000000000000000000000000000000000000000000000000000815233600482015267ffffffffffffffff881660248201526000916001600160a01b031690636d5e8a7990604401602060405180830381865afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd91906137e5565b90508067ffffffffffffffff16600003611925576040517ff0019fe600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff88166004820152336024820152604401610682565b60055463ffffffff908116908716111561197f576005546040517ff5d7e01e00000000000000000000000000000000000000000000000000000000815263ffffffff80891660048301529091166024820152604401610682565b6101f463ffffffff861611156119d1576040517f47386bec00000000000000000000000000000000000000000000000000000000815263ffffffff861660048201526101f46024820152604401610682565b6007546040517f4000a00700000000000000000000000000000000000000000000000000000000815233600482015267ffffffffffffffff891660248201526000916001600160a01b031690634000a007906044016020604051808303816000875af1158015611a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6991906137e5565b6040805160208082018d9052338284015267ffffffffffffffff808d16606084015284166080808401919091528351808403909101815260a08301845280519082012060c083018e905260e080840182905284518085039091018152610100909301909352815191012091925060009182916040805160208101849052439181019190915267ffffffffffffffff8d16606082015263ffffffff808d1660808301528b1660a08201523360c0820152919350915060e00160408051601f19818403018152828252805160209182012060008681526003835283902055848352820183905263ffffffff808c1691830191909152891660608201528715156080820152339067ffffffffffffffff8c16908d907f88c0534cab9d18b5e2f8fb9a9d142426403b507f2343cfaafe6cfe45e9900e309060a00160405180910390a45093505050505b95945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000611c2785600001516111c6565b6000818152600260205260409020549093506001600160a01b031680611c6357604051631dfd6e1360e21b815260048101859052602401610682565b6040808701518151602081018790529182015260600160408051601f198184030181529181528151602092830120600081815260039093529082205490945090819003611cdc576040517f3688124a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516020808801516040808a015160608b015160808c01519251611d48968b96909594910195865267ffffffffffffffff948516602087015292909316604085015263ffffffff90811660608501529190911660808301526001600160a01b031660a082015260c00190565b604051602081830303815290604052805190602001208114611d96576040517fd529142c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8551604080890151905167ffffffffffffffff9092164091600091611dc8918490602001918252602082015260400190565b60408051601f19818403018152828252805160209182012090830152016040516020818303038152906040529050611e008982611eaa565b9450505050509250925092565b60005a611388811015611e1f57600080fd5b611388810390508460408204820311611e3757600080fd5b50823b611e4357600080fd5b60008083516020850160008789f1949350505050565b6000805a611e67868661356c565b611e719190613595565b611e7b903a61381f565b90506000611e9463ffffffff851664e8d4a5100061381f565b9050611ea0818361356c565b9695505050505050565b6000611ec9836000015184602001518486606001518760800151611f02565b50505060209081015180519082015160408051808501939093528281019190915280518083038201815260609092019052805191012090565b6000806000611f11888761205b565b606089015160408a01518b5160208d8101518b51918c0151969850949650611f3f95939492939192916121c3565b1580611f66575060608701518451611f649190849084908860015b602002015161230b565b155b80611f8c5750604080880151885160208a015192870151611f8a9390886003611f5a565b155b15611f9c57600092505050611baf565b83516020850151604086015160608701516000938493611fc8939192909190856401000003d0196123e2565b8a516020808d01518b51918c0151949650929450600093611ff0938993899390928989612417565b60408b0151909150608082901c1461204a5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610682565b5060019a9950505050505050505050565b6000808060fe600161207a8784602002015188600160200201516124d6565b8660405160200161208e949392919061383e565b604051602081830303815290604052905060005b6101008160ff1610156121735760006002838360006040516020016120c993929190613895565b60408051601f19818403018152908290526120e3916138d1565b602060405180830381855afa158015612100573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061212391906138ed565b905080600061213360028361252d565b905061214a8282600060076401000003d019612544565b1561215d5790955093506121bc92505050565b505050808061216b90613906565b9150506120a2565b5060405162461bcd60e51b815260206004820152601860248201527f4e6f2076616c696420706f696e742077617320666f756e6400000000000000006044820152606401610682565b9250929050565b60008070014551231950b75fc4402da1732fc9bebe196121e38982613595565b6121ed919061393b565b905070014551231950b75fc4402da1732fc9bebe198682099050600070014551231950b75fc4402da1732fc9bebe196122268982613595565b612230919061393b565b9050600060018361224260028a61393b565b60000361225057601b612253565b601c5b8a70014551231950b75fc4402da1732fc9bebe198c87096040805160008152602081018083529590955260ff909316928401929092526060830152608082015260a0016020604051602081039080840390855afa1580156122b8573d6000803e3d6000fd5b505060408051601f1981015160208083019a909a5281830198909852815180820383018152606090910190915280519701969096206001600160a01b039081169516949094149998505050505050505050565b60008060018161231c60028861393b565b60000361232a57601b61232d565b601c5b8870014551231950b75fc4402da1732fc9bebe198a8c096040805160008152602081018083529590955260ff909316928401929092526060830152608082015260a0016020604051602081039080840390855afa158015612392573d6000803e3d6000fd5b505060408051601f1981015160208083019890985281830196909652815180820383018152606090910190915280519501949094206001600160a01b039081169316929092149695505050505050565b6000806000806123f38888876125fd565b915091506124058a8a84848a8a612622565b9350935050505b965096945050505050565b60008060fe60026124288c8c6124d6565b6124328b8b6124d6565b61243c8a8a6124d6565b61244689896124d6565b600060405160200161245e979695949392919061394f565b6040516020818303038152906040529050600060028260405161248191906138d1565b602060405180830381855afa15801561249e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906124c191906138ed565b6040518190529b9a5050505050505050505050565b606060006124e560028461393b565b6124f090600261356c565b6040516001600160f81b031960f883901b166020820152602181018690529091506041016040516020818303038152906040529150505b92915050565b60006108a28383600060076401000003d0196126a9565b60008515806125535750818610155b8061255c575084155b806125675750818510155b1561257457506000611baf565b6000828061258457612584613925565b86870990506000838061259957612599613925565b8885806125a8576125a8613925565b8a8b0909905085156125d85783806125c2576125c2613925565b84806125d0576125d0613925565b878a09820890505b84156125f25783806125ec576125ec613925565b85820890505b149695505050505050565b600080848361260c8682613595565b612616919061393b565b91509150935093915050565b6000806000806000888b0361267257858061263f5761263f613925565b888b08600003612658576000809450945050505061240c565b6126668b8b60018a8a6127e4565b9194509250905061268b565b6126838b8b60018c8c60018c612987565b919450925090505b61269783838389612cba565b94509450505050965096945050505050565b60008560ff16600214806126c057508560ff166003145b6127325760405162461bcd60e51b815260206004820152602260248201527f496e76616c696420636f6d7072657373656420454320706f696e74207072656660448201527f69780000000000000000000000000000000000000000000000000000000000006064820152608401610682565b6000828061274257612742613925565b838061275057612750613925565b85858061275f5761275f613925565b888a0908848061277157612771613925565b858061277f5761277f613925565b898a0989090890506127a881600461279886600161356c565b6127a291906139e8565b85612d29565b9050600060026127bb60ff8a168461356c565b6127c5919061393b565b156127d9576127d48285613595565b6109cf565b509695505050505050565b6000806000856000036127fe57508691508590508461297c565b6000848061280e5761280e613925565b898a0990506000858061282357612823613925565b898a0990506000868061283857612838613925565b898a0990506000878061284d5761284d613925565b888061285b5761285b613925565b848e0960040990506000888061287357612873613925565b898061288157612881613925565b8a8061288f5761288f613925565b8586098c098a806128a2576128a2613925565b8760030908905088806128b7576128b7613925565b89806128c5576128c5613925565b8384086128d2908b613595565b8a806128e0576128e0613925565b83840908945088806128f4576128f4613925565b898061290257612902613925565b8a8061291057612910613925565b868709600809612920908b613595565b8a8061292e5761292e613925565b8b8061293c5761293c613925565b612946898e613595565b86088409089350888061295b5761295b613925565b898061296957612969613925565b8c8e096002099497509295509293505050505b955095509592505050565b6000808089158015612997575088155b156129a9575085915084905083612cad565b861580156129b5575085155b156129c7575088915087905086612cad565b6129cf612ef7565b84806129dd576129dd613925565b898a09815284806129f0576129f0613925565b81518a0960208201528480612a0757612a07613925565b86870960408201528480612a1d57612a1d613925565b6040820151870960608201526040805160808101909152808680612a4357612a43613925565b60408401518e0981526020018680612a5d57612a5d613925565b60608401518d0981526020018680612a7757612a77613925565b83518b0981526020018680612a8e57612a8e613925565b60208401518a09905260408101518151919250141580612ab657506060810151602082015114155b612b025760405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606401610682565b612b0a612ef7565b8580612b1857612b18613925565b8251612b249088613595565b60408401510881528580612b3a57612b3a613925565b6020830151612b499088613595565b60608401510860208201528580612b6257612b62613925565b8151800960408201528580612b7957612b79613925565b8151604083015109606082015260008680612b9657612b96613925565b6060830151612ba59089613595565b8880612bb357612bb3613925565b602085015180090890508680612bcb57612bcb613925565b8780612bd957612bd9613925565b8880612be757612be7613925565b6040850151865109600209612bfc9089613595565b8208905060008780612c1057612c10613925565b8880612c1e57612c1e613925565b612c28848b613595565b8a80612c3657612c36613925565b60408701518851090860208501510990508780612c5557612c55613925565b8880612c6357612c63613925565b6060850151602087015109612c78908a613595565b8208905060008880612c8c57612c8c613925565b8980612c9a57612c9a613925565b8b8f098551099297509095509093505050505b9750975097945050505050565b6000806000612cc98585612e1c565b905060008480612cdb57612cdb613925565b828309905060008580612cf057612cf0613925565b828a09905060008680612d0557612d05613925565b8780612d1357612d13613925565b8486098a09919a91995090975050505050505050565b600081600003612d7b5760405162461bcd60e51b815260206004820152600f60248201527f4d6f64756c7573206973207a65726f00000000000000000000000000000000006044820152606401610682565b83600003612d8b575060006108a2565b82600003612d9b575060016108a2565b60017f80000000000000000000000000000000000000000000000000000000000000005b8015612e1357838186161515870a85848509099150836002820486161515870a85848509099150836004820486161515870a85848509099150836008820486161515870a8584850909915060109004612dbf565b50949350505050565b60008215801590612e2d5750818314155b8015612e3857508115155b612e845760405162461bcd60e51b815260206004820152600e60248201527f496e76616c6964206e756d6265720000000000000000000000000000000000006044820152606401610682565b6000600183825b8615612eec57612e9b87836139e8565b9050828680612eac57612eac613925565b8780612eba57612eba613925565b858409612ec79089613595565b8608909450925086612ed9818361381f565b612ee39084613595565b97509150612e8b565b509195945050505050565b60405180608001604052806004906020820280368337509192915050565b60006040820163ffffffff851683526020604081850152818551808452606086019150828701935060005b81811015612f5c57845183529383019391830191600101612f40565b5090979650505050505050565b806040810183101561252757600080fd5b600060408284031215612f8c57600080fd5b6108a28383612f69565b60005b83811015612fb1578181015183820152602001612f99565b50506000910152565b6020815260008251806020840152612fd9816040850160208701612f96565b601f01601f19169190910160400192915050565b6001600160a01b038116811461141557600080fd5b67ffffffffffffffff8116811461141557600080fd5b60008060006060848603121561302d57600080fd5b833561303881612fed565b9250602084013561304881613002565b9150604084013561305881613002565b809150509250925092565b803563ffffffff8116811461307757600080fd5b919050565b6000806000806080858703121561309257600080fd5b8435935060208501356130a481613002565b92506130b260408601613063565b91506130c060608601613063565b905092959194509250565b6000602082840312156130dd57600080fd5b5035919050565b600080606083850312156130f757600080fd5b823561310281612fed565b91506131118460208501612f69565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156131545761315461311a565b60405290565b60405160a0810167ffffffffffffffff811182821017156131545761315461311a565b604051601f8201601f1916810167ffffffffffffffff811182821017156131a6576131a661311a565b604052919050565b803562ffffff8116811461307757600080fd5b60008060008385036101608112156131d857600080fd5b6131e185613063565b93506131ef60208601613063565b925061012080603f198301121561320557600080fd5b61320d613130565b915061321b60408701613063565b825261322960608701613063565b602083015261323a60808701613063565b604083015261324b60a08701613063565b606083015261325c60c08701613063565b608083015261326d60e087016131ae565b60a08301526101006132808188016131ae565b60c08401526132908288016131ae565b60e08401526132a261014088016131ae565b818401525050809150509250925092565b6000604082840312156132c557600080fd5b6040516040810181811067ffffffffffffffff821117156132e8576132e861311a565b604052823581526020928301359281019290925250919050565b600082601f83011261331357600080fd5b6040516040810181811067ffffffffffffffff821117156133365761333661311a565b806040525080604084018581111561334d57600080fd5b845b81811015612eec57803583526020928301920161334f565b600082601f83011261337857600080fd5b6040516080810181811067ffffffffffffffff8211171561339b5761339b61311a565b60405280608084018581111561334d57600080fd5b8035801515811461307757600080fd5b60008060008385036102608112156133d757600080fd5b6101a0808212156133e757600080fd5b6133ef61315a565b6133f98888613302565b81526134088860408901613367565b602082015260c087013560408201526134248860e08901613302565b6060820152613437886101208901613367565b6080820152945060a061019f198301121561345157600080fd5b61345961315a565b915085013561346781613002565b81526101c085013561347881613002565b602082015261348a6101e08601613063565b604082015261349c6102008601613063565b60608201526102208501356134b081612fed565b608082015291506134c461024085016133b0565b90509250925092565b6000604082840312156134df57600080fd5b6108a28383613302565b6000602082840312156134fb57600080fd5b81356108a281613002565b60006020828403121561351857600080fd5b81356108a281612fed565b60008060006060848603121561353857600080fd5b8335925061354860208501613063565b91506134c460408501613063565b634e487b7160e01b600052601160045260246000fd5b8082018082111561252757612527613556565b634e487b7160e01b600052603260045260246000fd5b8181038181111561252757612527613556565b634e487b7160e01b600052603160045260246000fd5b6000600182016135d0576135d0613556565b5060010190565b600080600080608085870312156135ed57600080fd5b8451935060208086015161360081613002565b604087015190945061361181612fed565b606087015190935067ffffffffffffffff8082111561362f57600080fd5b818801915088601f83011261364357600080fd5b8151818111156136555761365561311a565b8060051b915061366684830161317d565b818152918301840191848101908b84111561368057600080fd5b938501935b838510156136aa578451925061369a83612fed565b8282529385019390850190613685565b989b979a50959850505050505050565b63ffffffff8481168252838116602083015282548082166040840152610160830191906136f460608501838360201c1663ffffffff169052565b61370b60808501838360401c1663ffffffff169052565b61372260a08501838360601c1663ffffffff169052565b61373960c08501838360801c1663ffffffff169052565b62ffffff60a082901c811660e086015260b882901c811661010086015260d082901c1661012085015260e81c61014090930192909252949350505050565b82815260406020808301829052835191830182905260009184820191906060850190848115612f5c57845183529383019391830191600101612f40565b60408101818360005b60028110156137dc5781518352602092830192909101906001016137bd565b50505092915050565b6000602082840312156137f757600080fd5b81516108a281613002565b60006020828403121561381457600080fd5b81516108a281612fed565b600081600019048311821515161561383957613839613556565b500290565b60006001600160f81b0319808760f81b168352808660f81b166001840152508351613870816002850160208801612f96565b835190830190613887816002840160208801612f96565b016002019695505050505050565b600084516138a7818460208901612f96565b6001600160f81b031960f895861b8116919093019081529290931b16600182015260020192915050565b600082516138e3818460208701612f96565b9190910192915050565b6000602082840312156138ff57600080fd5b5051919050565b600060ff821660ff810361391c5761391c613556565b60010192915050565b634e487b7160e01b600052601260045260246000fd5b60008261394a5761394a613925565b500690565b60006001600160f81b0319808a60f81b168352808960f81b1660018401528751613980816002860160208c01612f96565b875190840190613997816002840160208c01612f96565b87519101906139ad816002840160208b01612f96565b86519101906139c3816002840160208a01612f96565b808201915050818560f81b166002820152600381019250505098975050505050505050565b6000826139f7576139f7613925565b50049056fea2646970667358221220b87286b5500a5efbea0a76fd602e0a10d4ba4ae40c12a98f71fcfc4fc6d613c064736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deregisterProvingKey(uint256[2])": {
        "params": {
          "publicProvingKey": "key that oracle can use to submit VRF fulfillments"
        }
      },
      "getCommitment(uint256)": {
        "details": "used to determine if a request is fulfilled or not",
        "params": {
          "requestId": "id of request"
        }
      },
      "getRequestConfig()": {
        "returns": {
          "_0": "maxGasLimit global max for request gas limit",
          "_1": "s_provingKeyHashes list of registered key hashes"
        }
      },
      "hashOfKey(uint256[2])": {
        "params": {
          "publicKey": "the key to return the hash of"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingRequestExists(address,uint64,uint64)": {
        "params": {
          "accId": "- ID of the account"
        },
        "returns": {
          "_0": "true if there exists at least one unfulfilled request for the account, false otherwise."
        }
      },
      "registerProvingKey(address,uint256[2])": {
        "params": {
          "oracle": "address of the oracle",
          "publicProvingKey": "key that oracle can use to submit VRF fulfillments"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestRandomWords(bytes32,uint64,uint32,uint32)": {
        "params": {
          "accId": "- The ID of the account. Must be funded with the minimum account balance required for the selected keyHash.",
          "callbackGasLimit": "- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]",
          "keyHash": "- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.",
          "numWords": "- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle."
        },
        "returns": {
          "requestId": "- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."
        }
      },
      "setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))": {
        "params": {
          "feeConfig": "fee tier configuration",
          "gasAfterPaymentCalculation": "gas used in doing accounting after completing the gas measurement",
          "maxGasLimit": "global max for request gas limit"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "typeAndVersion()": {
        "returns": {
          "_0": "Type and version string"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deregisterProvingKey(uint256[2])": {
        "notice": "Deregisters a proving key to an oracle."
      },
      "getCommitment(uint256)": {
        "notice": "Get request commitment"
      },
      "getRequestConfig()": {
        "notice": "Get configuration relevant for making requests"
      },
      "hashOfKey(uint256[2])": {
        "notice": "Returns the proving key hash key associated with this public key"
      },
      "pendingRequestExists(address,uint64,uint64)": {
        "notice": "Check to see if there exists a request commitment consumers for all consumers and keyhashes for a given acc."
      },
      "registerProvingKey(address,uint256[2])": {
        "notice": "Registers a proving key to an oracle."
      },
      "requestRandomWords(bytes32,uint64,uint32,uint32)": {
        "notice": "Request a set of random words."
      },
      "setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))": {
        "notice": "Sets the configuration of the VRF coordinator"
      },
      "typeAndVersion()": {
        "notice": "The type and version of this contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 546,
        "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8821,
        "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
        "label": "s_provingKeyHashes",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 8825,
        "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
        "label": "s_provingKeys",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 8829,
        "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
        "label": "s_requestCommitments",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 8831,
        "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
        "label": "s_minBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 8852,
        "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
        "label": "s_config",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Config)8849_storage"
      },
      {
        "astId": 8874,
        "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
        "label": "s_feeConfig",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(FeeConfig)8871_storage"
      },
      {
        "astId": 8877,
        "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
        "label": "s_prepayment",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(PrepaymentInterface)10560"
      },
      {
        "astId": 8885,
        "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
        "label": "s_directPaymentConfig",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(DirectPaymentConfig)8882_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(PrepaymentInterface)10560": {
        "encoding": "inplace",
        "label": "contract PrepaymentInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(Config)8849_storage": {
        "encoding": "inplace",
        "label": "struct VRFCoordinator.Config",
        "members": [
          {
            "astId": 8844,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "maxGasLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8846,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "reentrancyLock",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8848,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "gasAfterPaymentCalculation",
            "offset": 5,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DirectPaymentConfig)8882_storage": {
        "encoding": "inplace",
        "label": "struct VRFCoordinator.DirectPaymentConfig",
        "members": [
          {
            "astId": 8879,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "fulfillmentFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8881,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "baseFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FeeConfig)8871_storage": {
        "encoding": "inplace",
        "label": "struct VRFCoordinator.FeeConfig",
        "members": [
          {
            "astId": 8854,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier1",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8856,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier2",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8858,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier3",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8860,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier4",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8862,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier5",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8864,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "reqsForTier2",
            "offset": 20,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 8866,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "reqsForTier3",
            "offset": 23,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 8868,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "reqsForTier4",
            "offset": 26,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 8870,
            "contract": "src/v0.1/VRFCoordinator.sol:VRFCoordinator",
            "label": "reqsForTier5",
            "offset": 29,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}