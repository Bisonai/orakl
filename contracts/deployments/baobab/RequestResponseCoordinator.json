{
  "address": "0x671cfC6Df033C0773e0B65815433C5E264FeA63f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prepayment",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "have",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "want",
          "type": "uint32"
        }
      ],
      "name": "GasLimitTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectCommitment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "have",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "want",
          "type": "uint256"
        }
      ],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "InvalidConsumer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCorrespondingRequest",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "NoSuchOracle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotRequestOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrant",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RefundFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "UnregisteredOracleFulfillment",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier3",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier4",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier5",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier2",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier3",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier4",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier5",
              "type": "uint24"
            }
          ],
          "indexed": false,
          "internalType": "struct RequestResponseCoordinator.FeeConfig",
          "name": "feeConfig",
          "type": "tuple"
        }
      ],
      "name": "ConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequestCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "response",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "jobId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDirectPayment",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fulfillmentFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseFee",
          "type": "uint256"
        }
      ],
      "name": "DirectPaymentConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBalance",
          "type": "uint256"
        }
      ],
      "name": "MinBalanceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "cancelRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "deregisterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDirectPaymentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "response",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "blockNum",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accId",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "internalType": "struct RequestResponseCoordinatorInterface.RequestCommitment",
          "name": "rc",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isDirectPayment",
          "type": "bool"
        }
      ],
      "name": "fulfillDataRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDirectPaymentConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier2",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier3",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier4",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeKlayPPMTier5",
          "type": "uint32"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier2",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier3",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier4",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier5",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "reqCount",
          "type": "uint64"
        }
      ],
      "name": "getFeeTier",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrepaymentAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "pendingRequestExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "registerOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callbackAddr",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "callbackFunc",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "buf",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "capacity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Buffer.buffer",
              "name": "buf",
              "type": "tuple"
            }
          ],
          "internalType": "struct Orakl.Request",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "requestData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callbackAddr",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "callbackFunc",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "buf",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "capacity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Buffer.buffer",
              "name": "buf",
              "type": "tuple"
            }
          ],
          "internalType": "struct Orakl.Request",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "requestData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_minBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier3",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier4",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentFlatFeeKlayPPMTier5",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier2",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier3",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier4",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "reqsForTier5",
              "type": "uint24"
            }
          ],
          "internalType": "struct RequestResponseCoordinator.FeeConfig",
          "name": "feeConfig",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fulfillmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct RequestResponseCoordinator.DirectPaymentConfig",
          "name": "directPaymentConfig",
          "type": "tuple"
        }
      ],
      "name": "setDirectPaymentConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minBalance",
          "type": "uint256"
        }
      ],
      "name": "setMinBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typeAndVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x71ced66586448a21ce3565f97ecb5fdcdbfeeda38ed0624fae106cc8a6777115",
  "receipt": {
    "to": null,
    "from": "0xAe3d14Ed2B8a0B71D05DEF51baBfAeFBcE33054d",
    "contractAddress": "0x671cfC6Df033C0773e0B65815433C5E264FeA63f",
    "transactionIndex": 1,
    "gasUsed": "2860097",
    "logsBloom": "0x
    "blockHash": "0xc6eaee408253e532af41f37c8288705bd9e2da080dbd9ea1a9b31f98e081ce09",
    "transactionHash": "0x71ced66586448a21ce3565f97ecb5fdcdbfeeda38ed0624fae106cc8a6777115",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 114260035,
        "transactionHash": "0x71ced66586448a21ce3565f97ecb5fdcdbfeeda38ed0624fae106cc8a6777115",
        "address": "0x671cfC6Df033C0773e0B65815433C5E264FeA63f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae3d14ed2b8a0b71d05def51babfaefbce33054d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc6eaee408253e532af41f37c8288705bd9e2da080dbd9ea1a9b31f98e081ce09"
      }
    ],
    "blockNumber": 114260035,
    "cumulativeGasUsed": "2925651",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE22e67F7ce4b6FA9E3ABCB6125Fb53Cb577B34Ef"
  ],
  "numDeployments": 1,
  "solcInputHash": "fa56e8cc296933aafbed3a3276231c2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prepayment\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"have\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"want\",\"type\":\"uint32\"}],\"name\":\"GasLimitTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectCommitment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"have\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"want\",\"type\":\"uint256\"}],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCorrespondingRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NoSuchOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRequestOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"UnregisteredOracleFulfillment\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"struct RequestResponseCoordinator.FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"response\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDirectPayment\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fulfillmentFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"name\":\"DirectPaymentConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"}],\"name\":\"MinBalanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"deregisterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDirectPaymentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"response\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"internalType\":\"struct RequestResponseCoordinatorInterface.RequestCommitment\",\"name\":\"rc\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isDirectPayment\",\"type\":\"bool\"}],\"name\":\"fulfillDataRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDirectPaymentConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"}],\"name\":\"getFeeTier\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrepaymentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"registerOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct Buffer.buffer\",\"name\":\"buf\",\"type\":\"tuple\"}],\"internalType\":\"struct Orakl.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"requestData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct Buffer.buffer\",\"name\":\"buf\",\"type\":\"tuple\"}],\"internalType\":\"struct Orakl.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"requestData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_minBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeKlayPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"internalType\":\"struct RequestResponseCoordinator.FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fulfillmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestResponseCoordinator.DirectPaymentConfig\",\"name\":\"directPaymentConfig\",\"type\":\"tuple\"}],\"name\":\"setDirectPaymentConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"}],\"name\":\"setMinBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelRequest(uint256)\":{\"params\":{\"requestId\":\"- ID of the Oracle Request\"}},\"deregisterOracle(address)\":{\"params\":{\"oracle\":\"address of the oracle\"}},\"fulfillDataRequest(uint256,uint256,(uint64,uint64,uint32,address),bool)\":{\"params\":{\"rc\":\"request commitment pre-image, committed to at request time\",\"requestId\":\"- ID of the Oracle Request\",\"response\":\"- Return data for fulfilment\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingRequestExists(address,uint64,uint64)\":{\"params\":{\"accId\":\"- ID of the account\"},\"returns\":{\"_0\":\"true if there exists at least one unfulfilled request for the account, false otherwise.\"}},\"registerOracle(address)\":{\"params\":{\"oracle\":\"address of the oracle\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint64)\":{\"details\":\"Generates and stores a request ID, increments the local nonce, creates a request on the target oracle contract.Emits Requested event.\",\"params\":{\"accId\":\"- The ID of the account. Must be funded with the minimum account balance required for the selected keyHash.\",\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRequest callback. Note that gasleft() inside fulfillRequest may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRequest. The acceptable range is [0, maxGasLimit]\",\"req\":\"The initialized Request\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\"}},\"setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))\":{\"params\":{\"feeConfig\":\"fee tier configuration\",\"gasAfterPaymentCalculation\":\"gas used in doing accounting after completing the gas measurement\",\"maxGasLimit\":\"global max for request gas limit\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"typeAndVersion()\":{\"returns\":{\"_0\":\"Type and version string\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelRequest(uint256)\":{\"notice\":\"Cancelling oracle request\"},\"deregisterOracle(address)\":{\"notice\":\"Deregister an oracle\"},\"fulfillDataRequest(uint256,uint256,(uint64,uint64,uint32,address),bool)\":{\"notice\":\"Fulfils oracle request\"},\"pendingRequestExists(address,uint64,uint64)\":{\"notice\":\"Check to see if there exists a request commitment consumers for all consumers and keyhashes for a given acc.\"},\"registerOracle(address)\":{\"notice\":\"Register an oracle\"},\"requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint64)\":{\"notice\":\"Creates a request to RequestResponse oracle\"},\"setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))\":{\"notice\":\"Sets the general configuration\"},\"typeAndVersion()\":{\"notice\":\"The type and version of this contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/RequestResponseCoordinator.sol\":\"RequestResponseCoordinator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/v0.1/RequestResponseConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/RequestResponseCoordinatorInterface.sol\\\";\\n\\nabstract contract RequestResponseConsumerBase {\\n    using Orakl for Orakl.Request;\\n\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    RequestResponseCoordinatorInterface public immutable COORDINATOR;\\n\\n    /**\\n     * @param _requestResponseCoordinator address of RequestResponseCoordinator contract\\n     */\\n    constructor(address _requestResponseCoordinator) {\\n        COORDINATOR = RequestResponseCoordinatorInterface(_requestResponseCoordinator);\\n    }\\n\\n    /**\\n     * @notice Build a request using the Orakl library\\n     * @param jobId the job specification ID that the request is created for\\n     * @return req request in memory\\n     */\\n    function buildRequest(bytes32 jobId) internal view returns (Orakl.Request memory req) {\\n        return req.initialize(jobId, address(COORDINATOR), COORDINATOR.fulfillDataRequest.selector);\\n    }\\n\\n    function fulfillDataRequest(uint256 requestId, uint256 response) internal virtual;\\n\\n    function rawFulfillDataRequest(uint256 requestId, uint256 response) external {\\n        address coordinatorAddress = address(COORDINATOR);\\n        if (msg.sender != coordinatorAddress) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\",\"keccak256\":\"0x3bea8d98b907c0a5db98ce4fb23043f60f27c6d7ff3217064ec34d4728c39e93\",\"license\":\"MIT\"},\"src/v0.1/RequestResponseCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/CoordinatorBaseInterface.sol\\\";\\nimport \\\"./interfaces/RequestResponseCoordinatorInterface.sol\\\";\\nimport \\\"./interfaces/PrepaymentInterface.sol\\\";\\nimport \\\"./interfaces/TypeAndVersionInterface.sol\\\";\\nimport \\\"./RequestResponseConsumerBase.sol\\\";\\nimport \\\"./libraries/Orakl.sol\\\";\\n\\ncontract RequestResponseCoordinator is\\n    CoordinatorBaseInterface,\\n    Ownable,\\n    RequestResponseCoordinatorInterface,\\n    TypeAndVersionInterface\\n{\\n    using Orakl for Orakl.Request;\\n\\n    // 5k is plenty for an EXTCODESIZE call (2600) + warm CALL (100)\\n    // and some arithmetic operations.\\n    uint256 private constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n\\n    /* oracle address */\\n    /* registration status */\\n    mapping(address => bool) private s_oracles;\\n\\n    /* requestID */\\n    /* commitment */\\n    mapping(uint256 => bytes32) private s_requestCommitments;\\n\\n    /* requestID */\\n    /* owner */\\n    mapping(uint256 => address) private s_requestOwner;\\n\\n    address[] private s_registeredOracles;\\n\\n    uint256 public s_minBalance;\\n\\n    PrepaymentInterface s_prepayment;\\n\\n    struct Config {\\n        uint32 maxGasLimit;\\n        // Reentrancy protection.\\n        bool reentrancyLock;\\n        // Gas to cover oracle payment after we calculate the payment.\\n        // We make it configurable in case those operations are repriced.\\n        uint32 gasAfterPaymentCalculation;\\n    }\\n    Config private s_config;\\n\\n    struct FeeConfig {\\n        // Flat fee charged per fulfillment in millionths of KLAY\\n        // So fee range is [0, 2^32/10^6].\\n        uint32 fulfillmentFlatFeeKlayPPMTier1;\\n        uint32 fulfillmentFlatFeeKlayPPMTier2;\\n        uint32 fulfillmentFlatFeeKlayPPMTier3;\\n        uint32 fulfillmentFlatFeeKlayPPMTier4;\\n        uint32 fulfillmentFlatFeeKlayPPMTier5;\\n        uint24 reqsForTier2;\\n        uint24 reqsForTier3;\\n        uint24 reqsForTier4;\\n        uint24 reqsForTier5;\\n    }\\n    FeeConfig private s_feeConfig;\\n\\n    struct DirectPaymentConfig {\\n        uint256 fulfillmentFee;\\n        uint256 baseFee;\\n    }\\n\\n    DirectPaymentConfig s_directPaymentConfig;\\n\\n    error InvalidConsumer(uint64 accId, address consumer);\\n    error InvalidAccount();\\n    error UnregisteredOracleFulfillment(address oracle);\\n    error NoCorrespondingRequest();\\n    error IncorrectCommitment();\\n    error NotRequestOwner();\\n    error Reentrant();\\n    error InsufficientPayment(uint256 have, uint256 want);\\n    error RefundFailure();\\n    error GasLimitTooBig(uint32 have, uint32 want);\\n    error OracleAlreadyRegistered(address oracle);\\n    error NoSuchOracle(address oracle);\\n\\n    event DataRequested(\\n        uint256 indexed requestId,\\n        bytes32 jobId,\\n        uint64 indexed accId,\\n        uint32 callbackGasLimit,\\n        address indexed sender,\\n        bool isDirectPayment,\\n        bytes data\\n    );\\n    event DataRequestFulfilled(\\n        uint256 indexed requestId,\\n        uint256 response,\\n        uint256 payment,\\n        bool success\\n    );\\n    event DataRequestCancelled(uint256 indexed requestId);\\n    event ConfigSet(uint32 maxGasLimit, uint32 gasAfterPaymentCalculation, FeeConfig feeConfig);\\n    event DirectPaymentConfigSet(uint256 fulfillmentFee, uint256 baseFee);\\n\\n    event OracleRegistered(address oracle);\\n    event OracleDeregistered(address oracle);\\n    event MinBalanceSet(uint256 minBalance);\\n\\n    modifier nonReentrant() {\\n        if (s_config.reentrancyLock) {\\n            revert Reentrant();\\n        }\\n        _;\\n    }\\n\\n    constructor(address prepayment) {\\n        s_prepayment = PrepaymentInterface(prepayment);\\n    }\\n\\n    /**\\n     * @notice Register an oracle\\n     * @param oracle address of the oracle\\n     */\\n    function registerOracle(address oracle) external onlyOwner {\\n        if (s_oracles[oracle]) {\\n            revert OracleAlreadyRegistered(oracle);\\n        }\\n        s_oracles[oracle] = true;\\n        s_registeredOracles.push(oracle);\\n        emit OracleRegistered(oracle);\\n    }\\n\\n    /**\\n     * @notice Deregister an oracle\\n     * @param oracle address of the oracle\\n     */\\n    function deregisterOracle(address oracle) external onlyOwner {\\n        if (!s_oracles[oracle]) {\\n            revert NoSuchOracle(oracle);\\n        }\\n        delete s_oracles[oracle];\\n        for (uint256 i = 0; i < s_registeredOracles.length; i++) {\\n            if (s_registeredOracles[i] == oracle) {\\n                address last = s_registeredOracles[s_registeredOracles.length - 1];\\n                s_registeredOracles[i] = last;\\n                s_registeredOracles.pop();\\n                break;\\n            }\\n        }\\n        emit OracleDeregistered(oracle);\\n    }\\n\\n    /**\\n     * @notice Sets the general configuration\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting after completing the gas measurement\\n     * @param feeConfig fee tier configuration\\n     */\\n    function setConfig(\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        FeeConfig memory feeConfig\\n    ) external onlyOwner {\\n        s_config = Config({\\n            maxGasLimit: maxGasLimit,\\n            gasAfterPaymentCalculation: gasAfterPaymentCalculation,\\n            reentrancyLock: false\\n        });\\n        s_feeConfig = feeConfig;\\n        emit ConfigSet(maxGasLimit, gasAfterPaymentCalculation, s_feeConfig);\\n    }\\n\\n    function getConfig()\\n        external\\n        view\\n        returns (uint32 maxGasLimit, uint32 gasAfterPaymentCalculation)\\n    {\\n        return (s_config.maxGasLimit, s_config.gasAfterPaymentCalculation);\\n    }\\n\\n    function getFeeConfig()\\n        external\\n        view\\n        returns (\\n            uint32 fulfillmentFlatFeeKlayPPMTier1,\\n            uint32 fulfillmentFlatFeeKlayPPMTier2,\\n            uint32 fulfillmentFlatFeeKlayPPMTier3,\\n            uint32 fulfillmentFlatFeeKlayPPMTier4,\\n            uint32 fulfillmentFlatFeeKlayPPMTier5,\\n            uint24 reqsForTier2,\\n            uint24 reqsForTier3,\\n            uint24 reqsForTier4,\\n            uint24 reqsForTier5\\n        )\\n    {\\n        return (\\n            s_feeConfig.fulfillmentFlatFeeKlayPPMTier1,\\n            s_feeConfig.fulfillmentFlatFeeKlayPPMTier2,\\n            s_feeConfig.fulfillmentFlatFeeKlayPPMTier3,\\n            s_feeConfig.fulfillmentFlatFeeKlayPPMTier4,\\n            s_feeConfig.fulfillmentFlatFeeKlayPPMTier5,\\n            s_feeConfig.reqsForTier2,\\n            s_feeConfig.reqsForTier3,\\n            s_feeConfig.reqsForTier4,\\n            s_feeConfig.reqsForTier5\\n        );\\n    }\\n\\n    function setDirectPaymentConfig(\\n        DirectPaymentConfig memory directPaymentConfig\\n    ) public onlyOwner {\\n        s_directPaymentConfig = directPaymentConfig;\\n        emit DirectPaymentConfigSet(\\n            directPaymentConfig.fulfillmentFee,\\n            directPaymentConfig.baseFee\\n        );\\n    }\\n\\n    function getDirectPaymentConfig() external view returns (uint256, uint256) {\\n        return (s_directPaymentConfig.fulfillmentFee, s_directPaymentConfig.baseFee);\\n    }\\n\\n    function estimateDirectPaymentFee() public view returns (uint256) {\\n        return s_directPaymentConfig.fulfillmentFee + s_directPaymentConfig.baseFee;\\n    }\\n\\n    function getPrepaymentAddress() public view returns (address) {\\n        return address(s_prepayment);\\n    }\\n\\n    function setMinBalance(uint256 minBalance) public onlyOwner {\\n        s_minBalance = minBalance;\\n        emit MinBalanceSet(minBalance);\\n    }\\n\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint64 accId\\n    ) external nonReentrant returns (uint256 requestId) {\\n        bool isDirectPayment = false;\\n        (uint256 balance, , , ) = s_prepayment.getAccount(accId);\\n        if (balance < s_minBalance) {\\n            revert InsufficientPayment(balance, s_minBalance);\\n        }\\n        requestId = requestDataInternal(req, accId, callbackGasLimit, isDirectPayment);\\n    }\\n\\n    function requestDataInternal(\\n        Orakl.Request memory req,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        bool isDirectPayment\\n    ) internal returns (uint256) {\\n        // Input validation using the account storage.\\n        // call to prepayment contract\\n        address owner = s_prepayment.getAccountOwner(accId);\\n        if (owner == address(0)) {\\n            revert InvalidAccount();\\n        }\\n\\n        // Its important to ensure that the consumer is in fact who they say they\\n        // are, otherwise they could use someone else's account balance.\\n        // A nonce of 0 indicates consumer is not allocated to the acc.\\n        uint64 currentNonce = s_prepayment.getNonce(msg.sender, accId);\\n        if (currentNonce == 0) {\\n            revert InvalidConsumer(accId, msg.sender);\\n        }\\n\\n        // TODO update comment\\n        // No lower bound on the requested gas limit. A user could request 0\\n        // and they would simply be billed for the proof verification and wouldn't be\\n        // able to do anything with the random value.\\n        if (callbackGasLimit > s_config.maxGasLimit) {\\n            revert GasLimitTooBig(callbackGasLimit, s_config.maxGasLimit);\\n        }\\n\\n        uint64 nonce = s_prepayment.increaseNonce(msg.sender, accId);\\n\\n        uint256 requestId = computeRequestId(msg.sender, accId, nonce);\\n        s_requestCommitments[requestId] = keccak256(\\n            abi.encode(requestId, block.number, accId, callbackGasLimit, msg.sender)\\n        );\\n\\n        s_requestOwner[requestId] = msg.sender;\\n\\n        emit DataRequested(\\n            requestId,\\n            req.id,\\n            accId,\\n            callbackGasLimit,\\n            msg.sender,\\n            isDirectPayment,\\n            req.buf.buf\\n        );\\n\\n        return requestId;\\n    }\\n\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit\\n    ) external payable returns (uint256) {\\n        uint256 fee = estimateDirectPaymentFee();\\n        if (msg.value < fee) {\\n            revert InsufficientPayment(msg.value, fee);\\n        }\\n\\n        uint64 accId = s_prepayment.createAccount();\\n        s_prepayment.addConsumer(accId, msg.sender);\\n        bool isDirectPayment = true;\\n        uint256 requestId = requestDataInternal(req, accId, callbackGasLimit, isDirectPayment);\\n        s_prepayment.deposit{value: fee}(accId);\\n\\n        uint256 remaining = msg.value - fee;\\n        if (remaining > 0) {\\n            (bool sent, ) = msg.sender.call{value: remaining}(\\\"\\\");\\n            if (!sent) {\\n                revert RefundFailure();\\n            }\\n        }\\n\\n        return requestId;\\n    }\\n\\n    /**\\n     * @inheritdoc CoordinatorBaseInterface\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) public view returns (bool) {\\n        for (uint256 i = 0; i < s_registeredOracles.length; i++) {\\n            uint256 reqId = computeRequestId(consumer, accId, nonce);\\n            if (s_requestCommitments[reqId] != 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Fulfils oracle request\\n     * @param requestId - ID of the Oracle Request\\n     * @param response - Return data for fulfilment\\n     * @param rc request commitment pre-image, committed to at request time\\n     */\\n    function fulfillDataRequest(\\n        uint256 requestId,\\n        uint256 response,\\n        RequestCommitment memory rc,\\n        bool isDirectPayment\\n    ) external nonReentrant returns (uint256) {\\n        uint256 startGas = gasleft();\\n\\n        if (!s_oracles[msg.sender]) {\\n            revert UnregisteredOracleFulfillment(msg.sender);\\n        }\\n\\n        bytes32 commitment = s_requestCommitments[requestId];\\n        if (commitment == 0) {\\n            revert NoCorrespondingRequest();\\n        }\\n\\n        if (\\n            commitment !=\\n            keccak256(abi.encode(requestId, rc.blockNum, rc.accId, rc.callbackGasLimit, rc.sender))\\n        ) {\\n            revert IncorrectCommitment();\\n        }\\n\\n        delete s_requestCommitments[requestId];\\n        RequestResponseConsumerBase rr;\\n        bytes memory resp = abi.encodeWithSelector(\\n            rr.rawFulfillDataRequest.selector,\\n            requestId,\\n            response\\n        );\\n\\n        // Call with explicitly the amount of callback gas requested\\n        // Important to not let them exhaust the gas budget and avoid oracle payment.\\n        // Do not allow any non-view/non-pure coordinator functions to be called\\n        // during the consumers callback code via reentrancyLock.\\n        // Note that callWithExactGas will revert if we do not have sufficient gas\\n        // to give the callee their requested amount.\\n        s_config.reentrancyLock = true;\\n        bool success = callWithExactGas(rc.callbackGasLimit, rc.sender, resp);\\n        s_config.reentrancyLock = false;\\n\\n        // We want to charge users exactly for how much gas they use in their callback.\\n        // The gasAfterPaymentCalculation is meant to cover these additional operations where we\\n        // decrement the account balance and increment the oracles withdrawable balance.\\n        // We also add the flat KLAY fee to the payment amount.\\n        // Its specified in millionths of KLAY, if s_config.fulfillmentFlatFeeKlayPPM = 1\\n        // 1 KLAY / 1e6 = 1e18 pebs / 1e6 = 1e12 pebs.\\n        (uint256 balance, uint64 reqCount, , ) = s_prepayment.getAccount(rc.accId);\\n\\n        uint256 payment;\\n        if (isDirectPayment) {\\n            payment = balance;\\n        } else {\\n            payment = calculatePaymentAmount(\\n                startGas,\\n                s_config.gasAfterPaymentCalculation,\\n                getFeeTier(reqCount)\\n            );\\n        }\\n\\n        s_prepayment.chargeFee(rc.accId, payment, msg.sender);\\n\\n        // Include payment in the event for tracking costs.\\n        emit DataRequestFulfilled(requestId, response, payment, success);\\n        return payment;\\n    }\\n\\n    /**\\n     * @inheritdoc RequestResponseCoordinatorInterface\\n     */\\n    function cancelRequest(uint256 requestId) external {\\n        bytes32 commitment = s_requestCommitments[requestId];\\n        if (commitment == 0) {\\n            revert NoCorrespondingRequest();\\n        }\\n\\n        if (s_requestOwner[requestId] != msg.sender) {\\n            revert NotRequestOwner();\\n        }\\n\\n        delete s_requestCommitments[requestId];\\n        delete s_requestOwner[requestId];\\n\\n        emit DataRequestCancelled(requestId);\\n    }\\n\\n    /**\\n     * @notice The type and version of this contract\\n     * @return Type and version string\\n     */\\n    function typeAndVersion() external pure virtual override returns (string memory) {\\n        return \\\"RequestResponseCoordinator v0.1\\\";\\n    }\\n\\n    /*\\n     * @notice Compute fee based on the request count\\n     * @param reqCount number of requests\\n     * @return feePPM fee in KLAY PPM\\n     */\\n    function getFeeTier(uint64 reqCount) public view returns (uint32) {\\n        FeeConfig memory fc = s_feeConfig;\\n        if (0 <= reqCount && reqCount <= fc.reqsForTier2) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier1;\\n        }\\n        if (fc.reqsForTier2 < reqCount && reqCount <= fc.reqsForTier3) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier2;\\n        }\\n        if (fc.reqsForTier3 < reqCount && reqCount <= fc.reqsForTier4) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier3;\\n        }\\n        if (fc.reqsForTier4 < reqCount && reqCount <= fc.reqsForTier5) {\\n            return fc.fulfillmentFlatFeeKlayPPMTier4;\\n        }\\n        return fc.fulfillmentFlatFeeKlayPPMTier5;\\n    }\\n\\n    function calculatePaymentAmount(\\n        uint256 startGas,\\n        uint256 gasAfterPaymentCalculation,\\n        uint32 fulfillmentFlatFeeKlayPPM\\n    ) internal view returns (uint256) {\\n        uint256 paymentNoFee = tx.gasprice * (gasAfterPaymentCalculation + startGas - gasleft());\\n        uint256 fee = 1e12 * uint256(fulfillmentFlatFeeKlayPPM);\\n        return paymentNoFee + fee;\\n    }\\n\\n    function computeRequestId(\\n        address sender,\\n        uint64 accId,\\n        uint64 nonce\\n    ) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(sender, accId, nonce)));\\n    }\\n\\n    /**\\n     * @dev calls target address with exactly gasAmount gas and data as calldata\\n     * or reverts if at least gasAmount gas is not available.\\n     */\\n    function callWithExactGas(\\n        uint256 gasAmount,\\n        address target,\\n        bytes memory data\\n    ) private returns (bool success) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let g := gas()\\n            // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\\n            // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\\n            // We want to ensure that we revert if gasAmount >  63//64*gas available\\n            // as we do not want to provide them with less, however that check itself costs\\n            // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\\n            // to revert if gasAmount >  63//64*gas available.\\n            if lt(g, GAS_FOR_CALL_EXACT_CHECK) {\\n                revert(0, 0)\\n            }\\n            g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\\n            // if g - g//64 <= gasAmount, revert\\n            // (we subtract g//64 because of EIP-150)\\n            if iszero(gt(sub(g, div(g, 64)), gasAmount)) {\\n                revert(0, 0)\\n            }\\n            // solidity calls check that a contract actually exists at the destination, so we do the same\\n            if iszero(extcodesize(target)) {\\n                revert(0, 0)\\n            }\\n            // call and return whether we succeeded. ignore return data\\n            // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n            success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\\n        }\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xfdbdf6f1e5e34744ef03df4d5f49102b48d2c05eadb68f15cea1ea9d2971cef6\",\"license\":\"MIT\"},\"src/v0.1/interfaces/CoordinatorBaseInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface CoordinatorBaseInterface {\\n    /**\\n     * @notice Check to see if there exists a request commitment consumers\\n     * for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request for the account, false\\n     * otherwise.\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x227416dfeab97173d5bbf25a60f6e8012bade3381b575a2ea0d923c04b88a2be\",\"license\":\"MIT\"},\"src/v0.1/interfaces/PrepaymentInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface PrepaymentInterface {\\n    /**\\n     * @notice Return total amount of KLAY held in contract.\\n     * @return balance - A unique account id.\\n     */\\n    function getTotalBalance() external returns (uint256);\\n\\n    /**\\n     * @notice Get an account.\\n     * @param accId - ID of the account\\n     * @return balance - KLAY balance of the account in juels.\\n     * @return reqCount - number of requests for this account, determines fee tier.\\n     * @return owner - owner of the account.\\n     * @return consumers - list of consumer address which are able to use this account.\\n     */\\n    function getAccount(uint64 accId) external view\\n        returns (uint256 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n    /**\\n     * @notice Create an account.\\n     * @return accId - A unique account id.\\n     * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n     * @dev Note to fund the account, use deposit function.\\n     */\\n    function createAccount() external returns (uint64);\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @param accId - ID of the account\\n     * @param newOwner - proposed new owner of the account\\n     */\\n    function requestAccountOwnerTransfer(uint64 accId, address newOwner) external;\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @param accId - ID of the account\\n     * @dev will revert if original owner of accId has\\n     * not requested that msg.sender become the new owner.\\n     */\\n    function acceptAccountOwnerTransfer(uint64 accId) external;\\n\\n    /**\\n     * @notice Remove a consumer from a account.\\n     * @param accId - ID of the account\\n     * @param consumer - Consumer to remove from the account\\n     */\\n    function removeConsumer(uint64 accId, address consumer) external;\\n\\n    /**\\n     * @notice Add a consumer to an account.\\n     * @param accId - ID of the account\\n     * @param consumer - New consumer which can use the account\\n     */\\n    function addConsumer(uint64 accId, address consumer) external;\\n\\n    /**\\n     * @notice Cancel account\\n     * @param accId - ID of the account\\n     * @param to - Where to send the remaining KLAY to\\n     */\\n    function cancelAccount(uint64 accId, address to) external;\\n\\n    /**\\n     * @notice Deposit KLAY to account.\\n     * @notice Anybody can deposit KLAY, there are no restrictions.\\n     * @param accId - ID of the account\\n     */\\n    function deposit(uint64 accId) payable external;\\n\\n    /**\\n     * @notice Withdraw KLAY from account.\\n     * @notice Only account owner can withdraw KLAY.\\n     * @param accId - ID of the account\\n     * @param amount - KLAY amount to be withdrawn\\n     */\\n    function withdraw(uint64 accId, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw funds stored in contract.\\n     * @notice Can be executed only by WITHDRAWER_ROLE.\\n     * @param amount - KLAY amount to be withdrawn\\n     */\\n    function nodeWithdraw(uint256 amount) external;\\n\\n    /**\\n     * @notice Charge fee from service connected to account.\\n     * @param accId - ID of the account\\n     * @param amount - KLAY amount to be charged\\n     */\\n    function chargeFee(uint64 accId, uint256 amount,address node) external;\\n\\n    /**\\n     * @notice Return nonce value.\\n     * @param consumer - Address of consumer registered under accId\\n     * @param accId - ID of the account\\n     */\\n    function getNonce(address consumer, uint64 accId) external view returns (uint64);\\n\\n    /**\\n     * @notice Increase nonce for consumer registered under accId.\\n     * @param consumer - Address of consumer registered under accId\\n     * @param accId - ID of the account\\n     */\\n    function increaseNonce(address consumer, uint64 accId) external returns (uint64);\\n\\n    /**\\n     * @notice Get address of account owner.\\n     * @param accId - ID of the account\\n     */\\n    function getAccountOwner(uint64 accId) external returns (address owner);\\n\\n    /*\\n     * @notice Check to see if there exists a request commitment consumers\\n     * for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request for the account, false\\n     * otherwise.\\n     */\\n    function pendingRequestExists(uint64 accId) external view returns (bool);\\n\\n    /*\\n     * @notice Add coordinator to be able to charge using Prepayment method.\\n     * @param coordinator - address of coordinator\\n     */\\n    function addCoordinator(address coordinator) external;\\n\\n    /*\\n     * @notice Block coordinator from using Prepayment method.\\n     * @param coordinator - address of coordinator\\n     */\\n    function removeCoordinator(address coordinator) external;\\n}\\n\",\"keccak256\":\"0x20d9e215526e15f693b1330e3c3e09b4c8ff8c7fd42a34e73df3f5319f6060f1\",\"license\":\"MIT\"},\"src/v0.1/interfaces/RequestResponseCoordinatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/Orakl.sol\\\";\\n\\ninterface RequestResponseCoordinatorInterface {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint64 accId;\\n        uint32 callbackGasLimit;\\n        address sender;\\n    }\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle\\n     * @dev Generates and stores a request ID, increments the local nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in your\\n     * fulfillRequest callback. Note that gasleft() inside fulfillRequest\\n     * may be slightly less than this amount because of gas used calling the function\\n     * (argument decoding etc.), so you may need to request slightly more than you expect\\n     * to have inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param accId  - The ID of the account. Must be funded\\n     * with the minimum account balance required for the selected keyHash.\\n     * @return requestId - A unique identifier of the request. Can be used to match\\n     * a request to a response in fulfillRequest.\\n   */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint64 accId\\n    ) external returns (uint256);\\n\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Cancelling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n\\n    function fulfillDataRequest(\\n        uint256 requestId,\\n        uint256 response,\\n        RequestCommitment memory rc,\\n        bool isDirectPayment\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb65cbabed6d11a68ff6ce999435d497dd50cfc3c73087013e7ee5ed29247b583\",\"license\":\"MIT\"},\"src/v0.1/interfaces/TypeAndVersionInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol\\n\\nabstract contract TypeAndVersionInterface {\\n  function typeAndVersion() external pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x349822ac8c316553c2333fffc540be585de77beaec54b32476c2ac56b1c5bfa8\",\"license\":\"MIT\"},\"src/v0.1/libraries/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/BufferChainlink.sol\\n\\n/**\\n * @dev Buffer library is a library that allows the ability to work with mutable byte buffers in solidity\\n *\\n */\\n\\nimport './Math.sol';\\n\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. All buffers have a capacity and a current value stored in bytes.\\n   * If the capacity is more than the buffer, than the buffer can be extended without allocating more memory\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializing a buffer with initial capacity\\n   * @param buf the buffer to initialize\\n   * @param capacity the number of bytes of space to allocate to the buffer\\n   * @return the buffer\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    // If capacity is not 32 bytes allocate remaining capacity\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n\\n    // allocating memory space for buffer\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to buffer, The buffer will resize if the capacity would be exceeded\\n   * @param buf the buffer to append to\\n   * @param off the start offset to write to\\n   * @param data the data to append\\n   * @param len the number of bytes to copy\\n   * @return the original buffer, for chaining\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length, 'The length passed as parameter exceeds data size');\\n\\n    // check if buffer has capacity to allocate new data\\n    if (off + len > buf.capacity) {\\n      resize(buf, Math.max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // length of existing buffer data\\n      let buflen := mload(bufptr)\\n\\n      // start address = buffer address + offset + buffer length\\n      dest := add(add(bufptr, 32), off)\\n\\n      // update buffer length if buffer is extending capacity\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n\\n      src := add(data, 32)\\n    }\\n\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256 ** (32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  // HELPER FUNCTIONS\\n  /**\\n   * @dev fromBytes - Initializes a new buffer from an existing bytes object\\n   * @param b The bytes object to initialize the buffer\\n   * @return a new buffer\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity - b.length;\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev resizes a buffer to a new capacity that would append to existing buffer data\\n   *\\n   * @param buf the buffer to resize\\n   * @param capacity the capacity to resize to\\n   */\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  /**\\n   * @dev appends a byte string to a buffer, resizes the buffer if doing so would exceed capacity of buffer\\n   *\\n   * @param buf the buffer to append to\\n   * @param data the data to append\\n   * @param len the number of bytes to copy\\n   * @return the original buffer\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the capacity\\n   * @param buf the buffer to append to\\n   * @param off the offset to write the byte at\\n   * @param data the data to append\\n   * @return the original buffer\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256 ** len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256 ** len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0xc8de74d8964fc2f808161dcd55b97f09e5d12ce3b65748e0fb37974d45930320\",\"license\":\"MIT\"},\"src/v0.1/libraries/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/CBORChainlink.sol\\n\\nimport {Buffer} from './Buffer.sol';\\n\\n// Encoding library for Binary Object Representation\\nlibrary CBOR {\\n  using Buffer for Buffer.buffer;\\n\\n  // DECLARE TYPES FOR EASIER REFERENCE OF VARIABLE TYPE\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(Buffer.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if (value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\\n    if (value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(Buffer.buffer memory buf, int value) internal pure {\\n    if (value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if (value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if (value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(Buffer.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(Buffer.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(Buffer.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(Buffer.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(Buffer.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x29bc79dd3de075f57019a1fc3f569cbd0fa5ebd513d551973287e50b20ee2a6c\",\"license\":\"MIT\"},\"src/v0.1/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @dev Math library is a library that contains different mathematical functions for calculations\\n *\\n */\\n\\nlibrary Math {\\n    /**\\n     * @dev Returns max value given two numbers\\n     *\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Returns the kth value of the ordered array\\n     * See: http://www.cs.yale.edu/homes/aspnes/pinewiki/QuickSelect.html\\n     * @param _a The list of elements to pull from\\n     * @param _k The index, 1 based, of the elements you want to pull from when ordered\\n     */\\n    function quickselect(int256[] memory _a, uint256 _k) internal pure returns (int256 pivot) {\\n        require(_k > 0, \\\"QS01\\\");\\n        require(_a.length > 0, \\\"QS02\\\");\\n        require(_k <= _a.length, \\\"QS03\\\");\\n\\n        int256[] memory a = _a;\\n        uint256 k = _k;\\n        uint256 aLen = a.length;\\n        int256[] memory a1 = new int256[](aLen);\\n        int256[] memory a2 = new int256[](aLen);\\n        uint256 a1Len;\\n        uint256 a2Len;\\n        uint256 i;\\n\\n        while (true) {\\n            pivot = a[aLen / 2];\\n            a1Len = 0;\\n            a2Len = 0;\\n            for (i = 0; i < aLen; i++) {\\n                if (a[i] < pivot) {\\n                    a1[a1Len] = a[i];\\n                    a1Len++;\\n                } else if (a[i] > pivot) {\\n                    a2[a2Len] = a[i];\\n                    a2Len++;\\n                }\\n            }\\n            if (k <= a1Len) {\\n                aLen = a1Len;\\n                (a, a1) = swap(a, a1);\\n            } else if (k > (aLen - a2Len)) {\\n                k = k - (aLen - a2Len);\\n                aLen = a2Len;\\n                (a, a2) = swap(a, a2);\\n            } else {\\n                return pivot;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the pointers to two uint256 arrays in memory\\n     * @param _a The pointer to the first in memory array\\n     * @param _b The pointer to the second in memory array\\n     */\\n    function swap(int256[] memory _a, int256[] memory _b) private pure returns (int256[] memory, int256[] memory) {\\n        return (_b, _a);\\n    }\\n}\\n\",\"keccak256\":\"0xc7dde236ce72f2fbbb0594cd64b2a806cd001e7b03bb256e8d79c6f85ce355e2\",\"license\":\"MIT\"},\"src/v0.1/libraries/Orakl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Chainlink.sol\\n\\nimport {Buffer} from './Buffer.sol';\\nimport {CBOR} from './CBOR.sol';\\n\\n\\nlibrary Orakl {\\n  uint256 internal constant defaultBufferSize = 256;\\n\\n  using CBOR for Buffer.buffer;\\n\\n  // structure for storing requests done off-chain\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddr;\\n    bytes4 callbackFunc;\\n    uint256 nonce;\\n    Buffer.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a request\\n   * @dev Sets ID, callback address, and callback function\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Orakl.Request memory) {\\n    Buffer.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddr = callbackAddr;\\n    self.callbackFunc = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice sets the data for buffer\\n   * @param _request the initialized request\\n   * @param _data the CBOR data\\n   */\\n  function setBuffer(Request memory _request, bytes memory _data) internal pure {\\n    Buffer.init(_request.buf, _data.length);\\n    Buffer.append(_request.buf, _data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request in a key - value pair format\\n   * @param self - the initalized request\\n   * @param key - the name of the key\\n   * @param value - the string value to add\\n   */\\n  function add(\\n      Request memory self,\\n      string memory key,\\n      string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a byte value to the request in a key - value pair format\\n   * @param _request - the initalized request\\n   * @param _key - the name of the key\\n   * @param _value - the bytes value to add\\n   */\\n  function addBytes(\\n    Request memory _request,\\n    string memory _key,\\n    bytes memory _value\\n  ) internal pure {\\n    _request.buf.encodeString(_key);\\n    _request.buf.encodeBytes(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a Int256 value to the request in a key - value pair format\\n   * @param _request - the initalized request\\n   * @param _key - the name of the key\\n   * @param _value - the int256 value to add\\n   */\\n  function addInt(\\n      Request memory _request,\\n      string memory _key,\\n      int256 _value\\n  ) internal pure {\\n    _request.buf.encodeString(_key);\\n    _request.buf.encodeInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a UInt256 value to the request in a key - value pair format\\n   * @param _request - the initalized request\\n   * @param _key - the name of the key\\n   * @param _value - the uint256 value to add\\n   */\\n  function addUInt(\\n      Request memory _request,\\n      string memory _key,\\n      uint256 _value\\n  ) internal pure {\\n    _request.buf.encodeString(_key);\\n    _request.buf.encodeUInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of string value to the request in a key - value pair format\\n   * @param _request - the initalized request\\n   * @param _key - the name of the key\\n   * @param _values - the array of string value to add\\n   */\\n  function addStringArray(\\n    Request memory _request,\\n    string memory _key,\\n    string[] memory _values\\n  ) internal pure {\\n    _request.buf.encodeString(_key);\\n    _request.buf.startArray();\\n    for (uint256 i; i < _values.length; i++) {\\n      _request.buf.encodeString(_values[i]);\\n    }\\n    _request.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x0bf5c33b1ed8b188a1987a1990215d33eeab6b0d7e92af4a3f60613b4b3cc6f6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002487380380620024878339810160408190526200003491620000b5565b6200003f3362000065565b600680546001600160a01b0319166001600160a01b0392909216919091179055620000e7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000c857600080fd5b81516001600160a01b0381168114620000e057600080fd5b9392505050565b61239080620000f76000396000f3fe60806040526004361061016a5760003560e01c80637d08430e116100cb578063c3f909d41161007f578063d2f9f9a711610059578063d2f9f9a714610491578063e9babaec146104c6578063f2fde38b146104e657600080fd5b8063c3f909d414610425578063c91d956c1461045b578063c9feea4a1461047b57600080fd5b80638da5cb5b116100b05780638da5cb5b146103b55780638df4e3e2146103e7578063a690d7ae1461040757600080fd5b80637d08430e1461036d57806388e759721461038d57600080fd5b8063530863a31161012257806369e7a3e11161010757806369e7a3e114610325578063715018a614610338578063786708e61461034d57600080fd5b8063530863a3146102555780635fbbc0d21461027557600080fd5b80631a892832116101535780631a892832146101e35780631f3133eb146102135780633015394c1461023357600080fd5b806306b5536c1461016f578063181f5a7714610197575b600080fd5b34801561017b57600080fd5b50610184610506565b6040519081526020015b60405180910390f35b3480156101a357600080fd5b50604080518082018252601f81527f52657175657374526573706f6e7365436f6f7264696e61746f722076302e31006020820152905161018e9190611b07565b3480156101ef57600080fd5b506102036101fe366004611b45565b61051d565b604051901515815260200161018e565b34801561021f57600080fd5b5061018461022e366004611c60565b6105b5565b34801561023f57600080fd5b5061025361024e366004611d04565b610984565b005b34801561026157600080fd5b50610184610270366004611e90565b610a58565b34801561028157600080fd5b506008546040805163ffffffff80841682526401000000008404811660208301526801000000000000000084048116928201929092526c01000000000000000000000000830482166060820152600160801b8304909116608082015262ffffff600160a01b8304811660a0830152600160b81b8304811660c0830152600160d01b8304811660e0830152600160e81b9092049091166101008201526101200161018e565b610184610333366004611ed7565b610b52565b34801561034457600080fd5b50610253610dd6565b34801561035957600080fd5b50610253610368366004611f38565b610dea565b34801561037957600080fd5b5061025361038836600461202a565b611036565b34801561039957600080fd5b50600954600a546040805192835260208301919091520161018e565b3480156103c157600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161018e565b3480156103f357600080fd5b50610253610402366004612079565b61108a565b34801561041357600080fd5b506006546001600160a01b03166103cf565b34801561043157600080fd5b506007546040805163ffffffff80841682526501000000000090930490921660208301520161018e565b34801561046757600080fd5b50610253610476366004611d04565b611257565b34801561048757600080fd5b5061018460055481565b34801561049d57600080fd5b506104b16104ac366004612096565b611294565b60405163ffffffff909116815260200161018e565b3480156104d257600080fd5b506102536104e1366004612079565b611426565b3480156104f257600080fd5b50610253610501366004612079565b61151e565b600a54600954600091610518916120c9565b905090565b6000805b6004548110156105a857604080516001600160a01b03871660208083019190915267ffffffffffffffff8781168385015286166060808401919091528351808403909101815260809092018352815191810191909120600081815260029092529190205415610595576001925050506105ae565b50806105a0816120dc565b915050610521565b50600090505b9392505050565b600754600090640100000000900460ff16156105e45760405163769dd35360e11b815260040160405180910390fd5b60005a3360009081526001602052604090205490915060ff1661063a576040517fd6c337480000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b6000868152600260205260408120549081900361066a57604051631b44092560e11b815260040160405180910390fd5b845160208087015160408089015160608a015191516106c9958d95909493910194855267ffffffffffffffff938416602086015291909216604084015263ffffffff9190911660608301526001600160a01b0316608082015260a00190565b604051602081830303815290604052805190602001208114610717576040517fd529142c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008781526002602090815260408083208390558051602481018b905260448082018b9052825180830390910181526064909101825291820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f77f262ea000000000000000000000000000000000000000000000000000000001790526007805464010000000064ff0000000019909116179055870151606088015183916107c89163ffffffff90911690846115ae565b6007805464ff000000001916905560065460208a0151604051633bd7108d60e11b815267ffffffffffffffff909116600482015291925060009182916001600160a01b0316906377ae211a90602401600060405180830381865afa158015610834573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085c91908101906120f5565b5050915091506000891561087157508161089a565b60075461089790899065010000000000900463ffffffff1661089285611294565b6115fa565b90505b60065460208c01516040517fea74b84d00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9091166004820152602481018390523360448201526001600160a01b039091169063ea74b84d90606401600060405180830381600087803b15801561091557600080fd5b505af1158015610929573d6000803e3d6000fd5b5050604080518f815260208101859052871515918101919091528f92507f46061247432b981794044ad3de8e8938f53ecdf3f7bc2efab12123f71f1b500f915060600160405180910390a29c9b505050505050505050505050565b600081815260026020526040812054908190036109b457604051631b44092560e11b815260040160405180910390fd5b6000828152600360205260409020546001600160a01b03163314610a04576040517f517907dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152600260209081526040808320839055600390915280822080546001600160a01b03191690555183917fd2e2d1db782d45df0f8645776294aaf5eeaa836975f36f812ee194a8f138e13f91a25050565b600754600090640100000000900460ff1615610a875760405163769dd35360e11b815260040160405180910390fd5b600654604051633bd7108d60e11b815267ffffffffffffffff8416600482015260009182916001600160a01b03909116906377ae211a90602401600060405180830381865afa158015610ade573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b0691908101906120f5565b5050509050600554811015610b3c5760055460405163b99e2ab760e01b8152610631918391600401918252602082015260400190565b610b4886858785611641565b9695505050505050565b600080610b5d610506565b905080341015610b895760405163b99e2ab760e01b815234600482015260248101829052604401610631565b600654604080517f9dca362f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691639dca362f916004808301926020929190829003018187875af1158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1191906121d8565b6006546040517f7341c10c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201523360248201529192506001600160a01b031690637341c10c90604401600060405180830381600087803b158015610c8057600080fd5b505af1158015610c94573d6000803e3d6000fd5b505050506000600190506000610cac87848885611641565b6006546040517f1376583800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff861660048201529192506001600160a01b03169063137658389086906024016000604051808303818588803b158015610d1657600080fd5b505af1158015610d2a573d6000803e3d6000fd5b505050505060008434610d3d91906121f5565b90508015610dc957604051600090339083908381818185875af1925050503d8060008114610d87576040519150601f19603f3d011682016040523d82523d6000602084013e610d8c565b606091505b5050905080610dc7576040517fef7a4b6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b5093505050505b92915050565b610dde611a17565b610de86000611a71565b565b610df2611a17565b604080516060808201835263ffffffff86811680845260006020808601919091528783169486018590526007805468ffffffffffffffffff191690921765010000000000909502949094179055845160088054948701518787015194880151608089015160a08a015160c08b015160e08c01516101008d015197891667ffffffffffffffff19909b169a909a1764010000000095891695909502949094177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff1668010000000000000000988816989098027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff16979097176c0100000000000000000000000092871692909202919091177fffffffffffffffffff00000000000000ffffffffffffffffffffffffffffffff16600160801b91909516027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff1693909317600160a01b62ffffff95861602177fffffff000000000000ffffffffffffffffffffffffffffffffffffffffffffff16600160b81b938516939093027fffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffff1692909217600160d01b94841694909402939093177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b929093169190910291909117815590517f107fdd8d898f7a380d4a448bb9882a3e1bb767bd803a09721d828b4ce217b043916110299186918691612208565b60405180910390a1505050565b61103e611a17565b80516009819055602080830151600a81905560408051938452918301527f6e080c19f3bdc7644116da0ba00746ad7b6452f89b6634457e4a41c331fd03dd91015b60405180910390a150565b611092611a17565b6001600160a01b03811660009081526001602052604090205460ff166110ef576040517ff9a0ffdf0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610631565b6001600160a01b0381166000908152600160205260408120805460ff191690555b60045481101561121d57816001600160a01b031660048281548110611137576111376122c5565b6000918252602090912001546001600160a01b03160361120b576004805460009190611165906001906121f5565b81548110611175576111756122c5565b600091825260209091200154600480546001600160a01b0390921692508291849081106111a4576111a46122c5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060048054806111e3576111e36122db565b600082815260209020810160001990810180546001600160a01b03191690550190555061121d565b80611215816120dc565b915050611110565b506040516001600160a01b03821681527f5406c1f2d9ece2027a923f317fb5f2370221e330db898c037c10acc0c20495b39060200161107f565b61125f611a17565b60058190556040518181527fc9ac0b9c6116d44b14ac8198e0802802d07cf6956054e7542f0460a4d3423b3a9060200161107f565b604080516101208101825260085463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c01000000000000000000000000810483166060830152600160801b8104909216608082015262ffffff600160a01b8304811660a08301819052600160b81b8404821660c0840152600160d01b8404821660e0840152600160e81b9093041661010082015260009167ffffffffffffffff84161161134f575192915050565b8267ffffffffffffffff168160a0015162ffffff1610801561138457508060c0015162ffffff168367ffffffffffffffff1611155b15611393576020015192915050565b8267ffffffffffffffff168160c0015162ffffff161080156113c857508060e0015162ffffff168367ffffffffffffffff1611155b156113d7576040015192915050565b8267ffffffffffffffff168160e0015162ffffff1610801561140d575080610100015162ffffff168367ffffffffffffffff1611155b1561141c576060015192915050565b6080015192915050565b61142e611a17565b6001600160a01b03811660009081526001602052604090205460ff161561148c576040517f6ff7406a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610631565b6001600160a01b0381166000818152600160208181526040808420805460ff1916841790556004805493840181559093527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180546001600160a01b0319168417905590519182527fd9d9fdcc9f936c76b5aafe54fc3db5dcec0c6583c9ccc4abe91d17575c5145a5910161107f565b611526611a17565b6001600160a01b0381166115a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610631565b6115ab81611a71565b50565b60005a6113888110156115c057600080fd5b6113888103905084604082048203116115d857600080fd5b50823b6115e457600080fd5b60008083516020850160008789f1949350505050565b6000805a61160886866120c9565b61161291906121f5565b61161c903a6122f1565b9050600061163563ffffffff851664e8d4a510006122f1565b9050610b4881836120c9565b6006546040517f4a41897300000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8516600482015260009182916001600160a01b0390911690634a418973906024016020604051808303816000875af11580156116b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d79190612310565b90506001600160a01b038116611719576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546040517f6d5e8a7900000000000000000000000000000000000000000000000000000000815233600482015267ffffffffffffffff871660248201526000916001600160a01b031690636d5e8a7990604401602060405180830381865afa15801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af91906121d8565b90508067ffffffffffffffff16600003611807576040517ff0019fe600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff87166004820152336024820152604401610631565b60075463ffffffff9081169086161115611861576007546040517ff5d7e01e00000000000000000000000000000000000000000000000000000000815263ffffffff80881660048301529091166024820152604401610631565b6006546040517f4000a00700000000000000000000000000000000000000000000000000000000815233600482015267ffffffffffffffff881660248201526000916001600160a01b031690634000a007906044016020604051808303816000875af11580156118d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f991906121d8565b604080513360208083019190915267ffffffffffffffff808c1683850152841660608084019190915283518084039091018152608090920190925280519101209091506000906040805160208101839052439181019190915267ffffffffffffffff8a16606082015263ffffffff891660808201523360a082015290915060c00160408051601f1981840301815282825280516020918201206000858152600283528381209190915560039091522080546001600160a01b031916339081179091558a5160808c015151919267ffffffffffffffff8c169285927fabd654d3b85665d34edb5c6165db793362567af860f253a8a91462f31d1cb1c492611a03928e918e919061232d565b60405180910390a498975050505050505050565b6000546001600160a01b03163314610de85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610631565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000815180845260005b81811015611ae757602081850181015186830182015201611acb565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006105ae6020830184611ac1565b6001600160a01b03811681146115ab57600080fd5b67ffffffffffffffff811681146115ab57600080fd5b600080600060608486031215611b5a57600080fd5b8335611b6581611b1a565b92506020840135611b7581611b2f565b91506040840135611b8581611b2f565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611bc957611bc9611b90565b60405290565b6040805190810167ffffffffffffffff81118282101715611bc957611bc9611b90565b604051610120810167ffffffffffffffff81118282101715611bc957611bc9611b90565b604051601f8201601f1916810167ffffffffffffffff81118282101715611c3f57611c3f611b90565b604052919050565b803563ffffffff81168114611c5b57600080fd5b919050565b60008060008084860360e0811215611c7757600080fd5b85359450602086013593506080603f1982011215611c9457600080fd5b50611c9d611ba6565b6040860135611cab81611b2f565b81526060860135611cbb81611b2f565b6020820152611ccc60808701611c47565b604082015260a0860135611cdf81611b1a565b6060820152915060c08501358015158114611cf957600080fd5b939692955090935050565b600060208284031215611d1657600080fd5b5035919050565b600060408284031215611d2f57600080fd5b611d37611bcf565b9050813567ffffffffffffffff80821115611d5157600080fd5b818401915084601f830112611d6557600080fd5b8135602082821115611d7957611d79611b90565b611d8b601f8301601f19168201611c16565b92508183528681838601011115611da157600080fd5b8181850182850137600081838501015282855280860135818601525050505092915050565b600060a08284031215611dd857600080fd5b60405160a0810167ffffffffffffffff8282108183111715611dfc57611dfc611b90565b816040528293508435835260208501359150611e1782611b1a565b816020840152604085013591507fffffffff0000000000000000000000000000000000000000000000000000000082168214611e5257600080fd5b816040840152606085013560608401526080850135915080821115611e7657600080fd5b50611e8385828601611d1d565b6080830152505092915050565b600080600060608486031215611ea557600080fd5b833567ffffffffffffffff811115611ebc57600080fd5b611ec886828701611dc6565b935050611b7560208501611c47565b60008060408385031215611eea57600080fd5b823567ffffffffffffffff811115611f0157600080fd5b611f0d85828601611dc6565b925050611f1c60208401611c47565b90509250929050565b803562ffffff81168114611c5b57600080fd5b6000806000838503610160811215611f4f57600080fd5b611f5885611c47565b9350611f6660208601611c47565b925061012080603f1983011215611f7c57600080fd5b611f84611bf2565b9150611f9260408701611c47565b8252611fa060608701611c47565b6020830152611fb160808701611c47565b6040830152611fc260a08701611c47565b6060830152611fd360c08701611c47565b6080830152611fe460e08701611f25565b60a0830152610100611ff7818801611f25565b60c0840152612007828801611f25565b60e08401526120196101408801611f25565b818401525050809150509250925092565b60006040828403121561203c57600080fd5b6040516040810181811067ffffffffffffffff8211171561205f5761205f611b90565b604052823581526020928301359281019290925250919050565b60006020828403121561208b57600080fd5b81356105ae81611b1a565b6000602082840312156120a857600080fd5b81356105ae81611b2f565b634e487b7160e01b600052601160045260246000fd5b80820180821115610dd057610dd06120b3565b6000600182016120ee576120ee6120b3565b5060010190565b6000806000806080858703121561210b57600080fd5b8451935060208086015161211e81611b2f565b604087015190945061212f81611b1a565b606087015190935067ffffffffffffffff8082111561214d57600080fd5b818801915088601f83011261216157600080fd5b81518181111561217357612173611b90565b8060051b9150612184848301611c16565b818152918301840191848101908b84111561219e57600080fd5b938501935b838510156121c857845192506121b883611b1a565b82825293850193908501906121a3565b989b979a50959850505050505050565b6000602082840312156121ea57600080fd5b81516105ae81611b2f565b81810381811115610dd057610dd06120b3565b63ffffffff84811682528381166020830152825480821660408401526101608301919061224260608501838360201c1663ffffffff169052565b61225960808501838360401c1663ffffffff169052565b61227060a08501838360601c1663ffffffff169052565b61228760c08501838360801c1663ffffffff169052565b62ffffff60a082901c811660e086015260b882901c811661010086015260d082901c1661012085015260e81c61014090930192909252949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600081600019048311821515161561230b5761230b6120b3565b500290565b60006020828403121561232257600080fd5b81516105ae81611b1a565b84815263ffffffff841660208201528215156040820152608060608201526000610b486080830184611ac156fea2646970667358221220051338b8e5912fb649084f0d55ecaa7c1810769467d48a3bad5f773691a7bad364736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c80637d08430e116100cb578063c3f909d41161007f578063d2f9f9a711610059578063d2f9f9a714610491578063e9babaec146104c6578063f2fde38b146104e657600080fd5b8063c3f909d414610425578063c91d956c1461045b578063c9feea4a1461047b57600080fd5b80638da5cb5b116100b05780638da5cb5b146103b55780638df4e3e2146103e7578063a690d7ae1461040757600080fd5b80637d08430e1461036d57806388e759721461038d57600080fd5b8063530863a31161012257806369e7a3e11161010757806369e7a3e114610325578063715018a614610338578063786708e61461034d57600080fd5b8063530863a3146102555780635fbbc0d21461027557600080fd5b80631a892832116101535780631a892832146101e35780631f3133eb146102135780633015394c1461023357600080fd5b806306b5536c1461016f578063181f5a7714610197575b600080fd5b34801561017b57600080fd5b50610184610506565b6040519081526020015b60405180910390f35b3480156101a357600080fd5b50604080518082018252601f81527f52657175657374526573706f6e7365436f6f7264696e61746f722076302e31006020820152905161018e9190611b07565b3480156101ef57600080fd5b506102036101fe366004611b45565b61051d565b604051901515815260200161018e565b34801561021f57600080fd5b5061018461022e366004611c60565b6105b5565b34801561023f57600080fd5b5061025361024e366004611d04565b610984565b005b34801561026157600080fd5b50610184610270366004611e90565b610a58565b34801561028157600080fd5b506008546040805163ffffffff80841682526401000000008404811660208301526801000000000000000084048116928201929092526c01000000000000000000000000830482166060820152600160801b8304909116608082015262ffffff600160a01b8304811660a0830152600160b81b8304811660c0830152600160d01b8304811660e0830152600160e81b9092049091166101008201526101200161018e565b610184610333366004611ed7565b610b52565b34801561034457600080fd5b50610253610dd6565b34801561035957600080fd5b50610253610368366004611f38565b610dea565b34801561037957600080fd5b5061025361038836600461202a565b611036565b34801561039957600080fd5b50600954600a546040805192835260208301919091520161018e565b3480156103c157600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161018e565b3480156103f357600080fd5b50610253610402366004612079565b61108a565b34801561041357600080fd5b506006546001600160a01b03166103cf565b34801561043157600080fd5b506007546040805163ffffffff80841682526501000000000090930490921660208301520161018e565b34801561046757600080fd5b50610253610476366004611d04565b611257565b34801561048757600080fd5b5061018460055481565b34801561049d57600080fd5b506104b16104ac366004612096565b611294565b60405163ffffffff909116815260200161018e565b3480156104d257600080fd5b506102536104e1366004612079565b611426565b3480156104f257600080fd5b50610253610501366004612079565b61151e565b600a54600954600091610518916120c9565b905090565b6000805b6004548110156105a857604080516001600160a01b03871660208083019190915267ffffffffffffffff8781168385015286166060808401919091528351808403909101815260809092018352815191810191909120600081815260029092529190205415610595576001925050506105ae565b50806105a0816120dc565b915050610521565b50600090505b9392505050565b600754600090640100000000900460ff16156105e45760405163769dd35360e11b815260040160405180910390fd5b60005a3360009081526001602052604090205490915060ff1661063a576040517fd6c337480000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b6000868152600260205260408120549081900361066a57604051631b44092560e11b815260040160405180910390fd5b845160208087015160408089015160608a015191516106c9958d95909493910194855267ffffffffffffffff938416602086015291909216604084015263ffffffff9190911660608301526001600160a01b0316608082015260a00190565b604051602081830303815290604052805190602001208114610717576040517fd529142c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008781526002602090815260408083208390558051602481018b905260448082018b9052825180830390910181526064909101825291820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f77f262ea000000000000000000000000000000000000000000000000000000001790526007805464010000000064ff0000000019909116179055870151606088015183916107c89163ffffffff90911690846115ae565b6007805464ff000000001916905560065460208a0151604051633bd7108d60e11b815267ffffffffffffffff909116600482015291925060009182916001600160a01b0316906377ae211a90602401600060405180830381865afa158015610834573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085c91908101906120f5565b5050915091506000891561087157508161089a565b60075461089790899065010000000000900463ffffffff1661089285611294565b6115fa565b90505b60065460208c01516040517fea74b84d00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9091166004820152602481018390523360448201526001600160a01b039091169063ea74b84d90606401600060405180830381600087803b15801561091557600080fd5b505af1158015610929573d6000803e3d6000fd5b5050604080518f815260208101859052871515918101919091528f92507f46061247432b981794044ad3de8e8938f53ecdf3f7bc2efab12123f71f1b500f915060600160405180910390a29c9b505050505050505050505050565b600081815260026020526040812054908190036109b457604051631b44092560e11b815260040160405180910390fd5b6000828152600360205260409020546001600160a01b03163314610a04576040517f517907dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152600260209081526040808320839055600390915280822080546001600160a01b03191690555183917fd2e2d1db782d45df0f8645776294aaf5eeaa836975f36f812ee194a8f138e13f91a25050565b600754600090640100000000900460ff1615610a875760405163769dd35360e11b815260040160405180910390fd5b600654604051633bd7108d60e11b815267ffffffffffffffff8416600482015260009182916001600160a01b03909116906377ae211a90602401600060405180830381865afa158015610ade573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b0691908101906120f5565b5050509050600554811015610b3c5760055460405163b99e2ab760e01b8152610631918391600401918252602082015260400190565b610b4886858785611641565b9695505050505050565b600080610b5d610506565b905080341015610b895760405163b99e2ab760e01b815234600482015260248101829052604401610631565b600654604080517f9dca362f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691639dca362f916004808301926020929190829003018187875af1158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1191906121d8565b6006546040517f7341c10c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201523360248201529192506001600160a01b031690637341c10c90604401600060405180830381600087803b158015610c8057600080fd5b505af1158015610c94573d6000803e3d6000fd5b505050506000600190506000610cac87848885611641565b6006546040517f1376583800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff861660048201529192506001600160a01b03169063137658389086906024016000604051808303818588803b158015610d1657600080fd5b505af1158015610d2a573d6000803e3d6000fd5b505050505060008434610d3d91906121f5565b90508015610dc957604051600090339083908381818185875af1925050503d8060008114610d87576040519150601f19603f3d011682016040523d82523d6000602084013e610d8c565b606091505b5050905080610dc7576040517fef7a4b6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b5093505050505b92915050565b610dde611a17565b610de86000611a71565b565b610df2611a17565b604080516060808201835263ffffffff86811680845260006020808601919091528783169486018590526007805468ffffffffffffffffff191690921765010000000000909502949094179055845160088054948701518787015194880151608089015160a08a015160c08b015160e08c01516101008d015197891667ffffffffffffffff19909b169a909a1764010000000095891695909502949094177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff1668010000000000000000988816989098027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff16979097176c0100000000000000000000000092871692909202919091177fffffffffffffffffff00000000000000ffffffffffffffffffffffffffffffff16600160801b91909516027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff1693909317600160a01b62ffffff95861602177fffffff000000000000ffffffffffffffffffffffffffffffffffffffffffffff16600160b81b938516939093027fffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffff1692909217600160d01b94841694909402939093177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b929093169190910291909117815590517f107fdd8d898f7a380d4a448bb9882a3e1bb767bd803a09721d828b4ce217b043916110299186918691612208565b60405180910390a1505050565b61103e611a17565b80516009819055602080830151600a81905560408051938452918301527f6e080c19f3bdc7644116da0ba00746ad7b6452f89b6634457e4a41c331fd03dd91015b60405180910390a150565b611092611a17565b6001600160a01b03811660009081526001602052604090205460ff166110ef576040517ff9a0ffdf0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610631565b6001600160a01b0381166000908152600160205260408120805460ff191690555b60045481101561121d57816001600160a01b031660048281548110611137576111376122c5565b6000918252602090912001546001600160a01b03160361120b576004805460009190611165906001906121f5565b81548110611175576111756122c5565b600091825260209091200154600480546001600160a01b0390921692508291849081106111a4576111a46122c5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060048054806111e3576111e36122db565b600082815260209020810160001990810180546001600160a01b03191690550190555061121d565b80611215816120dc565b915050611110565b506040516001600160a01b03821681527f5406c1f2d9ece2027a923f317fb5f2370221e330db898c037c10acc0c20495b39060200161107f565b61125f611a17565b60058190556040518181527fc9ac0b9c6116d44b14ac8198e0802802d07cf6956054e7542f0460a4d3423b3a9060200161107f565b604080516101208101825260085463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c01000000000000000000000000810483166060830152600160801b8104909216608082015262ffffff600160a01b8304811660a08301819052600160b81b8404821660c0840152600160d01b8404821660e0840152600160e81b9093041661010082015260009167ffffffffffffffff84161161134f575192915050565b8267ffffffffffffffff168160a0015162ffffff1610801561138457508060c0015162ffffff168367ffffffffffffffff1611155b15611393576020015192915050565b8267ffffffffffffffff168160c0015162ffffff161080156113c857508060e0015162ffffff168367ffffffffffffffff1611155b156113d7576040015192915050565b8267ffffffffffffffff168160e0015162ffffff1610801561140d575080610100015162ffffff168367ffffffffffffffff1611155b1561141c576060015192915050565b6080015192915050565b61142e611a17565b6001600160a01b03811660009081526001602052604090205460ff161561148c576040517f6ff7406a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610631565b6001600160a01b0381166000818152600160208181526040808420805460ff1916841790556004805493840181559093527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180546001600160a01b0319168417905590519182527fd9d9fdcc9f936c76b5aafe54fc3db5dcec0c6583c9ccc4abe91d17575c5145a5910161107f565b611526611a17565b6001600160a01b0381166115a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610631565b6115ab81611a71565b50565b60005a6113888110156115c057600080fd5b6113888103905084604082048203116115d857600080fd5b50823b6115e457600080fd5b60008083516020850160008789f1949350505050565b6000805a61160886866120c9565b61161291906121f5565b61161c903a6122f1565b9050600061163563ffffffff851664e8d4a510006122f1565b9050610b4881836120c9565b6006546040517f4a41897300000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8516600482015260009182916001600160a01b0390911690634a418973906024016020604051808303816000875af11580156116b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d79190612310565b90506001600160a01b038116611719576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546040517f6d5e8a7900000000000000000000000000000000000000000000000000000000815233600482015267ffffffffffffffff871660248201526000916001600160a01b031690636d5e8a7990604401602060405180830381865afa15801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af91906121d8565b90508067ffffffffffffffff16600003611807576040517ff0019fe600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff87166004820152336024820152604401610631565b60075463ffffffff9081169086161115611861576007546040517ff5d7e01e00000000000000000000000000000000000000000000000000000000815263ffffffff80881660048301529091166024820152604401610631565b6006546040517f4000a00700000000000000000000000000000000000000000000000000000000815233600482015267ffffffffffffffff881660248201526000916001600160a01b031690634000a007906044016020604051808303816000875af11580156118d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f991906121d8565b604080513360208083019190915267ffffffffffffffff808c1683850152841660608084019190915283518084039091018152608090920190925280519101209091506000906040805160208101839052439181019190915267ffffffffffffffff8a16606082015263ffffffff891660808201523360a082015290915060c00160408051601f1981840301815282825280516020918201206000858152600283528381209190915560039091522080546001600160a01b031916339081179091558a5160808c015151919267ffffffffffffffff8c169285927fabd654d3b85665d34edb5c6165db793362567af860f253a8a91462f31d1cb1c492611a03928e918e919061232d565b60405180910390a498975050505050505050565b6000546001600160a01b03163314610de85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610631565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000815180845260005b81811015611ae757602081850181015186830182015201611acb565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006105ae6020830184611ac1565b6001600160a01b03811681146115ab57600080fd5b67ffffffffffffffff811681146115ab57600080fd5b600080600060608486031215611b5a57600080fd5b8335611b6581611b1a565b92506020840135611b7581611b2f565b91506040840135611b8581611b2f565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611bc957611bc9611b90565b60405290565b6040805190810167ffffffffffffffff81118282101715611bc957611bc9611b90565b604051610120810167ffffffffffffffff81118282101715611bc957611bc9611b90565b604051601f8201601f1916810167ffffffffffffffff81118282101715611c3f57611c3f611b90565b604052919050565b803563ffffffff81168114611c5b57600080fd5b919050565b60008060008084860360e0811215611c7757600080fd5b85359450602086013593506080603f1982011215611c9457600080fd5b50611c9d611ba6565b6040860135611cab81611b2f565b81526060860135611cbb81611b2f565b6020820152611ccc60808701611c47565b604082015260a0860135611cdf81611b1a565b6060820152915060c08501358015158114611cf957600080fd5b939692955090935050565b600060208284031215611d1657600080fd5b5035919050565b600060408284031215611d2f57600080fd5b611d37611bcf565b9050813567ffffffffffffffff80821115611d5157600080fd5b818401915084601f830112611d6557600080fd5b8135602082821115611d7957611d79611b90565b611d8b601f8301601f19168201611c16565b92508183528681838601011115611da157600080fd5b8181850182850137600081838501015282855280860135818601525050505092915050565b600060a08284031215611dd857600080fd5b60405160a0810167ffffffffffffffff8282108183111715611dfc57611dfc611b90565b816040528293508435835260208501359150611e1782611b1a565b816020840152604085013591507fffffffff0000000000000000000000000000000000000000000000000000000082168214611e5257600080fd5b816040840152606085013560608401526080850135915080821115611e7657600080fd5b50611e8385828601611d1d565b6080830152505092915050565b600080600060608486031215611ea557600080fd5b833567ffffffffffffffff811115611ebc57600080fd5b611ec886828701611dc6565b935050611b7560208501611c47565b60008060408385031215611eea57600080fd5b823567ffffffffffffffff811115611f0157600080fd5b611f0d85828601611dc6565b925050611f1c60208401611c47565b90509250929050565b803562ffffff81168114611c5b57600080fd5b6000806000838503610160811215611f4f57600080fd5b611f5885611c47565b9350611f6660208601611c47565b925061012080603f1983011215611f7c57600080fd5b611f84611bf2565b9150611f9260408701611c47565b8252611fa060608701611c47565b6020830152611fb160808701611c47565b6040830152611fc260a08701611c47565b6060830152611fd360c08701611c47565b6080830152611fe460e08701611f25565b60a0830152610100611ff7818801611f25565b60c0840152612007828801611f25565b60e08401526120196101408801611f25565b818401525050809150509250925092565b60006040828403121561203c57600080fd5b6040516040810181811067ffffffffffffffff8211171561205f5761205f611b90565b604052823581526020928301359281019290925250919050565b60006020828403121561208b57600080fd5b81356105ae81611b1a565b6000602082840312156120a857600080fd5b81356105ae81611b2f565b634e487b7160e01b600052601160045260246000fd5b80820180821115610dd057610dd06120b3565b6000600182016120ee576120ee6120b3565b5060010190565b6000806000806080858703121561210b57600080fd5b8451935060208086015161211e81611b2f565b604087015190945061212f81611b1a565b606087015190935067ffffffffffffffff8082111561214d57600080fd5b818801915088601f83011261216157600080fd5b81518181111561217357612173611b90565b8060051b9150612184848301611c16565b818152918301840191848101908b84111561219e57600080fd5b938501935b838510156121c857845192506121b883611b1a565b82825293850193908501906121a3565b989b979a50959850505050505050565b6000602082840312156121ea57600080fd5b81516105ae81611b2f565b81810381811115610dd057610dd06120b3565b63ffffffff84811682528381166020830152825480821660408401526101608301919061224260608501838360201c1663ffffffff169052565b61225960808501838360401c1663ffffffff169052565b61227060a08501838360601c1663ffffffff169052565b61228760c08501838360801c1663ffffffff169052565b62ffffff60a082901c811660e086015260b882901c811661010086015260d082901c1661012085015260e81c61014090930192909252949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600081600019048311821515161561230b5761230b6120b3565b500290565b60006020828403121561232257600080fd5b81516105ae81611b1a565b84815263ffffffff841660208201528215156040820152608060608201526000610b486080830184611ac156fea2646970667358221220051338b8e5912fb649084f0d55ecaa7c1810769467d48a3bad5f773691a7bad364736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelRequest(uint256)": {
        "params": {
          "requestId": "- ID of the Oracle Request"
        }
      },
      "deregisterOracle(address)": {
        "params": {
          "oracle": "address of the oracle"
        }
      },
      "fulfillDataRequest(uint256,uint256,(uint64,uint64,uint32,address),bool)": {
        "params": {
          "rc": "request commitment pre-image, committed to at request time",
          "requestId": "- ID of the Oracle Request",
          "response": "- Return data for fulfilment"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingRequestExists(address,uint64,uint64)": {
        "params": {
          "accId": "- ID of the account"
        },
        "returns": {
          "_0": "true if there exists at least one unfulfilled request for the account, false otherwise."
        }
      },
      "registerOracle(address)": {
        "params": {
          "oracle": "address of the oracle"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint64)": {
        "details": "Generates and stores a request ID, increments the local nonce, creates a request on the target oracle contract.Emits Requested event.",
        "params": {
          "accId": "- The ID of the account. Must be funded with the minimum account balance required for the selected keyHash.",
          "callbackGasLimit": "- How much gas you'd like to receive in your fulfillRequest callback. Note that gasleft() inside fulfillRequest may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRequest. The acceptable range is [0, maxGasLimit]",
          "req": "The initialized Request"
        },
        "returns": {
          "requestId": "- A unique identifier of the request. Can be used to match a request to a response in fulfillRequest."
        }
      },
      "setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))": {
        "params": {
          "feeConfig": "fee tier configuration",
          "gasAfterPaymentCalculation": "gas used in doing accounting after completing the gas measurement",
          "maxGasLimit": "global max for request gas limit"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "typeAndVersion()": {
        "returns": {
          "_0": "Type and version string"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelRequest(uint256)": {
        "notice": "Cancelling oracle request"
      },
      "deregisterOracle(address)": {
        "notice": "Deregister an oracle"
      },
      "fulfillDataRequest(uint256,uint256,(uint64,uint64,uint32,address),bool)": {
        "notice": "Fulfils oracle request"
      },
      "pendingRequestExists(address,uint64,uint64)": {
        "notice": "Check to see if there exists a request commitment consumers for all consumers and keyhashes for a given acc."
      },
      "registerOracle(address)": {
        "notice": "Register an oracle"
      },
      "requestData((bytes32,address,bytes4,uint256,(bytes,uint256)),uint32,uint64)": {
        "notice": "Creates a request to RequestResponse oracle"
      },
      "setConfig(uint32,uint32,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))": {
        "notice": "Sets the general configuration"
      },
      "typeAndVersion()": {
        "notice": "The type and version of this contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 546,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7376,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "s_oracles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7380,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "s_requestCommitments",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 7384,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "s_requestOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7387,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "s_registeredOracles",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7389,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "s_minBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7392,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "s_prepayment",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(PrepaymentInterface)10560"
      },
      {
        "astId": 7402,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "s_config",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Config)7399_storage"
      },
      {
        "astId": 7424,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "s_feeConfig",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(FeeConfig)7421_storage"
      },
      {
        "astId": 7432,
        "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
        "label": "s_directPaymentConfig",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(DirectPaymentConfig)7429_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(PrepaymentInterface)10560": {
        "encoding": "inplace",
        "label": "contract PrepaymentInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(Config)7399_storage": {
        "encoding": "inplace",
        "label": "struct RequestResponseCoordinator.Config",
        "members": [
          {
            "astId": 7394,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "maxGasLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7396,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "reentrancyLock",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7398,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "gasAfterPaymentCalculation",
            "offset": 5,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DirectPaymentConfig)7429_storage": {
        "encoding": "inplace",
        "label": "struct RequestResponseCoordinator.DirectPaymentConfig",
        "members": [
          {
            "astId": 7426,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "fulfillmentFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7428,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "baseFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FeeConfig)7421_storage": {
        "encoding": "inplace",
        "label": "struct RequestResponseCoordinator.FeeConfig",
        "members": [
          {
            "astId": 7404,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier1",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7406,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier2",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7408,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier3",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7410,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier4",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7412,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "fulfillmentFlatFeeKlayPPMTier5",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7414,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "reqsForTier2",
            "offset": 20,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7416,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "reqsForTier3",
            "offset": 23,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7418,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "reqsForTier4",
            "offset": 26,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7420,
            "contract": "src/v0.1/RequestResponseCoordinator.sol:RequestResponseCoordinator",
            "label": "reqsForTier5",
            "offset": 29,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}