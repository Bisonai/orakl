{
  "address": "0xFD8f232648Dc41FA425214646e0290B9AB6014ED",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolFeeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BurnFeeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CoordinatorExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "FailedToWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "FailedToWithdrawFromTemporaryAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCoordinator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustBeAccountOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperatorFeeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingRequestExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtocolFeeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RatioOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooHighFeeRatio",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "AccountBalanceDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "AccountBalanceIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AccountCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "AccountConsumerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "AccountConsumerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "AccountCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "AccountOwnerTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "AccountOwnerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "ratio",
          "type": "uint8"
        }
      ],
      "name": "BurnRatioSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BurnedFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "CoordinatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "CoordinatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "ratio",
          "type": "uint8"
        }
      ],
      "name": "ProtocolFeeRatioSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "TemporaryAccountCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_RATIO",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_RATIO",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "acceptAccountOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "addCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "cancelAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "chargeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "chargeFeeTemporary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "operatorAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "operatorFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "operatorFeeRecipient",
          "type": "address"
        }
      ],
      "name": "chargeOperatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "operatorFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "operatorFeeRecipient",
          "type": "address"
        }
      ],
      "name": "chargeOperatorFeeTemporary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createAccount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "createTemporaryAccount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "depositTemporary",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "getAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "reqCount",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "consumers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "getAccountOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurnFeeRatio",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCoordinators",
      "outputs": [
        {
          "internalType": "contract ICoordinatorBase[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeRatio",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "getReqCount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "increaseNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "isValidAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "pendingRequestExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        }
      ],
      "name": "pendingRequestExistsTemporary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "removeConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "removeCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "requestedOwner",
          "type": "address"
        }
      ],
      "name": "requestAccountOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sCoordinators",
      "outputs": [
        {
          "internalType": "contract ICoordinatorBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "ratio",
          "type": "uint8"
        }
      ],
      "name": "setBurnFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "ratio",
          "type": "uint8"
        }
      ],
      "name": "setProtocolFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setProtocolFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typeAndVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawTemporary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ddb16d10a301d84bb3991c1571e9134df751d2bed8b024014b8b63e190342c5",
  "receipt": {
    "to": null,
    "from": "0x81Ea3830d118970e2e8f459f8E062803ff45ff21",
    "contractAddress": "0xFD8f232648Dc41FA425214646e0290B9AB6014ED",
    "transactionIndex": 3,
    "gasUsed": "5657669",
    "logsBloom": "0x
    "blockHash": "0x3122f66545ff3fcc88853251ed90111fd19313d5a7142ea5329dfb61ad8bfac1",
    "transactionHash": "0x2ddb16d10a301d84bb3991c1571e9134df751d2bed8b024014b8b63e190342c5",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 126159243,
        "transactionHash": "0x2ddb16d10a301d84bb3991c1571e9134df751d2bed8b024014b8b63e190342c5",
        "address": "0xFD8f232648Dc41FA425214646e0290B9AB6014ED",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000081ea3830d118970e2e8f459f8e062803ff45ff21"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x3122f66545ff3fcc88853251ed90111fd19313d5a7142ea5329dfb61ad8bfac1"
      }
    ],
    "blockNumber": 126159243,
    "cumulativeGasUsed": "6140445",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x790C3B3f3EA2f82faf5b0c125C97113Bb1fde367"],
  "numDeployments": 3,
  "solcInputHash": "30f92ec385801e0171f7916a3821446c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BurnFeeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoordinatorExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"FailedToWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"FailedToWithdrawFromTemporaryAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCoordinator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeAccountOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorFeeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingRequestExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RatioOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooHighFeeRatio\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"AccountBalanceDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"AccountBalanceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AccountCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"AccountConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"AccountConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AccountOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AccountOwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"ratio\",\"type\":\"uint8\"}],\"name\":\"BurnRatioSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"ratio\",\"type\":\"uint8\"}],\"name\":\"ProtocolFeeRatioSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TemporaryAccountCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_RATIO\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RATIO\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"acceptAccountOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"addCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"chargeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"chargeFeeTemporary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operatorAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"operatorFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operatorFeeRecipient\",\"type\":\"address\"}],\"name\":\"chargeOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operatorFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operatorFeeRecipient\",\"type\":\"address\"}],\"name\":\"chargeOperatorFeeTemporary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createTemporaryAccount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"depositTemporary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"getAccountOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnFeeRatio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoordinators\",\"outputs\":[{\"internalType\":\"contract ICoordinatorBase[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeRatio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"getReqCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"increaseNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"isValidAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExistsTemporary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"removeCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"requestedOwner\",\"type\":\"address\"}],\"name\":\"requestAccountOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sCoordinators\",\"outputs\":[{\"internalType\":\"contract ICoordinatorBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"ratio\",\"type\":\"uint8\"}],\"name\":\"setBurnFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"ratio\",\"type\":\"uint8\"}],\"name\":\"setProtocolFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"setProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTemporary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bisonai\",\"kind\":\"dev\",\"methods\":{\"acceptAccountOwnerTransfer(uint64)\":{\"details\":\"The function will revert inside of the`Account.acceptAccountOwnerTransfer` if original owner of`accId` has not requested the `msg.sender` to become thenew owner.\",\"params\":{\"accId\":\"- ID of the account\"}},\"addConsumer(uint64,address)\":{\"details\":\"This function is meant to be used only for [regular]account. If called with [temporary] account, thetransaction will be reverted.\",\"params\":{\"accId\":\"- ID of the account\",\"consumer\":\"- New consumer which can use the account\"}},\"cancelAccount(uint64,address)\":{\"details\":\"This function is meant to be used only for [regular]account. If there is any pending request, the accountcannot be canceled.\",\"params\":{\"accId\":\"- ID of the account\",\"to\":\"- Where to send the remaining $KLAY to\"}},\"chargeFee(uint64,uint256)\":{\"params\":{\"accId\":\"- ID of the account\",\"amount\":\"- $KLAY amount to be charged\"}},\"chargeFeeTemporary(uint64)\":{\"details\":\"Temporary account is deleted because we do not expect to use it again.\",\"params\":{\"accId\":\"- ID of the account\"}},\"chargeOperatorFee(uint64,uint256,address)\":{\"params\":{\"accId\":\"- ID of the account\",\"operatorFee\":\"- amount of fee to be paid to operator fee recipient\",\"operatorFeeRecipient\":\"- address of operator fee recipient\"}},\"chargeOperatorFeeTemporary(uint256,address)\":{\"params\":{\"operatorFee\":\"- amount of fee to be paid to operator fee recipient\",\"operatorFeeRecipient\":\"- address of operator fee recipient\"}},\"createAccount()\":{\"details\":\"This function deploys a new `Account` contract (defined atAccount.sol) and connect it with the `Prepayment` contract.You can add or remove the consumer dynamically with`addConsumer` or `removeConsumer` functions,respectively. To fund the account, use deposit function.\",\"returns\":{\"_0\":\"accId - A unique account id\"}},\"createTemporaryAccount(address)\":{\"params\":{\"\":\"- account owner\"},\"returns\":{\"_0\":\"accId - A unique account id\"}},\"deposit(uint64)\":{\"params\":{\"accId\":\"- ID of the account\"}},\"depositTemporary(uint64)\":{\"params\":{\"accId\":\"- ID of the account\"}},\"getAccount(uint64)\":{\"details\":\"This function can be used for both [regular] and[temporary] account.\",\"params\":{\"accId\":\"- ID of the account\"},\"returns\":{\"balance\":\"- $KLAY balance of the account in juels.\",\"consumers\":\"- list of consumer address which are able to use this account.\",\"owner\":\"- owner of the account.\",\"reqCount\":\"- number of requests for this account, determines fee tier.\"}},\"getAccountOwner(uint64)\":{\"details\":\"This function is meant to be used only for [regular]account.\",\"params\":{\"accId\":\"- ID of the account\"}},\"getBalance(uint64)\":{\"details\":\"This function is meant to be used only for [regular]account. If invalid `accId` (ID not assigned to anyaccount) is passed, zero balance will be always returned.\",\"params\":{\"accId\":\"- ID of the account\"},\"returns\":{\"balance\":\"of account\"}},\"getNonce(uint64,address)\":{\"details\":\"This function is meant to be used only for [regular]account. [temporary] account does not have a notion of a nonce.When an invalid `accId` is passed, transaction isreverted. When an invalid `consumer` is passed, 0 zerononce is returned that represents an unregistered consumer.\",\"params\":{\"accId\":\"- ID of the account\",\"consumer\":\"- consumer address\"}},\"getReqCount(uint64)\":{\"details\":\"This function is meant to be used only for [regular]account.\",\"params\":{\"accId\":\"- ID of the account\"},\"returns\":{\"_0\":\"number of requests\"}},\"increaseNonce(uint64,address)\":{\"params\":{\"accId\":\"- ID of the account\",\"consumer\":\"- Address of consumer registered under accId\"}},\"isValidAccount(uint64,address)\":{\"details\":\"This function can be used for checking validity of both[regular] and [temporary] account.\",\"params\":{\"accId\":\"- ID of the account\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeConsumer(uint64,address)\":{\"details\":\"This function is meant to be used only for [regular]account. If called with [temporary] account, thetransaction will be reverted.\",\"params\":{\"accId\":\"- ID of the account\",\"consumer\":\"- Consumer to remove from the account\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestAccountOwnerTransfer(uint64,address)\":{\"details\":\"Only [regular] account owner can be transferred.\",\"params\":{\"accId\":\"- ID of the account\",\"newOwner\":\"- proposed new owner of the account\"}},\"setBurnFeeRatio(uint8)\":{\"params\":{\"ratio\":\"in a range 0 - 100 % of a fee to be burnt\"}},\"setProtocolFeeRatio(uint8)\":{\"params\":{\"ratio\":\"in a range 0 - 100 % of a fee to be burnt\"}},\"setProtocolFeeRecipient(address)\":{\"params\":{\"protocolFeeRecipient\":\"- address of protocol fee recipient\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"typeAndVersion()\":{\"returns\":{\"_0\":\"Type and version string\"}},\"withdraw(uint64,uint256)\":{\"details\":\"Account owner can withdraw $KLAY only when there are nopending requests on any of associated consumers. If one triesto use it to withdraw $KLAY from [temporary] account,transaction will revert. Transaction reverts also on failure towithdraw tokens from account.\",\"params\":{\"accId\":\"- ID of the account\",\"amount\":\"- $KLAY amount to be withdrawn\"}},\"withdrawTemporary(uint64,address)\":{\"details\":\"Account owner can withdraw $KLAY only when there are nopending requests. Temporary account will be deleted uponsuccessful withdrawal. Transaction reverts also on failure towithdraw tokens from account.\",\"params\":{\"accId\":\"- ID of the account\",\"to\":\"- recipient address\"}}},\"title\":\"Orakl Network Prepayment\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptAccountOwnerTransfer(uint64)\":{\"notice\":\"Accept account owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to an account.\"},\"cancelAccount(uint64,address)\":{\"notice\":\"Cancel account\"},\"chargeFee(uint64,uint256)\":{\"notice\":\"Burn part of fee and charge protocol fee for a service connected to [regular] account.\"},\"chargeFeeTemporary(uint64)\":{\"notice\":\"Burn part of fee and charge protocol fee for a service connected to [temporary] account.\"},\"chargeOperatorFee(uint64,uint256,address)\":{\"notice\":\"Charge operator fee for a service connected to [temporary] account.\"},\"chargeOperatorFeeTemporary(uint256,address)\":{\"notice\":\"Charge operator fee for a service connected to [temporary] account.\"},\"createAccount()\":{\"notice\":\"Create a [regular] account.\"},\"createTemporaryAccount(address)\":{\"notice\":\"Create a temporary account to be used with a singleservice request.\"},\"deposit(uint64)\":{\"notice\":\"Deposit $KLAY to [regular] account.Anybody can deposit $KLAY, there are no restrictions.\"},\"depositTemporary(uint64)\":{\"notice\":\"Deposit $KLAY to [temporary] account.Anybody can deposit $KLAY, there are no restrictions.\"},\"getAccount(uint64)\":{\"notice\":\"Get an account information.\"},\"getAccountOwner(uint64)\":{\"notice\":\"Get address of account owner.\"},\"getBalance(uint64)\":{\"notice\":\"Returns the balance of given account.\"},\"getBurnFeeRatio()\":{\"notice\":\"Return the current burn ratio that represents thepercentage of $KLAY fee that is burnt during fulfillmentof every request.\"},\"getCoordinators()\":{\"notice\":\"Get addresses of all registered coordinators in Prepayment.\"},\"getNonce(uint64,address)\":{\"notice\":\"Get nonce for specified `consumer` in account denoted by `accId`.\"},\"getProtocolFeeRatio()\":{\"notice\":\"Return the current protocol fee ratio that representsthe percentage of $KLAY fee that is charged for everyfinalizes fulfillment.\"},\"getProtocolFeeRecipient()\":{\"notice\":\"Get address of protocol fee recipient.\"},\"getReqCount(uint64)\":{\"notice\":\"Return the number of requests created through theaccount.\"},\"increaseNonce(uint64,address)\":{\"notice\":\"Increase nonce for consumer registered under accId.\"},\"isValidAccount(uint64,address)\":{\"notice\":\"Returns `true` when a `consumer` is registered under`accId`, otherwise returns `false`.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a account.\"},\"requestAccountOwnerTransfer(uint64,address)\":{\"notice\":\"Request account owner transfer.\"},\"setBurnFeeRatio(uint8)\":{\"notice\":\"The function allows to update a \\\"burn ratio\\\" that represents apartial amount of payment for the Orakl Network service thatwill be burnt.\"},\"setProtocolFeeRatio(uint8)\":{\"notice\":\"The function allows to update a protocol fee.\"},\"setProtocolFeeRecipient(address)\":{\"notice\":\"Update address of protocol fee recipient that willreceive protocol fees.\"},\"typeAndVersion()\":{\"notice\":\"The type and version of this contract\"},\"withdraw(uint64,uint256)\":{\"notice\":\"Withdraw $KLAY from [regular] account.\"},\"withdrawTemporary(uint64,address)\":{\"notice\":\"Withdraw $KLAY from [temporary] account.\"}},\"notice\":\"Prepayment is a type of prepaid payment solution whichallows to controls two types of accounts: regular andtemporary.@notice [regular] account is a separate smart contract(Account.sol) that is meant to be used long-term. User candeposit $KLAY to account and use it to pay for Orakl Networkservices. More details about [regular] account aredescribed at `Account` smart contract.@notice [temporary] account is created for one-time-use of OraklNetwork services. Consumer can send $KLAY together withrequest to Orakl Network to pay for the service. Alloperations related to [temporary] account are implementedin the Prepayment contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/Prepayment.sol\":\"Prepayment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/v0.1/Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/IAccount.sol\\\";\\nimport \\\"./interfaces/ITypeAndVersion.sol\\\";\\n\\n/// @title Orakl Network Account\\n/// @author Bisonai\\n/// @notice Account contract represents a [regular] account type that\\n/// @notice is connected to a Prepayment (Prepayment.sol) contract.\\n/// @dev Account contract is deployed with a `Prepayment.addContract`\\n/// @dev call. The functions that modify the account state are allowed\\n/// @dev to to be called only through Prepayment contract, other ones\\n/// @dev are can be called on Account contract itself.\\ncontract Account is IAccount, ITypeAndVersion {\\n    uint16 public constant MAX_CONSUMERS = 100;\\n\\n    address private sPaymentSolution;\\n    uint64 private sAccId;\\n\\n    // Account information\\n    address private sOwner; // Owner can fund/withdraw/cancel the acc\\n    address private sRequestedOwner; // For safely transferring acc ownership\\n    uint256 private sBalance; // Common $KLAY balance used for all consumer requests\\n    uint64 private sReqCount; // For fee tiers\\n    address[] private sConsumers;\\n\\n    /* consumer */\\n    /* nonce */\\n    mapping(address => uint64) private sConsumerToNonce;\\n\\n    error TooManyConsumers();\\n    error MustBeRequestedOwner(address requestedOwner);\\n    error MustBeAccountOwner(address owner);\\n    error MustBePaymentSolution(address paymentSolution);\\n    error InsufficientBalance();\\n    error InvalidConsumer(address consumer);\\n    error BurnFeeFailed();\\n    error OperatorFeeFailed();\\n    error ProtocolFeeFailed();\\n\\n    modifier onlyPaymentSolution() {\\n        if (msg.sender != sPaymentSolution) {\\n            revert MustBePaymentSolution(sPaymentSolution);\\n        }\\n        _;\\n    }\\n\\n    constructor(uint64 accId, address owner) {\\n        sAccId = accId;\\n        sOwner = owner;\\n        sPaymentSolution = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        sBalance += msg.value;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function getAccount()\\n        external\\n        view\\n        returns (uint256 balance, uint64 reqCount, address owner, address[] memory consumers)\\n    {\\n        return (sBalance, sReqCount, sOwner, sConsumers);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function getAccountId() external view returns (uint64) {\\n        return sAccId;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function getBalance() external view returns (uint256) {\\n        return sBalance;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function getReqCount() external view returns (uint64) {\\n        return sReqCount;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function getOwner() external view returns (address) {\\n        return sOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function getConsumers() external view returns (address[] memory) {\\n        return sConsumers;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function getRequestedOwner() external view returns (address) {\\n        return sRequestedOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function getNonce(address consumer) external view returns (uint64) {\\n        return sConsumerToNonce[consumer];\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function getPaymentSolution() external view returns (address) {\\n        return sPaymentSolution;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function increaseNonce(address consumer) external onlyPaymentSolution returns (uint64) {\\n        uint64 nonce = sConsumerToNonce[consumer] + 1;\\n        sConsumerToNonce[consumer] = nonce;\\n        return nonce;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function requestAccountOwnerTransfer(address newOwner) external onlyPaymentSolution {\\n        // Proposing the address(0) would never be claimable so no\\n        // need to check.\\n        if (sRequestedOwner != newOwner) {\\n            sRequestedOwner = newOwner;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function acceptAccountOwnerTransfer(address newOwner) external onlyPaymentSolution {\\n        if (sRequestedOwner != newOwner) {\\n            revert MustBeRequestedOwner(sRequestedOwner);\\n        }\\n        sOwner = newOwner;\\n        sRequestedOwner = address(0);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function addConsumer(address consumer) external onlyPaymentSolution {\\n        // Already maxed, cannot add any more consumers.\\n        if (sConsumers.length >= MAX_CONSUMERS) {\\n            revert TooManyConsumers();\\n        }\\n        if (sConsumerToNonce[consumer] > 0) {\\n            // Idempotence - do nothing if already added. Ensures\\n            // uniqueness in sConsumers.\\n            return;\\n        }\\n\\n        // Initialize the nonce to 1, indicating the consumer is\\n        // allocated.\\n        sConsumerToNonce[consumer] = 1;\\n        sConsumers.push(consumer);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function removeConsumer(address consumer) external onlyPaymentSolution {\\n        if (sConsumerToNonce[consumer] == 0) {\\n            revert InvalidConsumer(consumer);\\n        }\\n\\n        // Note bounded by MAX_CONSUMERS\\n        address[] memory consumers = sConsumers;\\n        uint256 consumersLength = consumers.length;\\n        uint256 lastConsumerIndex = consumersLength - 1;\\n\\n        for (uint256 i = 0; i < consumersLength; ++i) {\\n            if (consumers[i] == consumer) {\\n                address last = consumers[lastConsumerIndex];\\n                // Storage write to preserve last element\\n                sConsumers[i] = last;\\n                // Storage remove last element\\n                sConsumers.pop();\\n                break;\\n            }\\n        }\\n\\n        delete sConsumerToNonce[consumer];\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function withdraw(uint256 amount) external onlyPaymentSolution returns (bool, uint256) {\\n        uint256 balance = sBalance;\\n\\n        if (balance < amount) {\\n            revert InsufficientBalance();\\n        }\\n\\n        balance -= amount;\\n        sBalance = balance;\\n\\n        (bool sent, ) = payable(sOwner).call{value: amount}(\\\"\\\");\\n\\n        return (sent, balance);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function chargeFee(\\n        uint256 burnFee,\\n        uint256 protocolFee,\\n        address protocolFeeRecipient\\n    ) external onlyPaymentSolution {\\n        sReqCount += 1;\\n        sBalance -= (burnFee + protocolFee);\\n\\n        if (burnFee > 0) {\\n            (bool sent, ) = address(0x000000000000000000000000000000000000dEaD).call{\\n                value: burnFee\\n            }(\\\"\\\");\\n            if (!sent) {\\n                revert BurnFeeFailed();\\n            }\\n        }\\n\\n        if (protocolFee > 0) {\\n            (bool sent, ) = protocolFeeRecipient.call{value: protocolFee}(\\\"\\\");\\n            if (!sent) {\\n                revert ProtocolFeeFailed();\\n            }\\n        }\\n    }\\n\\n    function chargeOperatorFee(\\n        uint256 operatorFee,\\n        address operatorFeeRecipient\\n    ) external onlyPaymentSolution {\\n        sBalance -= operatorFee;\\n\\n        (bool sent, ) = operatorFeeRecipient.call{value: operatorFee}(\\\"\\\");\\n        if (!sent) {\\n            revert OperatorFeeFailed();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function cancelAccount(address to) external onlyPaymentSolution {\\n        selfdestruct(payable(to));\\n    }\\n\\n    /**\\n     * @notice The type and version of this contract\\n     * @return Type and version string\\n     */\\n    function typeAndVersion() external pure virtual override returns (string memory) {\\n        return \\\"Account v0.1\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xa276426a66f4457e4ff1ebf39da1a4a723600cb6ac2146f4be994adca863006d\",\"license\":\"MIT\"},\"src/v0.1/Prepayment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Account.sol\\\";\\nimport \\\"./interfaces/IAccount.sol\\\";\\nimport \\\"./interfaces/ICoordinatorBase.sol\\\";\\nimport \\\"./interfaces/IPrepayment.sol\\\";\\nimport \\\"./interfaces/ITypeAndVersion.sol\\\";\\n\\n/// @title Orakl Network Prepayment\\n/// @author Bisonai\\n/// @notice Prepayment is a type of prepaid payment solution which\\n/// @notice allows to controls two types of accounts: regular and\\n/// @notice temporary.\\n/// @notice\\n/// @notice [regular] account is a separate smart contract\\n/// @notice (Account.sol) that is meant to be used long-term. User can\\n/// @notice deposit $KLAY to account and use it to pay for Orakl Network\\n/// @notice services. More details about [regular] account are\\n/// @notice described at `Account` smart contract.\\n/// @notice\\n/// @notice [temporary] account is created for one-time-use of Orakl\\n/// @notice Network services. Consumer can send $KLAY together with\\n/// @notice request to Orakl Network to pay for the service. All\\n/// @notice operations related to [temporary] account are implemented\\n/// @notice in the Prepayment contract.\\ncontract Prepayment is Ownable, IPrepayment, ITypeAndVersion {\\n    uint64 constant TEMPORARY_ACCOUNT_NONCE = 1;\\n    uint8 public constant MIN_RATIO = 0;\\n    uint8 public constant MAX_RATIO = 100;\\n    uint8 private sBurnFeeRatio = 50; // %\\n    uint8 private sProtocolFeeRatio = 5; // %\\n\\n    address private sProtocolFeeRecipient;\\n\\n    // Coordinator\\n    ICoordinatorBase[] public sCoordinators;\\n\\n    /* coordinator address */\\n    /* association */\\n    mapping(address => bool) private sIsCoordinator;\\n\\n    // Account\\n    uint64 private sCurrentAccId;\\n\\n    /* accId */\\n    /* Account */\\n    mapping(uint64 => Account) private sAccIdToAccount;\\n\\n    mapping(uint64 => bool) private sIsTemporaryAccount;\\n\\n    struct TemporaryAccount {\\n        uint256 balance;\\n        address owner;\\n    }\\n\\n    /* accId */\\n    /* TemporaryAccount */\\n    mapping(uint64 => TemporaryAccount) private sAccIdToTmpAcc;\\n\\n    error PendingRequestExists();\\n    error InvalidCoordinator();\\n    error InvalidAccount();\\n    error MustBeAccountOwner();\\n    error RatioOutOfBounds();\\n    error FailedToDeposit();\\n    error FailedToWithdraw(uint64 accId);\\n    error CoordinatorExists();\\n    error InsufficientBalance();\\n    error BurnFeeFailed();\\n    error OperatorFeeFailed();\\n    error ProtocolFeeFailed();\\n    error TooHighFeeRatio();\\n    error FailedToWithdrawFromTemporaryAccount(uint64 accId);\\n\\n    event AccountCreated(uint64 indexed accId, address account, address owner);\\n    event TemporaryAccountCreated(uint64 indexed accId, address owner);\\n    event AccountCanceled(uint64 indexed accId, address to, uint256 amount);\\n    event AccountBalanceIncreased(uint64 indexed accId, uint256 oldBalance, uint256 newBalance);\\n    event AccountBalanceDecreased(uint64 indexed accId, uint256 oldBalance, uint256 newBalance);\\n    event AccountConsumerAdded(uint64 indexed accId, address consumer);\\n    event AccountConsumerRemoved(uint64 indexed accId, address consumer);\\n    event BurnRatioSet(uint8 ratio);\\n    event ProtocolFeeRatioSet(uint8 ratio);\\n    event CoordinatorAdded(address coordinator);\\n    event CoordinatorRemoved(address coordinator);\\n    event AccountOwnerTransferRequested(uint64 indexed accId, address from, address to);\\n    event AccountOwnerTransferred(uint64 indexed accId, address from, address to);\\n    event BurnedFee(uint64 indexed accId, uint256 amount);\\n\\n    /**\\n     * @dev The modifier is only for [regular] account. If called with\\n     * @dev account ID assigned to [temporary] account, then the\\n     * @dev transaction will be reverted because there is no\\n     * @dev associated `Account` contract.\\n     */\\n    modifier onlyAccountOwner(uint64 accId) {\\n        if (sAccIdToAccount[accId].getOwner() != msg.sender) {\\n            revert MustBeAccountOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyCoordinator() {\\n        if (!sIsCoordinator[msg.sender]) {\\n            revert InvalidCoordinator();\\n        }\\n        _;\\n    }\\n\\n    constructor(address protocolFeeRecipient) {\\n        sProtocolFeeRecipient = protocolFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Return the current burn ratio that represents the\\n     * @notice percentage of $KLAY fee that is burnt during fulfillment\\n     * @notice of every request.\\n     */\\n    function getBurnFeeRatio() external view returns (uint8) {\\n        return sBurnFeeRatio;\\n    }\\n\\n    /**\\n     * @notice The function allows to update a \\\"burn ratio\\\" that represents a\\n     * @notice partial amount of payment for the Orakl Network service that\\n     * @notice will be burnt.\\n     * @param ratio in a range 0 - 100 % of a fee to be burnt\\n     */\\n    function setBurnFeeRatio(uint8 ratio) external onlyOwner {\\n        if (ratio < MIN_RATIO || ratio > MAX_RATIO) {\\n            revert RatioOutOfBounds();\\n        }\\n\\n        if ((ratio + sProtocolFeeRatio) > 100) {\\n            revert TooHighFeeRatio();\\n        }\\n\\n        sBurnFeeRatio = ratio;\\n        emit BurnRatioSet(ratio);\\n    }\\n\\n    /**\\n     * @notice Return the current protocol fee ratio that represents\\n     * @notice the percentage of $KLAY fee that is charged for every\\n     * @notice finalizes fulfillment.\\n     */\\n    function getProtocolFeeRatio() external view returns (uint8) {\\n        return sProtocolFeeRatio;\\n    }\\n\\n    /**\\n     * @notice The function allows to update a protocol fee.\\n     * @param ratio in a range 0 - 100 % of a fee to be burnt\\n     */\\n    function setProtocolFeeRatio(uint8 ratio) external onlyOwner {\\n        if (ratio < MIN_RATIO || ratio > MAX_RATIO) {\\n            revert RatioOutOfBounds();\\n        }\\n        if ((ratio + sBurnFeeRatio) > 100) {\\n            revert TooHighFeeRatio();\\n        }\\n        sProtocolFeeRatio = ratio;\\n        emit ProtocolFeeRatioSet(ratio);\\n    }\\n\\n    /**\\n     * @notice Get address of protocol fee recipient.\\n     */\\n    function getProtocolFeeRecipient() external view returns (address) {\\n        return sProtocolFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Update address of protocol fee recipient that will\\n     * @notice receive protocol fees.\\n     * @param protocolFeeRecipient - address of protocol fee recipient\\n     */\\n    function setProtocolFeeRecipient(address protocolFeeRecipient) external onlyOwner {\\n        sProtocolFeeRecipient = protocolFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Get addresses of all registered coordinators in Prepayment.\\n     */\\n    function getCoordinators() external view returns (ICoordinatorBase[] memory) {\\n        return sCoordinators;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function isValidAccount(uint64 accId, address consumer) external view returns (bool) {\\n        Account account = sAccIdToAccount[accId];\\n        bool isValidRegular = address(account) != address(0) && account.getNonce(consumer) != 0;\\n        bool isValidTemporary = sAccIdToTmpAcc[accId].owner == consumer;\\n\\n        return isValidRegular || isValidTemporary;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function getBalance(uint64 accId) external view returns (uint256 balance) {\\n        return sAccIdToAccount[accId].getBalance();\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function getReqCount(uint64 accId) external view returns (uint64) {\\n        return sAccIdToAccount[accId].getReqCount();\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function getAccount(\\n        uint64 accId\\n    )\\n        external\\n        view\\n        returns (uint256 balance, uint64 reqCount, address owner, address[] memory consumers)\\n    {\\n        Account account = sAccIdToAccount[accId];\\n\\n        if (address(account) != address(0)) {\\n            // [regular] account\\n            return account.getAccount();\\n        } else if (sIsTemporaryAccount[accId]) {\\n            // [temporary] account\\n            TemporaryAccount memory tmpAccConfig = sAccIdToTmpAcc[accId];\\n            return (tmpAccConfig.balance, 0, tmpAccConfig.owner, consumers);\\n        } else {\\n            revert InvalidAccount();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function getAccountOwner(uint64 accId) external view returns (address) {\\n        return sAccIdToAccount[accId].getOwner();\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function getNonce(uint64 accId, address consumer) external view returns (uint64) {\\n        return sAccIdToAccount[accId].getNonce(consumer);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function createAccount() external returns (uint64) {\\n        uint64 currentAccId = sCurrentAccId + 1;\\n        sCurrentAccId = currentAccId;\\n\\n        Account acc = new Account(currentAccId, msg.sender);\\n        sAccIdToAccount[currentAccId] = acc;\\n\\n        emit AccountCreated(currentAccId, address(acc), msg.sender);\\n        return currentAccId;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function createTemporaryAccount(address owner) external returns (uint64) {\\n        uint64 currentAccId = sCurrentAccId + 1;\\n        sCurrentAccId = currentAccId;\\n\\n        sAccIdToTmpAcc[currentAccId] = TemporaryAccount({balance: 0, owner: owner});\\n        sIsTemporaryAccount[currentAccId] = true;\\n\\n        emit TemporaryAccountCreated(currentAccId, owner);\\n        return currentAccId;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function requestAccountOwnerTransfer(\\n        uint64 accId,\\n        address requestedOwner\\n    ) external onlyAccountOwner(accId) {\\n        sAccIdToAccount[accId].requestAccountOwnerTransfer(requestedOwner);\\n        emit AccountOwnerTransferRequested(accId, msg.sender, requestedOwner);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function acceptAccountOwnerTransfer(uint64 accId) external {\\n        Account account = sAccIdToAccount[accId];\\n        address newOwner = msg.sender;\\n        address oldOwner = account.getOwner();\\n        account.acceptAccountOwnerTransfer(newOwner);\\n        emit AccountOwnerTransferred(accId, oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function cancelAccount(uint64 accId, address to) external onlyAccountOwner(accId) {\\n        if (pendingRequestExists(accId)) {\\n            revert PendingRequestExists();\\n        }\\n\\n        Account account = sAccIdToAccount[accId];\\n        uint256 balance = account.getBalance();\\n        delete sAccIdToAccount[accId];\\n\\n        account.cancelAccount(to);\\n\\n        emit AccountCanceled(accId, to, balance);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function addConsumer(uint64 accId, address consumer) external onlyAccountOwner(accId) {\\n        sAccIdToAccount[accId].addConsumer(consumer);\\n        emit AccountConsumerAdded(accId, consumer);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function removeConsumer(uint64 accId, address consumer) external onlyAccountOwner(accId) {\\n        sAccIdToAccount[accId].removeConsumer(consumer);\\n        emit AccountConsumerRemoved(accId, consumer);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function deposit(uint64 accId) external payable {\\n        Account account = sAccIdToAccount[accId];\\n        if (address(account) == address(0)) {\\n            revert InvalidAccount();\\n        }\\n        uint256 amount = msg.value;\\n        uint256 balance = account.getBalance();\\n\\n        (bool sent, ) = payable(account).call{value: msg.value}(\\\"\\\");\\n        if (!sent) {\\n            revert FailedToDeposit();\\n        }\\n\\n        emit AccountBalanceIncreased(accId, balance, balance + amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function depositTemporary(uint64 accId) external payable {\\n        uint256 balance = sAccIdToTmpAcc[accId].balance;\\n        uint256 updatedBalance = balance + msg.value;\\n        sAccIdToTmpAcc[accId].balance = updatedBalance;\\n        emit AccountBalanceIncreased(accId, balance, updatedBalance);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function withdraw(uint64 accId, uint256 amount) external onlyAccountOwner(accId) {\\n        if (pendingRequestExists(accId)) {\\n            revert PendingRequestExists();\\n        }\\n\\n        (bool sent, uint256 balance) = sAccIdToAccount[accId].withdraw(amount);\\n        if (!sent) {\\n            revert FailedToWithdraw(accId);\\n        }\\n\\n        emit AccountBalanceDecreased(accId, balance + amount, balance);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function withdrawTemporary(uint64 accId, address payable to) external {\\n        if (pendingRequestExistsTemporary(accId)) {\\n            revert PendingRequestExists();\\n        }\\n\\n        TemporaryAccount memory tmpAcc = sAccIdToTmpAcc[accId];\\n        if (tmpAcc.owner != msg.sender) {\\n            revert MustBeAccountOwner();\\n        }\\n\\n        uint256 balance = tmpAcc.balance;\\n        if (balance == 0) {\\n            revert InsufficientBalance();\\n        }\\n\\n        delete sAccIdToTmpAcc[accId];\\n\\n        (bool sent, ) = to.call{value: balance}(\\\"\\\");\\n        if (!sent) {\\n            revert FailedToWithdrawFromTemporaryAccount(accId);\\n        }\\n\\n        emit AccountBalanceDecreased(accId, balance, 0);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function chargeFee(uint64 accId, uint256 amount) external onlyCoordinator returns (uint256) {\\n        Account account = sAccIdToAccount[accId];\\n        uint256 balance = account.getBalance();\\n\\n        if (balance < amount) {\\n            revert InsufficientBalance();\\n        }\\n\\n        uint256 burnFee = (amount * sBurnFeeRatio) / 100;\\n        uint256 protocolFee = (amount * sProtocolFeeRatio) / 100;\\n        account.chargeFee(burnFee, protocolFee, sProtocolFeeRecipient);\\n\\n        emit AccountBalanceDecreased(accId, balance, balance - burnFee - protocolFee);\\n        emit BurnedFee(accId, burnFee);\\n\\n        return amount - burnFee - protocolFee;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function chargeOperatorFee(\\n        uint64 accId,\\n        uint256 operatorFee,\\n        address operatorFeeRecipient\\n    ) external onlyCoordinator {\\n        Account account = sAccIdToAccount[accId];\\n        uint256 balance = account.getBalance();\\n\\n        if (balance < operatorFee) {\\n            revert InsufficientBalance();\\n        }\\n\\n        account.chargeOperatorFee(operatorFee, operatorFeeRecipient);\\n        emit AccountBalanceDecreased(accId, balance, balance - operatorFee);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function chargeFeeTemporary(\\n        uint64 accId\\n    ) external onlyCoordinator returns (uint256 totalAmount, uint256 operatorAmount) {\\n        uint256 amount = sAccIdToTmpAcc[accId].balance;\\n        delete sAccIdToTmpAcc[accId];\\n\\n        uint256 burnFee = (amount * sBurnFeeRatio) / 100;\\n        uint256 protocolFee = (amount * sProtocolFeeRatio) / 100;\\n        uint256 operatorFee = amount - burnFee - protocolFee;\\n\\n        if (burnFee > 0) {\\n            (bool sent, ) = address(0x000000000000000000000000000000000000dEaD).call{\\n                value: burnFee\\n            }(\\\"\\\");\\n            if (!sent) {\\n                revert BurnFeeFailed();\\n            }\\n        }\\n\\n        if (protocolFee > 0) {\\n            (bool sent, ) = sProtocolFeeRecipient.call{value: protocolFee}(\\\"\\\");\\n            if (!sent) {\\n                revert ProtocolFeeFailed();\\n            }\\n        }\\n\\n        emit AccountBalanceDecreased(accId, amount, 0);\\n        emit BurnedFee(accId, burnFee);\\n\\n        return (amount, operatorFee);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function chargeOperatorFeeTemporary(\\n        uint256 operatorFee,\\n        address operatorFeeRecipient\\n    ) external onlyCoordinator {\\n        (bool sent, ) = operatorFeeRecipient.call{value: operatorFee}(\\\"\\\");\\n        if (!sent) {\\n            revert OperatorFeeFailed();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function increaseNonce(\\n        uint64 accId,\\n        address consumer\\n    ) external onlyCoordinator returns (uint64) {\\n        Account account = sAccIdToAccount[accId];\\n        if (address(account) != address(0)) {\\n            // [regular] account keeps track of nonce per each\\n            // consumer. Every consumer request should increase nonce\\n            // by one.\\n            return account.increaseNonce(consumer);\\n        } else {\\n            // [temporary] account can create only a single request\\n            // per its lifetime, therefore we do not keep track of\\n            // nonce and always return 1.\\n            return TEMPORARY_ACCOUNT_NONCE;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function addCoordinator(address coordinator) public onlyOwner {\\n        if (sIsCoordinator[coordinator]) {\\n            revert CoordinatorExists();\\n        }\\n\\n        sCoordinators.push(ICoordinatorBase(coordinator));\\n        sIsCoordinator[coordinator] = true;\\n\\n        emit CoordinatorAdded(coordinator);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function removeCoordinator(address coordinator) public onlyOwner {\\n        if (!sIsCoordinator[coordinator]) {\\n            revert InvalidCoordinator();\\n        }\\n\\n        uint256 coordinatorsLength = sCoordinators.length;\\n        for (uint256 i = 0; i < coordinatorsLength; ++i) {\\n            if (sCoordinators[i] == ICoordinatorBase(coordinator)) {\\n                ICoordinatorBase last = sCoordinators[coordinatorsLength - 1];\\n                sCoordinators[i] = last;\\n                sCoordinators.pop();\\n                break;\\n            }\\n        }\\n\\n        delete sIsCoordinator[coordinator];\\n        emit CoordinatorRemoved(coordinator);\\n    }\\n\\n    /**\\n     * @notice The type and version of this contract\\n     * @return Type and version string\\n     */\\n    function typeAndVersion() external pure virtual override returns (string memory) {\\n        return \\\"Prepayment v0.1\\\";\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function pendingRequestExists(uint64 accId) public view returns (bool) {\\n        Account account = sAccIdToAccount[accId];\\n        address[] memory consumers = account.getConsumers();\\n        uint256 consumersLength = consumers.length;\\n        uint256 coordinatorsLength = sCoordinators.length;\\n\\n        for (uint256 i = 0; i < consumersLength; i++) {\\n            address consumer = consumers[i];\\n            uint64 nonce = account.getNonce(consumer);\\n            for (uint256 j = 0; j < coordinatorsLength; j++) {\\n                if (sCoordinators[j].pendingRequestExists(consumer, accId, nonce)) {\\n                    return true;\\n                }\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrepayment\\n     */\\n    function pendingRequestExistsTemporary(uint64 accId) public view returns (bool) {\\n        address consumer = sAccIdToTmpAcc[accId].owner;\\n        uint256 coordinatorsLength = sCoordinators.length;\\n        for (uint256 j = 0; j < coordinatorsLength; j++) {\\n            if (sCoordinators[j].pendingRequestExists(consumer, accId, TEMPORARY_ACCOUNT_NONCE)) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x26b7f17bed9832ca15de9ad7b289454cc14ea24b64899f568c495d4bf50a15b0\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IAccount {\\n    /// READ-ONLY FUNCTIONS /////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Get an account information.\\n     * @return balance - KLAY balance of the account in juels.\\n     * @return reqCount - number of requests for this account, determines fee tier.\\n     * @return owner - owner of the account.\\n     * @return consumers - list of consumer address which are able to use this account.\\n     */\\n    function getAccount()\\n        external\\n        view\\n        returns (uint256 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n    /**\\n     * @notice Return an account ID that is associated with this account.\\n     * @return account ID\\n     */\\n    function getAccountId() external returns (uint64);\\n\\n    /**\\n     * @notice Return an amount of KLAY held in the Account contract.\\n     * @return balance of account\\n     */\\n    function getBalance() external returns (uint256);\\n\\n    /**\\n     * @notice Return the number of requests created through the\\n     * @notice account.\\n     * @return number of requests\\n     */\\n    function getReqCount() external returns (uint64);\\n\\n    /**\\n     * @notice Return the current owner of account.\\n     * @return owner address\\n     */\\n    function getOwner() external returns (address);\\n\\n    /**\\n     * @notice Return the consumers assigned to the account.\\n     * @return list of consumer addresses\\n     */\\n    function getConsumers() external returns (address[] memory);\\n\\n    /**\\n     * @notice Return the requested owner of account.\\n     * @return requested owner address\\n     */\\n    function getRequestedOwner() external returns (address);\\n\\n    /**\\n     * @notice Return the current nonce of given consumer.\\n     * @return consumer nonce\\n     */\\n    function getNonce(address consumer) external view returns (uint64);\\n\\n    /**\\n     * @notice Return the address of payment solution associated with account.\\n     * @return address of payment solution\\n     */\\n    function getPaymentSolution() external view returns (address);\\n\\n    /// STATE-ALTERING FUNCTIONS ////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Increase nonce for given consumer.\\n     * @param consumer - Address of consumer\\n     */\\n    function increaseNonce(address consumer) external returns (uint64);\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @param newOwner - proposed new owner of the account\\n     */\\n    function requestAccountOwnerTransfer(address newOwner) external;\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @dev will revert if original owner of accId has\\n     * not requested that msg.sender become the new owner.\\n     * @param newOwner - proposed new owner of the account\\n     */\\n    function acceptAccountOwnerTransfer(address newOwner) external;\\n\\n    /**\\n     * @notice Add a consumer to an account.\\n     * @param consumer - New consumer which can use the account\\n     */\\n    function addConsumer(address consumer) external;\\n\\n    /**\\n     * @notice Remove a consumer from a account.\\n     * @param consumer - Consumer to remove from the account\\n     */\\n    function removeConsumer(address consumer) external;\\n\\n    /**\\n     * @notice Withdraw KLAY from account.\\n     * @dev Only account owner can withdraw KLAY.\\n     * @param amount - KLAY amount to be withdrawn\\n     */\\n    function withdraw(uint256 amount) external returns (bool, uint256);\\n\\n    /**\\n     * @notice Burn part of fee and charge protocol fee for a service\\n     * connected to account.\\n     * @param burnFee - $KLAY amount to be burnt\\n     * @param protocolFee - $KLAY amount to be sent to protocol fee recipient\\n     * @param protocolFeeRecipient - address of Orakl Network\\n     */\\n    function chargeFee(uint256 burnFee, uint256 protocolFee, address protocolFeeRecipient) external;\\n\\n    /**\\n     * @notice Charge operator fee for a service connected to account.\\n     * @param operatorFee - $KLAY amount to be send to oracle operator\\n     * fee recipient\\n     * @param operatorFeeRecipient - address of Orakl Network\\n     */\\n    function chargeOperatorFee(uint256 operatorFee, address operatorFeeRecipient) external;\\n\\n    /**\\n     * @notice Destroy the smart contract and send the remaining $KLAY\\n     * @notice to `to` address.\\n     * @param to - Where to send the remaining KLAY to\\n     */\\n    function cancelAccount(address to) external;\\n}\\n\",\"keccak256\":\"0x01d0531a20a953913617c1f69d4a1a6d450e8cc48cc9cbd69d7a01a2de1d73e0\",\"license\":\"MIT\"},\"src/v0.1/interfaces/ICoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface ICoordinatorBase {\\n    // Fee configuration that separates fees based on the number of\\n    // requests created per account. This applies only to [regular]\\n    // account.\\n    struct FeeConfig {\\n        // Flat fee charged per fulfillment in millionths of KLAY\\n        // So fee range is [0, 2^32/10^6].\\n        uint32 fulfillmentFlatFeeKlayPPMTier1;\\n        uint32 fulfillmentFlatFeeKlayPPMTier2;\\n        uint32 fulfillmentFlatFeeKlayPPMTier3;\\n        uint32 fulfillmentFlatFeeKlayPPMTier4;\\n        uint32 fulfillmentFlatFeeKlayPPMTier5;\\n        uint24 reqsForTier2;\\n        uint24 reqsForTier3;\\n        uint24 reqsForTier4;\\n        uint24 reqsForTier5;\\n    }\\n\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting\\n     * after completing the gas measurement\\n     * @param feeConfig fee tier configuration\\n     */\\n    function setConfig(\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        FeeConfig memory feeConfig\\n    ) external;\\n\\n    /**\\n     * @notice Check to see if there exists a request commitment\\n     * consumers for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request\\n     * for the account, false otherwise.\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Get request commitment.\\n     * @param requestId id of request\\n     * @return commmitment value that can be used to determine whether\\n     * a request is fulfilled or not. If `requestId` is valid and\\n     * commitment equals to bytes32(0), the request was fulfilled.\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Canceling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n\\n    /**\\n     * @notice Access address for prepayment associated with\\n     * @notice coordinator.\\n     * @return prepayment address\\n     */\\n    function getPrepaymentAddress() external returns (address);\\n}\\n\",\"keccak256\":\"0xfe05fee3374629efcc792974be00bf20bcc87e3b5dd6ed9791461bcc5e6caf43\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IPrepayment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IPrepayment {\\n    /// READ-ONLY FUNCTIONS /////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Returns `true` when a `consumer` is registered under\\n     * @notice `accId`, otherwise returns `false`.\\n     * @dev This function can be used for checking validity of both\\n     * @dev [regular] and [temporary] account.\\n     * @param accId - ID of the account\\n     */\\n    function isValidAccount(uint64 accId, address consumer) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the balance of given account.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account. If invalid `accId` (ID not assigned to any\\n     * @dev account) is passed, zero balance will be always returned.\\n     * @param accId - ID of the account\\n     * @return balance of account\\n     */\\n    function getBalance(uint64 accId) external view returns (uint256);\\n\\n    /**\\n     * @notice Return the number of requests created through the\\n     * @notice account.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account.\\n     * @param accId - ID of the account\\n     * @return number of requests\\n     */\\n    function getReqCount(uint64 accId) external view returns (uint64);\\n\\n    /**\\n     * @notice Get an account information.\\n     * @dev This function can be used for both [regular] and\\n     * @dev [temporary] account.\\n     * @param accId - ID of the account\\n     * @return balance - $KLAY balance of the account in juels.\\n     * @return reqCount - number of requests for this account, determines fee tier.\\n     * @return owner - owner of the account.\\n     * @return consumers - list of consumer address which are able to use this account.\\n     */\\n    function getAccount(\\n        uint64 accId\\n    )\\n        external\\n        view\\n        returns (uint256 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n    /**\\n     * @notice Get address of account owner.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account.\\n     * @param accId - ID of the account\\n     */\\n    function getAccountOwner(uint64 accId) external returns (address);\\n\\n    /**\\n     * @notice Get nonce for specified `consumer` in account denoted by `accId`.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account. [temporary] account does not have a notion of a nonce.\\n     * @dev When an invalid `accId` is passed, transaction is\\n     * @dev reverted. When an invalid `consumer` is passed, 0 zero\\n     * @dev nonce is returned that represents an unregistered consumer.\\n     * @param accId - ID of the account\\n     * @param consumer - consumer address\\n     */\\n    function getNonce(uint64 accId, address consumer) external view returns (uint64);\\n\\n    /*\\n     * @notice Check to see if there exists a request commitment\\n     * @notice for all consumers and coordinators for a given\\n     * @notice [permanent] account.\\n     * @dev Use to reject account cancelation while outstanding\\n     * @dev request are present.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request for the account, false\\n     * otherwise.\\n     */\\n    function pendingRequestExists(uint64 accId) external view returns (bool);\\n\\n    /*\\n     * @notice Check to see if there exists a request commitment\\n     * @notice for an account owner of [temporary] account across\\n     * @notice all coordinators.\\n     * @dev Use to reject balance withdrawal while outstanding\\n     * @dev request are present.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request for the account, false\\n     * otherwise.\\n     */\\n    function pendingRequestExistsTemporary(uint64 accId) external view returns (bool);\\n\\n    /// STATE-ALTERING FUNCTIONS ////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Create a [regular] account.\\n     * @dev This function deploys a new `Account` contract (defined at\\n     * @dev Account.sol) and connect it with the `Prepayment` contract.\\n     * @dev You can add or remove the consumer dynamically with\\n     * @dev `addConsumer` or `removeConsumer` functions,\\n     * @dev respectively. To fund the account, use deposit function.\\n     * @return accId - A unique account id\\n     */\\n    function createAccount() external returns (uint64);\\n\\n    /**\\n     * @notice Create a temporary account to be used with a single\\n     * @notice service request.\\n     * @param - account owner\\n     * @return accId - A unique account id\\n     */\\n    function createTemporaryAccount(address owner) external returns (uint64);\\n\\n    /**\\n     * @notice Request account owner transfer.\\n     * @dev Only [regular] account owner can be transferred.\\n     * @param accId - ID of the account\\n     * @param newOwner - proposed new owner of the account\\n     */\\n    function requestAccountOwnerTransfer(uint64 accId, address newOwner) external;\\n\\n    /**\\n     * @notice Accept account owner transfer.\\n     * @dev The function will revert inside of the\\n     * @dev `Account.acceptAccountOwnerTransfer` if original owner of\\n     * @dev `accId` has not requested the `msg.sender` to become the\\n     * @dev new owner.\\n     * @param accId - ID of the account\\n     */\\n    function acceptAccountOwnerTransfer(uint64 accId) external;\\n\\n    /**\\n     * @notice Cancel account\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account. If there is any pending request, the account\\n     * @dev cannot be canceled.\\n     * @param accId - ID of the account\\n     * @param to - Where to send the remaining $KLAY to\\n     */\\n    function cancelAccount(uint64 accId, address to) external;\\n\\n    /**\\n     * @notice Add a consumer to an account.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account. If called with [temporary] account, the\\n     * @dev transaction will be reverted.\\n     * @param accId - ID of the account\\n     * @param consumer - New consumer which can use the account\\n     */\\n    function addConsumer(uint64 accId, address consumer) external;\\n\\n    /**\\n     * @notice Remove a consumer from a account.\\n     * @dev This function is meant to be used only for [regular]\\n     * @dev account. If called with [temporary] account, the\\n     * @dev transaction will be reverted.\\n     * @param accId - ID of the account\\n     * @param consumer - Consumer to remove from the account\\n     */\\n    function removeConsumer(uint64 accId, address consumer) external;\\n\\n    /**\\n     * @notice Deposit $KLAY to [regular] account.\\n     * @notice Anybody can deposit $KLAY, there are no restrictions.\\n     * @param accId - ID of the account\\n     */\\n    function deposit(uint64 accId) external payable;\\n\\n    /**\\n     * @notice Deposit $KLAY to [temporary] account.\\n     * @notice Anybody can deposit $KLAY, there are no restrictions.\\n     * @param accId - ID of the account\\n     */\\n    function depositTemporary(uint64 accId) external payable;\\n\\n    /**\\n     * @notice Withdraw $KLAY from [regular] account.\\n     * @dev Account owner can withdraw $KLAY only when there are no\\n     * @dev pending requests on any of associated consumers. If one tries\\n     * @dev to use it to withdraw $KLAY from [temporary] account,\\n     * @dev transaction will revert. Transaction reverts also on failure to\\n     * @dev withdraw tokens from account.\\n     * @param accId - ID of the account\\n     * @param amount - $KLAY amount to be withdrawn\\n     */\\n    function withdraw(uint64 accId, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw $KLAY from [temporary] account.\\n     * @dev Account owner can withdraw $KLAY only when there are no\\n     * @dev pending requests. Temporary account will be deleted upon\\n     * @dev successful withdrawal. Transaction reverts also on failure to\\n     * @dev withdraw tokens from account.\\n     * @param accId - ID of the account\\n     * @param to - recipient address\\n     */\\n    function withdrawTemporary(uint64 accId, address payable to) external;\\n\\n    /**\\n     * @notice Burn part of fee and charge protocol fee for a service\\n     * connected to [regular] account.\\n     * @param accId - ID of the account\\n     * @param amount - $KLAY amount to be charged\\n     */\\n    function chargeFee(uint64 accId, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Charge operator fee for a service connected to\\n     * [temporary] account.\\n     * @param accId - ID of the account\\n     * @param operatorFee - amount of fee to be paid to operator fee\\n     * recipient\\n     * @param operatorFeeRecipient - address of operator fee recipient\\n     */\\n    function chargeOperatorFee(\\n        uint64 accId,\\n        uint256 operatorFee,\\n        address operatorFeeRecipient\\n    ) external;\\n\\n    /**\\n     * @notice Burn part of fee and charge protocol fee for a service\\n     * connected to [temporary] account.\\n     * @dev Temporary account is deleted because we do not expect to use it again.\\n     * @param accId - ID of the account\\n     */\\n    function chargeFeeTemporary(\\n        uint64 accId\\n    ) external returns (uint256 totalAmount, uint256 operatorAmount);\\n\\n    /**\\n     * @notice Charge operator fee for a service connected to\\n     * [temporary] account.\\n     * @param operatorFee - amount of fee to be paid to operator fee\\n     * recipient\\n     * @param operatorFeeRecipient - address of operator fee recipient\\n     */\\n    function chargeOperatorFeeTemporary(uint256 operatorFee, address operatorFeeRecipient) external;\\n\\n    /**\\n     * @notice Increase nonce for consumer registered under accId.\\n     * @param accId - ID of the account\\n     * @param consumer - Address of consumer registered under accId\\n     */\\n    function increaseNonce(uint64 accId, address consumer) external returns (uint64);\\n\\n    /*\\n     * @notice Add coordinator that will be able to charge account for\\n     * @notice the requested service.\\n     * @param coordinator - address of coordinator\\n     */\\n    function addCoordinator(address coordinator) external;\\n\\n    /*\\n     * @notice Disable the coordinator from being able to charge\\n     * @notice accounts for its service.\\n     * @param coordinator - address of coordinator\\n     */\\n    function removeCoordinator(address coordinator) external;\\n\\n    function getBurnFeeRatio() external view returns (uint8);\\n\\n    function getProtocolFeeRatio() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x58117ebad569cfd13f567fba0ae000fa8718fc418eeb9122344424e3eca405b0\",\"license\":\"MIT\"},\"src/v0.1/interfaces/ITypeAndVersion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol\\n\\nabstract contract ITypeAndVersion {\\n    function typeAndVersion() external pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0xb4298d53c43e0afe8c55f2a77724cd1ea29de928581a436a13fc65043891428d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Bisonai",
    "kind": "dev",
    "methods": {
      "acceptAccountOwnerTransfer(uint64)": {
        "details": "The function will revert inside of the`Account.acceptAccountOwnerTransfer` if original owner of`accId` has not requested the `msg.sender` to become thenew owner.",
        "params": {
          "accId": "- ID of the account"
        }
      },
      "addConsumer(uint64,address)": {
        "details": "This function is meant to be used only for [regular]account. If called with [temporary] account, thetransaction will be reverted.",
        "params": {
          "accId": "- ID of the account",
          "consumer": "- New consumer which can use the account"
        }
      },
      "cancelAccount(uint64,address)": {
        "details": "This function is meant to be used only for [regular]account. If there is any pending request, the accountcannot be canceled.",
        "params": {
          "accId": "- ID of the account",
          "to": "- Where to send the remaining $KLAY to"
        }
      },
      "chargeFee(uint64,uint256)": {
        "params": {
          "accId": "- ID of the account",
          "amount": "- $KLAY amount to be charged"
        }
      },
      "chargeFeeTemporary(uint64)": {
        "details": "Temporary account is deleted because we do not expect to use it again.",
        "params": {
          "accId": "- ID of the account"
        }
      },
      "chargeOperatorFee(uint64,uint256,address)": {
        "params": {
          "accId": "- ID of the account",
          "operatorFee": "- amount of fee to be paid to operator fee recipient",
          "operatorFeeRecipient": "- address of operator fee recipient"
        }
      },
      "chargeOperatorFeeTemporary(uint256,address)": {
        "params": {
          "operatorFee": "- amount of fee to be paid to operator fee recipient",
          "operatorFeeRecipient": "- address of operator fee recipient"
        }
      },
      "createAccount()": {
        "details": "This function deploys a new `Account` contract (defined atAccount.sol) and connect it with the `Prepayment` contract.You can add or remove the consumer dynamically with`addConsumer` or `removeConsumer` functions,respectively. To fund the account, use deposit function.",
        "returns": {
          "_0": "accId - A unique account id"
        }
      },
      "createTemporaryAccount(address)": {
        "params": {
          "": "- account owner"
        },
        "returns": {
          "_0": "accId - A unique account id"
        }
      },
      "deposit(uint64)": {
        "params": {
          "accId": "- ID of the account"
        }
      },
      "depositTemporary(uint64)": {
        "params": {
          "accId": "- ID of the account"
        }
      },
      "getAccount(uint64)": {
        "details": "This function can be used for both [regular] and[temporary] account.",
        "params": {
          "accId": "- ID of the account"
        },
        "returns": {
          "balance": "- $KLAY balance of the account in juels.",
          "consumers": "- list of consumer address which are able to use this account.",
          "owner": "- owner of the account.",
          "reqCount": "- number of requests for this account, determines fee tier."
        }
      },
      "getAccountOwner(uint64)": {
        "details": "This function is meant to be used only for [regular]account.",
        "params": {
          "accId": "- ID of the account"
        }
      },
      "getBalance(uint64)": {
        "details": "This function is meant to be used only for [regular]account. If invalid `accId` (ID not assigned to anyaccount) is passed, zero balance will be always returned.",
        "params": {
          "accId": "- ID of the account"
        },
        "returns": {
          "balance": "of account"
        }
      },
      "getNonce(uint64,address)": {
        "details": "This function is meant to be used only for [regular]account. [temporary] account does not have a notion of a nonce.When an invalid `accId` is passed, transaction isreverted. When an invalid `consumer` is passed, 0 zerononce is returned that represents an unregistered consumer.",
        "params": {
          "accId": "- ID of the account",
          "consumer": "- consumer address"
        }
      },
      "getReqCount(uint64)": {
        "details": "This function is meant to be used only for [regular]account.",
        "params": {
          "accId": "- ID of the account"
        },
        "returns": {
          "_0": "number of requests"
        }
      },
      "increaseNonce(uint64,address)": {
        "params": {
          "accId": "- ID of the account",
          "consumer": "- Address of consumer registered under accId"
        }
      },
      "isValidAccount(uint64,address)": {
        "details": "This function can be used for checking validity of both[regular] and [temporary] account.",
        "params": {
          "accId": "- ID of the account"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeConsumer(uint64,address)": {
        "details": "This function is meant to be used only for [regular]account. If called with [temporary] account, thetransaction will be reverted.",
        "params": {
          "accId": "- ID of the account",
          "consumer": "- Consumer to remove from the account"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestAccountOwnerTransfer(uint64,address)": {
        "details": "Only [regular] account owner can be transferred.",
        "params": {
          "accId": "- ID of the account",
          "newOwner": "- proposed new owner of the account"
        }
      },
      "setBurnFeeRatio(uint8)": {
        "params": {
          "ratio": "in a range 0 - 100 % of a fee to be burnt"
        }
      },
      "setProtocolFeeRatio(uint8)": {
        "params": {
          "ratio": "in a range 0 - 100 % of a fee to be burnt"
        }
      },
      "setProtocolFeeRecipient(address)": {
        "params": {
          "protocolFeeRecipient": "- address of protocol fee recipient"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "typeAndVersion()": {
        "returns": {
          "_0": "Type and version string"
        }
      },
      "withdraw(uint64,uint256)": {
        "details": "Account owner can withdraw $KLAY only when there are nopending requests on any of associated consumers. If one triesto use it to withdraw $KLAY from [temporary] account,transaction will revert. Transaction reverts also on failure towithdraw tokens from account.",
        "params": {
          "accId": "- ID of the account",
          "amount": "- $KLAY amount to be withdrawn"
        }
      },
      "withdrawTemporary(uint64,address)": {
        "details": "Account owner can withdraw $KLAY only when there are nopending requests. Temporary account will be deleted uponsuccessful withdrawal. Transaction reverts also on failure towithdraw tokens from account.",
        "params": {
          "accId": "- ID of the account",
          "to": "- recipient address"
        }
      }
    },
    "title": "Orakl Network Prepayment",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptAccountOwnerTransfer(uint64)": {
        "notice": "Accept account owner transfer."
      },
      "addConsumer(uint64,address)": {
        "notice": "Add a consumer to an account."
      },
      "cancelAccount(uint64,address)": {
        "notice": "Cancel account"
      },
      "chargeFee(uint64,uint256)": {
        "notice": "Burn part of fee and charge protocol fee for a service connected to [regular] account."
      },
      "chargeFeeTemporary(uint64)": {
        "notice": "Burn part of fee and charge protocol fee for a service connected to [temporary] account."
      },
      "chargeOperatorFee(uint64,uint256,address)": {
        "notice": "Charge operator fee for a service connected to [temporary] account."
      },
      "chargeOperatorFeeTemporary(uint256,address)": {
        "notice": "Charge operator fee for a service connected to [temporary] account."
      },
      "createAccount()": {
        "notice": "Create a [regular] account."
      },
      "createTemporaryAccount(address)": {
        "notice": "Create a temporary account to be used with a singleservice request."
      },
      "deposit(uint64)": {
        "notice": "Deposit $KLAY to [regular] account.Anybody can deposit $KLAY, there are no restrictions."
      },
      "depositTemporary(uint64)": {
        "notice": "Deposit $KLAY to [temporary] account.Anybody can deposit $KLAY, there are no restrictions."
      },
      "getAccount(uint64)": {
        "notice": "Get an account information."
      },
      "getAccountOwner(uint64)": {
        "notice": "Get address of account owner."
      },
      "getBalance(uint64)": {
        "notice": "Returns the balance of given account."
      },
      "getBurnFeeRatio()": {
        "notice": "Return the current burn ratio that represents thepercentage of $KLAY fee that is burnt during fulfillmentof every request."
      },
      "getCoordinators()": {
        "notice": "Get addresses of all registered coordinators in Prepayment."
      },
      "getNonce(uint64,address)": {
        "notice": "Get nonce for specified `consumer` in account denoted by `accId`."
      },
      "getProtocolFeeRatio()": {
        "notice": "Return the current protocol fee ratio that representsthe percentage of $KLAY fee that is charged for everyfinalizes fulfillment."
      },
      "getProtocolFeeRecipient()": {
        "notice": "Get address of protocol fee recipient."
      },
      "getReqCount(uint64)": {
        "notice": "Return the number of requests created through theaccount."
      },
      "increaseNonce(uint64,address)": {
        "notice": "Increase nonce for consumer registered under accId."
      },
      "isValidAccount(uint64,address)": {
        "notice": "Returns `true` when a `consumer` is registered under`accId`, otherwise returns `false`."
      },
      "removeConsumer(uint64,address)": {
        "notice": "Remove a consumer from a account."
      },
      "requestAccountOwnerTransfer(uint64,address)": {
        "notice": "Request account owner transfer."
      },
      "setBurnFeeRatio(uint8)": {
        "notice": "The function allows to update a \"burn ratio\" that represents apartial amount of payment for the Orakl Network service thatwill be burnt."
      },
      "setProtocolFeeRatio(uint8)": {
        "notice": "The function allows to update a protocol fee."
      },
      "setProtocolFeeRecipient(address)": {
        "notice": "Update address of protocol fee recipient that willreceive protocol fees."
      },
      "typeAndVersion()": {
        "notice": "The type and version of this contract"
      },
      "withdraw(uint64,uint256)": {
        "notice": "Withdraw $KLAY from [regular] account."
      },
      "withdrawTemporary(uint64,address)": {
        "notice": "Withdraw $KLAY from [temporary] account."
      }
    },
    "notice": "Prepayment is a type of prepaid payment solution whichallows to controls two types of accounts: regular andtemporary.@notice [regular] account is a separate smart contract(Account.sol) that is meant to be used long-term. User candeposit $KLAY to account and use it to pay for Orakl Networkservices. More details about [regular] account aredescribed at `Account` smart contract.@notice [temporary] account is created for one-time-use of OraklNetwork services. Consumer can send $KLAY together withrequest to Orakl Network to pay for the service. Alloperations related to [temporary] account are implementedin the Prepayment contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 726,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "sBurnFeeRatio",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 729,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "sProtocolFeeRatio",
        "offset": 21,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 731,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "sProtocolFeeRecipient",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 735,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "sCoordinators",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_contract(ICoordinatorBase)2459)dyn_storage"
      },
      {
        "astId": 739,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "sIsCoordinator",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 741,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "sCurrentAccId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 746,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "sAccIdToAccount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint64,t_contract(Account)699)"
      },
      {
        "astId": 750,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "sIsTemporaryAccount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 760,
        "contract": "src/v0.1/Prepayment.sol:Prepayment",
        "label": "sAccIdToTmpAcc",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint64,t_struct(TemporaryAccount)755_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(ICoordinatorBase)2459)dyn_storage": {
        "base": "t_contract(ICoordinatorBase)2459",
        "encoding": "dynamic_array",
        "label": "contract ICoordinatorBase[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Account)699": {
        "encoding": "inplace",
        "label": "contract Account",
        "numberOfBytes": "20"
      },
      "t_contract(ICoordinatorBase)2459": {
        "encoding": "inplace",
        "label": "contract ICoordinatorBase",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_contract(Account)699)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract Account)",
        "numberOfBytes": "32",
        "value": "t_contract(Account)699"
      },
      "t_mapping(t_uint64,t_struct(TemporaryAccount)755_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct Prepayment.TemporaryAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(TemporaryAccount)755_storage"
      },
      "t_struct(TemporaryAccount)755_storage": {
        "encoding": "inplace",
        "label": "struct Prepayment.TemporaryAccount",
        "members": [
          {
            "astId": 752,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 754,
            "contract": "src/v0.1/Prepayment.sol:Prepayment",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
