{
  "address": "0xE01d4D702B2326be0ACbAB90faA540e2DBCe3705",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "InvalidAggregator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        }
      ],
      "name": "InvalidSubmitter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrant",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAggregator",
          "type": "address"
        }
      ],
      "name": "AggregatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAggregator",
          "type": "address"
        }
      ],
      "name": "AggregatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "response",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledBool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledBytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "response",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledBytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "response",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledInt256",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "response",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledString",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "response",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DataRequestFulfilledUint128",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "jobId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callbackAddr",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "callbackFunc",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "buf",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "capacity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Buffer.buffer",
              "name": "buf",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Orakl.Request",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "RandomWordsFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preSeed",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RandomWordsRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "submission",
          "type": "int256"
        }
      ],
      "name": "Submitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSubmitter",
          "type": "address"
        }
      ],
      "name": "SubmitterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSubmitter",
          "type": "address"
        }
      ],
      "name": "SubmitterRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAggregator",
          "type": "address"
        }
      ],
      "name": "addAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSubmitter",
          "type": "address"
        }
      ],
      "name": "addSubmitter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "response",
          "type": "bool"
        }
      ],
      "name": "fulfillDataRequestBool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "fulfillDataRequestBytes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "response",
          "type": "bytes32"
        }
      ],
      "name": "fulfillDataRequestBytes32",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "response",
          "type": "int256"
        }
      ],
      "name": "fulfillDataRequestInt256",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "response",
          "type": "string"
        }
      ],
      "name": "fulfillDataRequestString",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "response",
          "type": "uint128"
        }
      ],
      "name": "fulfillDataRequestUint128",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "fulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "removeAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_submitter",
          "type": "address"
        }
      ],
      "name": "removeSubmitter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callbackAddr",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "callbackFunc",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "buf",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "capacity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Buffer.buffer",
              "name": "buf",
              "type": "tuple"
            }
          ],
          "internalType": "struct Orakl.Request",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sAggregatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sSubmitterCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_submission",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "submit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcbcd9c2ef2f90da9ed4cb1a9b6589c10f8faf031f13398da2d197ae93ef9674f",
  "receipt": {
    "to": null,
    "from": "0xa195bE68Bd37EBFfB056279Dc3d236fAa6F23670",
    "contractAddress": "0xE01d4D702B2326be0ACbAB90faA540e2DBCe3705",
    "transactionIndex": 0,
    "gasUsed": "2304452",
    "logsBloom": "0x000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000010000000010000000000000000000000000000a0000000000000000000800000000000000000000000000040000400000000400000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x258e22cbc2164b3b0e1af0d8af34ee96cde25a17fadbe3fcd001076825e6daaf",
    "transactionHash": "0xcbcd9c2ef2f90da9ed4cb1a9b6589c10f8faf031f13398da2d197ae93ef9674f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 254464,
        "transactionHash": "0xcbcd9c2ef2f90da9ed4cb1a9b6589c10f8faf031f13398da2d197ae93ef9674f",
        "address": "0xE01d4D702B2326be0ACbAB90faA540e2DBCe3705",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a195be68bd37ebffb056279dc3d236faa6f23670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x258e22cbc2164b3b0e1af0d8af34ee96cde25a17fadbe3fcd001076825e6daaf"
      }
    ],
    "blockNumber": 254464,
    "cumulativeGasUsed": "2304452",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b94241e4d3eb269d71a378a8da8748f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"InvalidAggregator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"InvalidSubmitter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAggregator\",\"type\":\"address\"}],\"name\":\"AggregatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAggregator\",\"type\":\"address\"}],\"name\":\"AggregatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"response\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"response\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"response\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DataRequestFulfilledUint128\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct Buffer.buffer\",\"name\":\"buf\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Orakl.Request\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"submission\",\"type\":\"int256\"}],\"name\":\"Submitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSubmitter\",\"type\":\"address\"}],\"name\":\"SubmitterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSubmitter\",\"type\":\"address\"}],\"name\":\"SubmitterRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAggregator\",\"type\":\"address\"}],\"name\":\"addAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSubmitter\",\"type\":\"address\"}],\"name\":\"addSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"name\":\"fulfillDataRequestBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"fulfillDataRequestBytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"response\",\"type\":\"bytes32\"}],\"name\":\"fulfillDataRequestBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"response\",\"type\":\"int256\"}],\"name\":\"fulfillDataRequestInt256\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"}],\"name\":\"fulfillDataRequestString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"response\",\"type\":\"uint128\"}],\"name\":\"fulfillDataRequestUint128\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"removeAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_submitter\",\"type\":\"address\"}],\"name\":\"removeSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct Buffer.buffer\",\"name\":\"buf\",\"type\":\"tuple\"}],\"internalType\":\"struct Orakl.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sAggregatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sSubmitterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_submission\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/L2endpoint.sol\":\"L2Endpoint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/v0.1/L2EndpointBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nabstract contract L2EndpointBase {\\n    uint256 private constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n    bool private sReentrancyLock;\\n    struct RequestInfo {\\n        address owner;\\n        uint32 callbackGasLimit;\\n    }\\n\\n    mapping(address => bool) sSubmitters;\\n    uint256 public sSubmitterCount;\\n    mapping(uint256 => RequestInfo) internal sRequestDetail;\\n\\n    error Reentrant();\\n    error InvalidSubmitter(address submitter);\\n\\n    constructor() {}\\n\\n    modifier nonReentrant() {\\n        if (sReentrancyLock) {\\n            revert Reentrant();\\n        }\\n        _;\\n    }\\n\\n    function setReentrancy(bool value) internal {\\n        sReentrancyLock = value;\\n    }\\n\\n    /**\\n     * @dev calls target address with exactly gasAmount gas and data as calldata\\n     * or reverts if at least gasAmount gas is not available.\\n     */\\n    function callWithExactGas(\\n        uint256 gasAmount,\\n        address target,\\n        bytes memory data\\n    ) internal returns (bool success) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let g := gas()\\n            // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\\n            // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\\n            // We want to ensure that we revert if gasAmount >  63//64*gas available\\n            // as we do not want to provide them with less, however that check itself costs\\n            // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\\n            // to revert if gasAmount >  63//64*gas available.\\n            if lt(g, GAS_FOR_CALL_EXACT_CHECK) {\\n                revert(0, 0)\\n            }\\n            g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\\n            // if g - g//64 <= gasAmount, revert\\n            // (we subtract g//64 because of EIP-150)\\n            if iszero(gt(sub(g, div(g, 64)), gasAmount)) {\\n                revert(0, 0)\\n            }\\n            // solidity calls check that a contract actually exists at the destination, so we do the same\\n            if iszero(extcodesize(target)) {\\n                revert(0, 0)\\n            }\\n            // call and return whether we succeeded. ignore return data\\n            // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n            success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\\n        }\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x4360bc09c4006f2432ae72bd4910063414e1bea550977cd0406768f707db1e01\",\"license\":\"MIT\"},\"src/v0.1/L2EndpointRequestResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"./L2EndpointBase.sol\\\";\\nimport \\\"./libraries/Orakl.sol\\\";\\nimport \\\"./RequestResponseConsumerFulfill.sol\\\";\\n\\nabstract contract L2EndpointRequestResponse is L2EndpointBase {\\n    using Orakl for Orakl.Request;\\n    uint64 private sNonce;\\n\\n    event DataRequested(\\n        uint256 indexed requestId,\\n        bytes32 jobId,\\n        uint64 indexed accId,\\n        uint32 callbackGasLimit,\\n        address indexed sender,\\n        uint8 numSubmission,\\n        Orakl.Request req\\n    );\\n\\n    event DataRequestFulfilledUint128(uint256 indexed requestId, uint256 response, bool success);\\n    event DataRequestFulfilledInt256(uint256 indexed requestId, int256 response, bool success);\\n    event DataRequestFulfilledBool(uint256 indexed requestId, bool response, bool success);\\n    event DataRequestFulfilledString(uint256 indexed requestId, string response, bool success);\\n    event DataRequestFulfilledBytes32(uint256 indexed requestId, bytes32 response, bool success);\\n    event DataRequestFulfilledBytes(uint256 indexed requestId, bytes response, bool success);\\n\\n    function computeRequestId(\\n        address sender,\\n        uint64 accId,\\n        uint64 nonce\\n    ) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(sender, accId, nonce)));\\n    }\\n\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint64 accId,\\n        uint8 numSubmission\\n    ) external nonReentrant returns (uint256) {\\n        sNonce++;\\n        uint256 requestId = computeRequestId(msg.sender, accId, sNonce);\\n        sRequestDetail[requestId] = RequestInfo({\\n            owner: msg.sender,\\n            callbackGasLimit: callbackGasLimit\\n        });\\n        emit DataRequested(\\n            requestId,\\n            req.id,\\n            accId,\\n            callbackGasLimit,\\n            msg.sender,\\n            numSubmission,\\n            req\\n        );\\n\\n        return requestId;\\n    }\\n\\n    function fulfillDataRequestUint128(uint256 requestId, uint128 response) external nonReentrant {\\n        if (!sSubmitters[msg.sender]) revert InvalidSubmitter(msg.sender);\\n        RequestInfo memory detail = sRequestDetail[requestId];\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillUint128.rawFulfillDataRequest.selector,\\n            requestId,\\n            response\\n        );\\n        setReentrancy(true);\\n        bool success = callWithExactGas(detail.callbackGasLimit, detail.owner, resp);\\n        setReentrancy(false);\\n        emit DataRequestFulfilledUint128(requestId, response, success);\\n    }\\n\\n    function fulfillDataRequestInt256(uint256 requestId, int256 response) external nonReentrant {\\n        if (!sSubmitters[msg.sender]) revert InvalidSubmitter(msg.sender);\\n        RequestInfo memory detail = sRequestDetail[requestId];\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillInt256.rawFulfillDataRequest.selector,\\n            requestId,\\n            response\\n        );\\n        setReentrancy(true);\\n        bool success = callWithExactGas(detail.callbackGasLimit, detail.owner, resp);\\n        setReentrancy(false);\\n        emit DataRequestFulfilledInt256(requestId, response, success);\\n    }\\n\\n    function fulfillDataRequestBool(uint256 requestId, bool response) external nonReentrant {\\n        if (!sSubmitters[msg.sender]) revert InvalidSubmitter(msg.sender);\\n        RequestInfo memory detail = sRequestDetail[requestId];\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillBool.rawFulfillDataRequest.selector,\\n            requestId,\\n            response\\n        );\\n        setReentrancy(true);\\n        bool success = callWithExactGas(detail.callbackGasLimit, detail.owner, resp);\\n        setReentrancy(false);\\n        emit DataRequestFulfilledBool(requestId, response, success);\\n    }\\n\\n    function fulfillDataRequestString(\\n        uint256 requestId,\\n        string memory response\\n    ) external nonReentrant {\\n        if (!sSubmitters[msg.sender]) revert InvalidSubmitter(msg.sender);\\n        RequestInfo memory detail = sRequestDetail[requestId];\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillString.rawFulfillDataRequest.selector,\\n            requestId,\\n            response\\n        );\\n        setReentrancy(true);\\n        bool success = callWithExactGas(detail.callbackGasLimit, detail.owner, resp);\\n        setReentrancy(false);\\n        emit DataRequestFulfilledString(requestId, response, success);\\n    }\\n\\n    function fulfillDataRequestBytes32(uint256 requestId, bytes32 response) external nonReentrant {\\n        if (!sSubmitters[msg.sender]) revert InvalidSubmitter(msg.sender);\\n        RequestInfo memory detail = sRequestDetail[requestId];\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillBytes32.rawFulfillDataRequest.selector,\\n            requestId,\\n            response\\n        );\\n        setReentrancy(true);\\n        bool success = callWithExactGas(detail.callbackGasLimit, detail.owner, resp);\\n        setReentrancy(false);\\n        emit DataRequestFulfilledBytes32(requestId, response, success);\\n    }\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response\\n    ) external nonReentrant {\\n        if (!sSubmitters[msg.sender]) revert InvalidSubmitter(msg.sender);\\n        RequestInfo memory detail = sRequestDetail[requestId];\\n        bytes memory resp = abi.encodeWithSelector(\\n            RequestResponseConsumerFulfillBytes.rawFulfillDataRequest.selector,\\n            requestId,\\n            response\\n        );\\n        setReentrancy(true);\\n        bool success = callWithExactGas(detail.callbackGasLimit, detail.owner, resp);\\n        setReentrancy(false);\\n        emit DataRequestFulfilledBytes(requestId, response, success);\\n    }\\n}\\n\",\"keccak256\":\"0xba6a32f9ba8f08746eb3b0f0d22ef25fa7caa4e9791551d9be3e76587b9558c4\",\"license\":\"MIT\"},\"src/v0.1/L2endpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IL2Aggregator.sol\\\";\\nimport \\\"./VRFConsumerBase.sol\\\";\\nimport \\\"./L2EndpointBase.sol\\\";\\nimport \\\"./L2EndpointRequestResponse.sol\\\";\\n\\ncontract L2Endpoint is Ownable, L2EndpointRequestResponse {\\n    uint256 public sAggregatorCount;\\n    uint64 private sNonce;\\n\\n    mapping(address => bool) sAggregators;\\n\\n    error InvalidAggregator(address aggregator);\\n\\n    event SubmitterAdded(address newSubmitter);\\n    event SubmitterRemoved(address newSubmitter);\\n    event AggregatorAdded(address newAggregator);\\n    event AggregatorRemoved(address newAggregator);\\n    event Submitted(uint256 roundId, int256 submission);\\n    event RandomWordsRequested(\\n        bytes32 indexed keyHash,\\n        uint256 requestId,\\n        uint256 preSeed,\\n        uint64 indexed accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords,\\n        address indexed sender\\n    );\\n    event RandomWordsFulfilled(uint256 indexed requestId, uint256[] randomWords, bool success);\\n\\n    function addAggregator(address _newAggregator) external onlyOwner {\\n        if (sAggregators[_newAggregator]) revert InvalidAggregator(_newAggregator);\\n        sAggregators[_newAggregator] = true;\\n        sAggregatorCount += 1;\\n        emit AggregatorAdded(_newAggregator);\\n    }\\n\\n    function removeAggregator(address _aggregator) external onlyOwner {\\n        if (!sAggregators[_aggregator]) revert InvalidAggregator(_aggregator);\\n        delete sAggregators[_aggregator];\\n        sAggregatorCount -= 1;\\n        emit AggregatorRemoved(_aggregator);\\n    }\\n\\n    function addSubmitter(address _newSubmitter) external onlyOwner {\\n        if (sSubmitters[_newSubmitter]) revert InvalidSubmitter(_newSubmitter);\\n        sSubmitters[_newSubmitter] = true;\\n        sSubmitterCount += 1;\\n        emit SubmitterAdded(_newSubmitter);\\n    }\\n\\n    function removeSubmitter(address _submitter) external onlyOwner {\\n        if (!sSubmitters[_submitter]) revert InvalidSubmitter(_submitter);\\n        delete sSubmitters[_submitter];\\n        sSubmitterCount -= 1;\\n        emit SubmitterRemoved(_submitter);\\n    }\\n\\n    function submit(uint256 _roundId, int256 _submission, address _aggregator) external {\\n        if (!sSubmitters[msg.sender]) revert InvalidSubmitter(msg.sender);\\n        if (!sAggregators[_aggregator]) revert InvalidAggregator(_aggregator);\\n        IL2Aggregator(_aggregator).submit(_roundId, _submission);\\n        emit Submitted(_roundId, _submission);\\n    }\\n\\n    function computeRequestId(\\n        bytes32 keyHash,\\n        address sender,\\n        uint64 accId,\\n        uint64 nonce\\n    ) private pure returns (uint256, uint256) {\\n        uint256 preSeed = uint256(keccak256(abi.encode(keyHash, sender, accId, nonce)));\\n        uint256 requestId = uint256(keccak256(abi.encode(keyHash, preSeed)));\\n        return (requestId, preSeed);\\n    }\\n\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external nonReentrant returns (uint256) {\\n        sNonce++;\\n        (uint256 requestId, uint256 preSeed) = computeRequestId(keyHash, msg.sender, accId, sNonce);\\n        sRequestDetail[requestId] = RequestInfo({\\n            owner: msg.sender,\\n            callbackGasLimit: callbackGasLimit\\n        });\\n        emit RandomWordsRequested(\\n            keyHash,\\n            requestId,\\n            preSeed,\\n            accId,\\n            callbackGasLimit,\\n            numWords,\\n            msg.sender\\n        );\\n\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) external nonReentrant {\\n        if (!sSubmitters[msg.sender]) revert InvalidSubmitter(msg.sender);\\n        RequestInfo memory detail = sRequestDetail[requestId];\\n        bytes memory resp = abi.encodeWithSelector(\\n            VRFConsumerBase.rawFulfillRandomWords.selector,\\n            requestId,\\n            randomWords\\n        );\\n        setReentrancy(true);\\n        bool success = callWithExactGas(detail.callbackGasLimit, detail.owner, resp);\\n        setReentrancy(false);\\n        emit RandomWordsFulfilled(requestId, randomWords, success);\\n    }\\n}\\n\",\"keccak256\":\"0x764566a2adfe0278e6ff87812c3313ad0e0a6b3d69d9fae4dbb8a4aef17d9210\",\"license\":\"MIT\"},\"src/v0.1/RequestResponseConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/IRequestResponseCoordinator.sol\\\";\\n\\nabstract contract RequestResponseConsumerBase {\\n    using Orakl for Orakl.Request;\\n\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n\\n    mapping(bytes32 => bytes4) private sJobIdToFunctionSelector;\\n    IRequestResponseCoordinator public immutable COORDINATOR;\\n\\n    /**\\n     * @param _requestResponseCoordinator address of RequestResponseCoordinator contract\\n     */\\n    constructor(address _requestResponseCoordinator) {\\n        COORDINATOR = IRequestResponseCoordinator(_requestResponseCoordinator);\\n\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"uint128\\\"))] = COORDINATOR\\n            .fulfillDataRequestUint128\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"int256\\\"))] = COORDINATOR\\n            .fulfillDataRequestInt256\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bool\\\"))] = COORDINATOR\\n            .fulfillDataRequestBool\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"string\\\"))] = COORDINATOR\\n            .fulfillDataRequestString\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes32\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes32\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes\\n            .selector;\\n    }\\n\\n    /**\\n     * @notice Build a request using the Orakl library\\n     * @param jobId the job specification ID that the request is created for\\n     * @return req request in memory\\n     */\\n    function buildRequest(bytes32 jobId) internal view returns (Orakl.Request memory req) {\\n        return req.initialize(jobId, address(COORDINATOR), sJobIdToFunctionSelector[jobId]);\\n    }\\n\\n    modifier verifyRawFulfillment() {\\n        address coordinatorAddress = address(COORDINATOR);\\n        if (msg.sender != coordinatorAddress) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x067ffce4a5c64d0af5f1d0d4de4055d3746a2e1ed960fcee800f67b7fe85b61a\",\"license\":\"MIT\"},\"src/v0.1/RequestResponseConsumerFulfill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./RequestResponseConsumerBase.sol\\\";\\n\\nabstract contract RequestResponseConsumerFulfillUint128 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, uint128 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        uint128 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillInt256 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, int256 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        int256 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBool is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bool response) internal virtual;\\n\\n    function rawFulfillDataRequest(uint256 requestId, bool response) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillString is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, string memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        string memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBytes32 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes32 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes32 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBytes is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\",\"keccak256\":\"0x05d2cb95518c33778101579ab9a90853eebb005a9c64639ee8dd947fa5302edd\",\"license\":\"MIT\"},\"src/v0.1/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFConsumerBaseV2.sol\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create account, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev account management functions).\\n * @dev Call requestRandomWords(keyHash, accId,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomWords method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomWords method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomWords method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomWords\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBase {\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    address private immutable vrfCoordinator;\\n\\n    /**\\n     * @param _vrfCoordinator address of VRFCoordinator contract\\n     */\\n    constructor(address _vrfCoordinator) {\\n        vrfCoordinator = _vrfCoordinator;\\n    }\\n\\n    /**\\n     * @notice fulfillRandomWords handles the VRF response. Your contract must\\n     * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n     * @notice principles to keep in mind when implementing your fulfillRandomWords\\n     * @notice method.\\n     *\\n     * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n     * @dev signature, and will call it once it has verified the proof\\n     * @dev associated with the randomness. (It is triggered via a call to\\n     * @dev rawFulfillRandomWords, below.)\\n     *\\n     * @param requestId The Id initially returned by requestRandomWords\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n    /**\\n     * @notice rawFulfillRandomWords is called by VRFCoordinator when it\\n     * @notice receives a valid VRF proof. rawFulfillRandomWords then calls\\n     * @notice fulfillRandomWords, after validating the origin of the call\\n     *\\n     * @param requestId The Id initially returned by requestRandomWords\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n        if (msg.sender != vrfCoordinator) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n        }\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n}\\n\",\"keccak256\":\"0x8f25cf557237f53059663038b409a6a09210710ebc86bed6f416d418c02f6425\",\"license\":\"MIT\"},\"src/v0.1/interfaces/ICoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface ICoordinatorBase {\\n    // Fee configuration that separates fees based on the number of\\n    // requests created per account. This applies only to [regular]\\n    // account.\\n    struct FeeConfig {\\n        // Flat fee charged per fulfillment in millionths of KLAY\\n        // So fee range is [0, 2^32/10^6].\\n        uint32 fulfillmentFlatFeeKlayPPMTier1;\\n        uint32 fulfillmentFlatFeeKlayPPMTier2;\\n        uint32 fulfillmentFlatFeeKlayPPMTier3;\\n        uint32 fulfillmentFlatFeeKlayPPMTier4;\\n        uint32 fulfillmentFlatFeeKlayPPMTier5;\\n        uint24 reqsForTier2;\\n        uint24 reqsForTier3;\\n        uint24 reqsForTier4;\\n        uint24 reqsForTier5;\\n    }\\n\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting\\n     * after completing the gas measurement\\n     * @param feeConfig fee tier configuration\\n     */\\n    function setConfig(\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        FeeConfig memory feeConfig\\n    ) external;\\n\\n    /**\\n     * @notice Check to see if there exists a request commitment\\n     * consumers for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request\\n     * for the account, false otherwise.\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Get request commitment.\\n     * @param requestId id of request\\n     * @return commmitment value that can be used to determine whether\\n     * a request is fulfilled or not. If `requestId` is valid and\\n     * commitment equals to bytes32(0), the request was fulfilled.\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Canceling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n\\n    /**\\n     * @notice Access address for prepayment associated with\\n     * @notice coordinator.\\n     * @return prepayment address\\n     */\\n    function getPrepaymentAddress() external returns (address);\\n\\n    function estimateFee(\\n        uint64 reqCount,\\n        uint8 numSubmission,\\n        uint32 callbackGasLimit\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6de51eefb1bee236f7a8144f87c06b804f11375672f41543926a960b9d50f8b5\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IL2Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IL2Aggregator {\\n    function submit(uint256 _roundId, int256 _submission) external;\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x4ac828deb9bafa24b3b80568c31fd929a36cd6ad8c35359d9bdb099ba466968c\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IRequestResponseCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IRequestResponseCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IRequestResponseCoordinator is IRequestResponseCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x7d924dc529b73fd5c60f0a4d972a12377f15c17fc331a82aa5218897f173d46a\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IRequestResponseCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/Orakl.sol\\\";\\n\\ninterface IRequestResponseCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint64 accId;\\n        uint8 numSubmission;\\n        uint32 callbackGasLimit;\\n        address sender;\\n        bool isDirectPayment;\\n        bytes32 jobId;\\n    }\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [regular] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param accId - The ID of the account. Must be funded with the\\n     * minimum account balance.\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     @return requestId - A unique * identifier of the request. Can be\\n     used to match a request to a * response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint64 accId,\\n        uint8 numSubmission\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [temporary] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     * @param refundRecipient recipient of an extra $KLAY amount that\\n     * was sent together with service request\\n     * @return requestId - A unique identifier of the request. Can be\\n     * used to match a request to a response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) external payable returns (uint256);\\n\\n    function fulfillDataRequestUint128(\\n        uint256 requestId,\\n        uint128 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestInt256(\\n        uint256 requestId,\\n        int256 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBool(\\n        uint256 requestId,\\n        bool response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestString(\\n        uint256 requestId,\\n        string memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes32(\\n        uint256 requestId,\\n        bytes32 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    /**\\n     * @notice Different jobs specified by jobId have allowed\\n     * different number of of requests for submissions that depends on\\n     * total number of registered oracles.\\n     */\\n    function validateNumSubmission(bytes32 jobId, uint8 numSubmission) external;\\n}\\n\",\"keccak256\":\"0xfa11f2677b8f2ea43e09077e1c18c22c4430c7630604a3ad4213955710b72a03\",\"license\":\"MIT\"},\"src/v0.1/libraries/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint256 capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Initializes a new buffer from an existing bytes object.\\n     *      Changes to the buffer may mutate the original value.\\n     * @param b The bytes object to initialize the buffer with.\\n     * @return A new buffer.\\n     */\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Sets buffer length to 0.\\n     * @param buf The buffer to truncate.\\n     * @return The original buffer, for chaining..\\n     */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint256 dest;\\n        uint256 src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(\\n        buffer memory buf,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write the byte at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeUint8(\\n        buffer memory buf,\\n        uint256 off,\\n        uint8 data\\n    ) internal pure returns (buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (left-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes32 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint256 mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeBytes20(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes20 data\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chhaining.\\n     */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeInt(\\n        buffer memory buf,\\n        uint256 off,\\n        uint256 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint256 mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(\\n        buffer memory buf,\\n        uint256 data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0x974280a1114bec25110c9c608e1c6c4dd7666c00e30f831f68b6d8a5b3bde420\",\"license\":\"MIT\"},\"src/v0.1/libraries/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/CBORChainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\n\\n// Encoding library for Binary Object Representation\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    // DECLARE TYPES FOR EASIER REFERENCE OF VARIABLE TYPE\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeFixedNumeric(Buffer.buffer memory buf, uint8 major, uint64 value) private pure {\\n        if (value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\\n        if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        }\\n    }\\n\\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\\n        if (value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, uint(value));\\n        } else if (value >= 0) {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(Buffer.buffer memory buf, uint value) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        encodeBytes(buf, abi.encode(value));\\n    }\\n\\n    function encodeSignedBigNum(Buffer.buffer memory buf, int input) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n        encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n    }\\n\\n    function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\",\"keccak256\":\"0x0712ea9c6408a41611eaa5ca843880d7d39c21cfe1dc3efea034bcedf244eae5\",\"license\":\"MIT\"},\"src/v0.1/libraries/Orakl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Chainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\nimport {CBOR} from \\\"./CBOR.sol\\\";\\n\\nlibrary Orakl {\\n    uint256 internal constant defaultBufferSize = 256;\\n\\n    using CBOR for Buffer.buffer;\\n\\n    // structure for storing requests done off-chain\\n    struct Request {\\n        bytes32 id;\\n        address callbackAddr;\\n        bytes4 callbackFunc;\\n        uint256 nonce;\\n        Buffer.buffer buf;\\n    }\\n\\n    /**\\n     * @notice Initializes a request\\n     * @dev Sets ID, callback address, and callback function\\n     * @param self The uninitialized request\\n     * @param jobId The Job Specification ID\\n     * @param callbackAddr The callback address\\n     * @param callbackFunc The callback function signature\\n     * @return The initialized request\\n     */\\n    function initialize(\\n        Request memory self,\\n        bytes32 jobId,\\n        address callbackAddr,\\n        bytes4 callbackFunc\\n    ) internal pure returns (Orakl.Request memory) {\\n        Buffer.init(self.buf, defaultBufferSize);\\n        self.id = jobId;\\n        self.callbackAddr = callbackAddr;\\n        self.callbackFunc = callbackFunc;\\n        return self;\\n    }\\n\\n    /**\\n     * @notice sets the data for buffer\\n     * @param _request the initialized request\\n     * @param _data the CBOR data\\n     */\\n    function setBuffer(Request memory _request, bytes memory _data) internal pure {\\n        Buffer.init(_request.buf, _data.length);\\n        Buffer.append(_request.buf, _data);\\n    }\\n\\n    /**\\n     * @notice Adds a string value to the request in a key - value pair format\\n     * @param self - the initalized request\\n     * @param key - the name of the key\\n     * @param value - the string value to add\\n     */\\n    function add(Request memory self, string memory key, string memory value) internal pure {\\n        self.buf.encodeString(key);\\n        self.buf.encodeString(value);\\n    }\\n\\n    /**\\n     * @notice Adds a byte value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the bytes value to add\\n     */\\n    function addBytes(\\n        Request memory _request,\\n        string memory _key,\\n        bytes memory _value\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeBytes(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a Int256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the int256 value to add\\n     */\\n    function addInt(Request memory _request, string memory _key, int256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a UInt256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the uint256 value to add\\n     */\\n    function addUInt(Request memory _request, string memory _key, uint256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeUInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds an array of string value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _values - the array of string value to add\\n     */\\n    function addStringArray(\\n        Request memory _request,\\n        string memory _key,\\n        string[] memory _values\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.startArray();\\n        for (uint256 i; i < _values.length; i++) {\\n            _request.buf.encodeString(_values[i]);\\n        }\\n        _request.buf.endSequence();\\n    }\\n}\\n\",\"keccak256\":\"0xd03570ddd458085535e258f75d684f76b2adbac7fccb718d11977562d4f3101a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063b02cffb211610081578063c36f41e211610066578063c36f41e214610284578063ead99ae714610297578063f2fde38b146102aa57600080fd5b8063b02cffb21461025e578063bf2a10cb1461027157600080fd5b80638c651f11116100b25780638c651f111461021d5780638da5cb5b1461023057806394cacc8f1461024b57600080fd5b8063715018a614610202578063752f8c141461020a57600080fd5b806338ba4614116101245780636520b009116101095780636520b009146101c957806365f82dd3146101dc57806369439e07146101ef57600080fd5b806338ba4614146101ad57806350ae9443146101c057600080fd5b8063072900f9146101565780631188c0b01461016b5780632f34077b1461017e5780633728e0e6146101a4575b600080fd5b6101696101643660046115d0565b6102bd565b005b6101696101793660046115f2565b61038b565b61019161018c366004611640565b6104ef565b6040519081526020015b60405180910390f35b61019160025481565b6101696101bb366004611720565b610694565b61019160055481565b6101696101d73660046115d0565b610807565b6101696101ea36600461184a565b6108cb565b6101696101fd366004611891565b610a3e565b610169610b6d565b6101916102183660046118d7565b610b81565b61016961022b3660046115d0565b610cf0565b6000546040516001600160a01b03909116815260200161019b565b6101696102593660046119e7565b610dad565b61016961026c366004611a1c565b610f0c565b61016961027f366004611a56565b61108b565b6101696102923660046115d0565b6111fe565b6101696102a53660046115f2565b6112bd565b6101696102b83660046115d0565b611416565b6102c56114a6565b6001600160a01b03811660009081526001602052604090205460ff161561030f57604051632ffe4f1760e21b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b03811660009081526001602081905260408220805460ff1916821790556002805491929091610346908490611abd565b90915550506040516001600160a01b03821681527fb079bc2cbde1f186e0b351d4a87c4597e3ed098f571548617449e73506428d8b906020015b60405180910390a150565b600054600160a01b900460ff16156103b65760405163769dd35360e11b815260040160405180910390fd5b3360009081526001602052604090205460ff166103e857604051632ffe4f1760e21b8152336004820152602401610306565b60008281526003602090815260408083208151808301835290546001600160a01b038116825263ffffffff600160a01b9182900481168386019081528451602481018a905260448082018a905286518083039091018152606490910190955294840180516001600160e01b03167ff40b4def00000000000000000000000000000000000000000000000000000000179052855460ff60a01b19169091178555925181519194929361049c9291169084611500565b6000805460ff60a01b19169055905060408051858152821515602082015286917f68ab2090cae4446c41a4252a58251ac07f2ac3277747f0f2431ce7d80fdb643791015b60405180910390a25050505050565b60008054600160a01b900460ff161561051b5760405163769dd35360e11b815260040160405180910390fd5b6006805467ffffffffffffffff1690600061053583611ad6565b825467ffffffffffffffff91821661010093840a90810290830219909116179092556006546040805160208082018c905233828401528a86166060830152929094166080808601919091528151808603909101815260a08501825280519083012060c085018b905260e08086018290528251808703909101815294909301905282519201919091206000925082916040805180820182523380825263ffffffff8a811660208085018281526000898152600383528790209551865491518516600160a01b027fffffffffffffffff0000000000000000000000000000000000000000000000009092166001600160a01b03909116171790945584518781529384018690529383019390935291881660608201529294509092509067ffffffffffffffff88169089907f83435a10127d49580dea6415e92f6d97ce6dfed04f0e49a3ca3366a82716b8569060800160405180910390a45095945050505050565b600054600160a01b900460ff16156106bf5760405163769dd35360e11b815260040160405180910390fd5b3360009081526001602052604090205460ff166106f157604051632ffe4f1760e21b8152336004820152602401610306565b60008281526003602090815260408083208151808301835290546001600160a01b0381168252600160a01b900463ffffffff1692810192909252519091907f1fe543e300000000000000000000000000000000000000000000000000000000906107619086908690602401611b38565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03909316929092179091526000805460ff60a01b1916600160a01b179055905060006107c6836020015163ffffffff16846000015184611500565b6000805460ff60a01b191690559050847f969e72fbacf24da85b4bce2a3cef3d8dc2497b1750c4cc5a06b52c104133833785836040516104e0929190611b59565b61080f6114a6565b6001600160a01b03811660009081526007602052604090205460ff161561085457604051635c8bf34d60e01b81526001600160a01b0382166004820152602401610306565b6001600160a01b0381166000908152600760205260408120805460ff19166001908117909155600580549192909161088d908490611abd565b90915550506040516001600160a01b03821681527f6fe83d3564912d267f3f85c4a548ac36ea86d2bb44c5881a8c7e841e5a439a4490602001610380565b600054600160a01b900460ff16156108f65760405163769dd35360e11b815260040160405180910390fd5b3360009081526001602052604090205460ff1661092857604051632ffe4f1760e21b8152336004820152602401610306565b60008281526003602090815260408083208151808301835290546001600160a01b0381168252600160a01b900463ffffffff1692810192909252519091907f19e2cd2f00000000000000000000000000000000000000000000000000000000906109989086908690602401611bc3565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03909316929092179091526000805460ff60a01b1916600160a01b179055905060006109fd836020015163ffffffff16846000015184611500565b6000805460ff60a01b191690559050847fb6727cffbd4cbe4365522df08e3a8fbcf75662b5e1c5ffb1db39c936250abf7785836040516104e0929190611bdc565b3360009081526001602052604090205460ff16610a7057604051632ffe4f1760e21b8152336004820152602401610306565b6001600160a01b03811660009081526007602052604090205460ff16610ab457604051635c8bf34d60e01b81526001600160a01b0382166004820152602401610306565b6040517f202ee0ed00000000000000000000000000000000000000000000000000000000815260048101849052602481018390526001600160a01b0382169063202ee0ed90604401600060405180830381600087803b158015610b1657600080fd5b505af1158015610b2a573d6000803e3d6000fd5b505060408051868152602081018690527fa295ff9f7c0d4a3dc435d3ec6914c2c8dfd40c81683a4e8c1a48dfb8061c115e935001905060405180910390a1505050565b610b756114a6565b610b7f600061154c565b565b60008054600160a01b900460ff1615610bad5760405163769dd35360e11b815260040160405180910390fd5b6004805467ffffffffffffffff16906000610bc783611ad6565b82546101009290920a67ffffffffffffffff8181021990931691831602179091556004546040805133602080830191909152888516828401529290931660608085019190915281518085039091018152608090930190528151910120600091506040805180820182523380825263ffffffff808a16602080850191825260008781526003909152859020935184549151909216600160a01b027fffffffffffffffff0000000000000000000000000000000000000000000000009091166001600160a01b03929092169190911717909155885191519293509167ffffffffffffffff87169184917fbcd6102b5ed4bce45e33e55e881597584257ce8f3b613700c8966eaaa87d668f91610cdf918b908a908e90611bef565b60405180910390a495945050505050565b610cf86114a6565b6001600160a01b03811660009081526007602052604090205460ff16610d3c57604051635c8bf34d60e01b81526001600160a01b0382166004820152602401610306565b6001600160a01b0381166000908152600760205260408120805460ff191690556005805460019290610d6f908490611c88565b90915550506040516001600160a01b03821681527fe57df70929b1c62badc06b12770e8aceca66ffc8c10367bbedb6b894445dbcd490602001610380565b600054600160a01b900460ff1615610dd85760405163769dd35360e11b815260040160405180910390fd5b3360009081526001602052604090205460ff16610e0a57604051632ffe4f1760e21b8152336004820152602401610306565b60008281526003602090815260408083208151808301835290546001600160a01b038116825263ffffffff600160a01b9182900481168386019081528451602481018a905288151560448083019190915286518083039091018152606490910190955294840180516001600160e01b03167f90d95efc00000000000000000000000000000000000000000000000000000000179052855460ff60a01b191690911785559251815191949293610ec29291169084611500565b6000805460ff60a01b191690559050604080518515158152821515602082015286917f1642c1857f43a2e6a38067a7503bdbff46b114bdedb9684838fef1a2e830fbc191016104e0565b600054600160a01b900460ff1615610f375760405163769dd35360e11b815260040160405180910390fd5b3360009081526001602052604090205460ff16610f6957604051632ffe4f1760e21b8152336004820152602401610306565b60008281526003602090815260408083208151808301835290546001600160a01b038116825263ffffffff600160a01b9182900481168386019081528451602481018a90526fffffffffffffffffffffffffffffffff891660448083019190915286518083039091018152606490910190955294840180516001600160e01b03167f45b9b6fb00000000000000000000000000000000000000000000000000000000179052855460ff60a01b1916909117855592518151919492936110319291169084611500565b6000805460ff60a01b191690559050604080516fffffffffffffffffffffffffffffffff86168152821515602082015286917fe3202e5e3d6b36ed8405525d980bb3ad5ccf03672a9669fa20a89f98744ff27b91016104e0565b600054600160a01b900460ff16156110b65760405163769dd35360e11b815260040160405180910390fd5b3360009081526001602052604090205460ff166110e857604051632ffe4f1760e21b8152336004820152602401610306565b60008281526003602090815260408083208151808301835290546001600160a01b0381168252600160a01b900463ffffffff1692810192909252519091907f79b1500800000000000000000000000000000000000000000000000000000000906111589086908690602401611bc3565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03909316929092179091526000805460ff60a01b1916600160a01b179055905060006111bd836020015163ffffffff16846000015184611500565b6000805460ff60a01b191690559050847f1f4cd35fbbff74b414788bedf414c823fba59b0c18e4fb0765fe6abf4973af4285836040516104e0929190611bdc565b6112066114a6565b6001600160a01b03811660009081526001602052604090205460ff1661124a57604051632ffe4f1760e21b81526001600160a01b0382166004820152602401610306565b6001600160a01b03811660009081526001602081905260408220805460ff19169055600280549192909161127f908490611c88565b90915550506040516001600160a01b03821681527ff84a004e1673d2f349a7c93c72b3794b8eba6d2f9338044d8c8cd260e51a57a190602001610380565b600054600160a01b900460ff16156112e85760405163769dd35360e11b815260040160405180910390fd5b3360009081526001602052604090205460ff1661131a57604051632ffe4f1760e21b8152336004820152602401610306565b60008281526003602090815260408083208151808301835290546001600160a01b038116825263ffffffff600160a01b9182900481168386019081528451602481018a905260448082018a905286518083039091018152606490910190955294840180516001600160e01b03167f6e2acda000000000000000000000000000000000000000000000000000000000179052855460ff60a01b1916909117855592518151919492936113ce9291169084611500565b6000805460ff60a01b19169055905060408051858152821515602082015286917f4be934158e70ea4fc348690c5a927fa7cef37f665b9f23b4f7719d1ac4d3c14b91016104e0565b61141e6114a6565b6001600160a01b03811661149a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610306565b6114a38161154c565b50565b6000546001600160a01b03163314610b7f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610306565b60005a61138881101561151257600080fd5b61138881039050846040820482031161152a57600080fd5b50823b61153657600080fd5b60008083516020850160008789f1949350505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146115cb57600080fd5b919050565b6000602082840312156115e257600080fd5b6115eb826115b4565b9392505050565b6000806040838503121561160557600080fd5b50508035926020909101359150565b803567ffffffffffffffff811681146115cb57600080fd5b803563ffffffff811681146115cb57600080fd5b6000806000806080858703121561165657600080fd5b8435935061166660208601611614565b92506116746040860161162c565b91506116826060860161162c565b905092959194509250565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156116c6576116c661168d565b60405290565b6040805190810167ffffffffffffffff811182821017156116c6576116c661168d565b604051601f8201601f1916810167ffffffffffffffff811182821017156117185761171861168d565b604052919050565b6000806040838503121561173357600080fd5b8235915060208084013567ffffffffffffffff8082111561175357600080fd5b818601915086601f83011261176757600080fd5b8135818111156117795761177961168d565b8060051b915061178a8483016116ef565b81815291830184019184810190898411156117a457600080fd5b938501935b838510156117c2578435825293850193908501906117a9565b8096505050505050509250929050565b600067ffffffffffffffff8311156117ec576117ec61168d565b6117ff601f8401601f19166020016116ef565b905082815283838301111561181357600080fd5b828260208301376000602084830101529392505050565b600082601f83011261183b57600080fd5b6115eb838335602085016117d2565b6000806040838503121561185d57600080fd5b82359150602083013567ffffffffffffffff81111561187b57600080fd5b6118878582860161182a565b9150509250929050565b6000806000606084860312156118a657600080fd5b83359250602084013591506118bd604085016115b4565b90509250925092565b803560ff811681146115cb57600080fd5b600080600080608085870312156118ed57600080fd5b843567ffffffffffffffff8082111561190557600080fd5b9086019060a0828903121561191957600080fd5b6119216116a3565b82358152611931602084016115b4565b602082015260408301356001600160e01b03198116811461195157600080fd5b60408201526060838101359082015260808301358281111561197257600080fd5b92909201916040838a03121561198757600080fd5b61198f6116cc565b83358381111561199e57600080fd5b6119aa8b82870161182a565b82525060209384013584820152608082015295506119cb918701905061162c565b92506119d960408601611614565b9150611682606086016118c6565b600080604083850312156119fa57600080fd5b8235915060208301358015158114611a1157600080fd5b809150509250929050565b60008060408385031215611a2f57600080fd5b8235915060208301356fffffffffffffffffffffffffffffffff81168114611a1157600080fd5b60008060408385031215611a6957600080fd5b82359150602083013567ffffffffffffffff811115611a8757600080fd5b8301601f81018513611a9857600080fd5b611887858235602084016117d2565b634e487b7160e01b600052601160045260246000fd5b80820180821115611ad057611ad0611aa7565b92915050565b600067ffffffffffffffff808316818103611af357611af3611aa7565b6001019392505050565b600081518084526020808501945080840160005b83811015611b2d57815187529582019590820190600101611b11565b509495945050505050565b828152604060208201526000611b516040830184611afd565b949350505050565b604081526000611b6c6040830185611afd565b905082151560208301529392505050565b6000815180845260005b81811015611ba357602081850181015186830182015201611b87565b506000602082860101526020601f19601f83011685010191505092915050565b828152604060208201526000611b516040830184611b7d565b604081526000611b6c6040830185611b7d565b84815263ffffffff8416602082015260ff8316604082015260806060820152815160808201526001600160a01b0360208301511660a08201526001600160e01b031960408301511660c0820152606082015160e08201526000608083015160a061010084015280516040610120850152611c6d610160850182611b7d565b90506020820151610140850152809250505095945050505050565b81810381811115611ad057611ad0611aa756fea2646970667358221220a6b2cc337572196184dbab00333c5dca29f85fe011edfd8dacb96ae42998960164736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4598,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sReentrancyLock",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4607,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sSubmitters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4609,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sSubmitterCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4614,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sRequestDetail",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(RequestInfo)4603_storage)"
      },
      {
        "astId": 4674,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sNonce",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 5208,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sAggregatorCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5210,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sNonce",
        "offset": 0,
        "slot": "6",
        "type": "t_uint64"
      },
      {
        "astId": 5214,
        "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
        "label": "sAggregators",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(RequestInfo)4603_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct L2EndpointBase.RequestInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestInfo)4603_storage"
      },
      "t_struct(RequestInfo)4603_storage": {
        "encoding": "inplace",
        "label": "struct L2EndpointBase.RequestInfo",
        "members": [
          {
            "astId": 4600,
            "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4602,
            "contract": "src/v0.1/L2endpoint.sol:L2Endpoint",
            "label": "callbackGasLimit",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}