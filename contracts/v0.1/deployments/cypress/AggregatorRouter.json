{
  "address": "0x16937CFc59A8Cd126Dc70A75A4bd3b78f690C861",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "feedNames",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "proxyAddresses",
          "type": "address[]"
        }
      ],
      "name": "RouterProxyAddressBulkUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        }
      ],
      "name": "RouterProxyAddressUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        }
      ],
      "name": "aggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "aggregatorProxies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        }
      ],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        }
      ],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        },
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "id",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        }
      ],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "id",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "phaseId_",
          "type": "uint16"
        }
      ],
      "name": "phaseAggregators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        }
      ],
      "name": "phaseId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        }
      ],
      "name": "proposedAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        },
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        }
      ],
      "name": "proposedGetRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "id",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        }
      ],
      "name": "proposedLatestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "id",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        }
      ],
      "name": "typeAndVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        }
      ],
      "name": "updateProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "feedNames",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "proxyAddresses",
          "type": "address[]"
        }
      ],
      "name": "updateProxyBulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3430dc9ba32ce5c538afc775d7672f335808dc8fafc2e7aad60e9e79120b2d0e",
  "receipt": {
    "to": null,
    "from": "0x0026De34522627c5DA2B6A5618147A9153c1243A",
    "contractAddress": "0x16937CFc59A8Cd126Dc70A75A4bd3b78f690C861",
    "transactionIndex": 1,
    "gasUsed": "2046813",
    "logsBloom": "0x
    "blockHash": "0x34ed443f53984254588d6f7e8d85d1faa02f6a9c35b4f9f1abf65b41395dd5f0",
    "transactionHash": "0x3430dc9ba32ce5c538afc775d7672f335808dc8fafc2e7aad60e9e79120b2d0e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 142883135,
        "transactionHash": "0x3430dc9ba32ce5c538afc775d7672f335808dc8fafc2e7aad60e9e79120b2d0e",
        "address": "0x16937CFc59A8Cd126Dc70A75A4bd3b78f690C861",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000026de34522627c5da2b6a5618147a9153c1243a"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x34ed443f53984254588d6f7e8d85d1faa02f6a9c35b4f9f1abf65b41395dd5f0"
      }
    ],
    "blockNumber": 142883135,
    "cumulativeGasUsed": "2228850",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf539ea29f72e45d6e6718212f63d6bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"proxyAddresses\",\"type\":\"address[]\"}],\"name\":\"RouterProxyAddressBulkUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"RouterProxyAddressUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"}],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"aggregatorProxies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"}],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"phaseId_\",\"type\":\"uint16\"}],\"name\":\"phaseAggregators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"}],\"name\":\"phaseId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"}],\"name\":\"proposedAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"name\":\"proposedGetRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"}],\"name\":\"proposedLatestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"}],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"updateProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"proxyAddresses\",\"type\":\"address[]\"}],\"name\":\"updateProxyBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoundData(string,uint80)\":{\"details\":\"Note that answer and updatedAt may change between queries.\",\"params\":{\"feedName\":\"the name of the datafeed (ex. BTC-USDT)\",\"roundId\":\"the requested round ID as presented through the proxy, this is made up of the aggregator's round ID with the phase ID encoded in the two highest order bytes\"},\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)\",\"id\":\"is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"latestRoundData(string)\":{\"details\":\"Note that answer and updatedAt may change between queries.\",\"params\":{\"feedName\":\"the name of the datafeed (ex. BTC-USDT)\"},\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)\",\"id\":\"is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"phaseAggregators(string,uint16)\":{\"params\":{\"phaseId_\":\"uint16\"}},\"proposedGetRoundData(string,uint80)\":{\"params\":{\"feedName\":\"the name of the datafeed (ex. BTC-USDT)\",\"roundId\":\"the round ID to retrieve the round data for\"},\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed.\",\"id\":\"is the round ID for which data was retrieved\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"proposedLatestRoundData(string)\":{\"params\":{\"feedName\":\"the name of the datafeed (ex. BTC-USDT)\"},\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed.\",\"id\":\"is the round ID for which data was retrieved\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Orakl Network Aggregator Router\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregator(string)\":{\"notice\":\"returns the current phase's aggregator address.\"},\"decimals(string)\":{\"notice\":\"represents the number of decimals the aggregator responses represent.\"},\"description(string)\":{\"notice\":\"returns the description of the aggregator the proxy points to.\"},\"getRoundData(string,uint80)\":{\"notice\":\"get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them.\"},\"latestRoundData(string)\":{\"notice\":\"get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them.\"},\"phaseAggregators(string,uint16)\":{\"notice\":\"return a phase aggregator using the phaseId\"},\"phaseId(string)\":{\"notice\":\"returns the current phase's ID.\"},\"proposedAggregator(string)\":{\"notice\":\"returns the current proposed aggregator\"},\"proposedGetRoundData(string,uint80)\":{\"notice\":\"Used if an aggregator contract has been proposed.\"},\"proposedLatestRoundData(string)\":{\"notice\":\"Used if an aggregator contract has been proposed.\"},\"typeAndVersion(string)\":{\"notice\":\"the type and version of aggregator to which proxy points to.\"}},\"notice\":\"The `AggregatorRouter` is the main contract needed to read Orakl Network Data Feeds. The interface is similar to the `AggregatorProxy` contract but requires an extra string parameter called `feedName`. The supported `feedName` parameters are a combination of base and quote currencies (e.g. BTC-USDT for Bitcoin's price in USDT stablecoin). You can find all supported tokens at https://config.orakl.network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.1/AggregatorRouter.sol\":\"AggregatorRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/v0.1/AggregatorRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IAggregatorRouter.sol\\\";\\nimport \\\"./interfaces/IAggregatorProxy.sol\\\";\\n\\n/**\\n * @title Orakl Network Aggregator Router\\n * @notice The `AggregatorRouter` is the main contract needed to read Orakl\\n * Network Data Feeds. The interface is similar to the `AggregatorProxy`\\n * contract but requires an extra string parameter called `feedName`. The\\n * supported `feedName` parameters are a combination of base and quote\\n * currencies (e.g. BTC-USDT for Bitcoin's price in USDT stablecoin). You\\n * can find all supported tokens at https://config.orakl.network.\\n */\\ncontract AggregatorRouter is Ownable, IAggregatorRouter {\\n    mapping(string => address) public aggregatorProxies;\\n\\n    event RouterProxyAddressUpdated(string feedName, address indexed proxyAddress);\\n    event RouterProxyAddressBulkUpdated(string[] feedNames, address[] proxyAddresses);\\n\\n    modifier validFeed(string calldata feedName) {\\n        require(aggregatorProxies[feedName] != address(0), \\\"feed not set in router\\\");\\n        _;\\n    }\\n\\n    function updateProxy(string calldata feedName, address proxyAddress) external onlyOwner {\\n        aggregatorProxies[feedName] = proxyAddress;\\n        emit RouterProxyAddressUpdated(feedName, proxyAddress);\\n    }\\n\\n    function updateProxyBulk(\\n        string[] calldata feedNames,\\n        address[] calldata proxyAddresses\\n    ) external onlyOwner {\\n        require(feedNames.length > 0 && feedNames.length == proxyAddresses.length, \\\"invalid input\\\");\\n\\n        for (uint i = 0; i < feedNames.length; i++) {\\n            aggregatorProxies[feedNames[i]] = proxyAddresses[i];\\n        }\\n\\n        emit RouterProxyAddressBulkUpdated(feedNames, proxyAddresses);\\n    }\\n\\n    /**\\n     * @notice get data about a round. Consumers are encouraged to check\\n     * that they're receiving fresh data by inspecting the updatedAt and\\n     * answeredInRound return values.\\n     * Note that different underlying implementations of AggregatorV3Interface\\n     * have slightly different semantics for some of the return values. Consumers\\n     * should determine what implementations they expect to receive\\n     * data from and validate that they can properly handle return data from all\\n     * of them.\\n     * @param feedName the name of the datafeed (ex. BTC-USDT)\\n     * @param roundId the requested round ID as presented through the proxy, this\\n     * is made up of the aggregator's round ID with the phase ID encoded in the\\n     * two highest order bytes\\n     * @return id is the round ID from the aggregator for which the data was\\n     * retrieved combined with an phase to ensure that round IDs get larger as\\n     * time moves forward.\\n     * @return answer is the answer for the given round\\n     * @return startedAt is the timestamp when the round was started.\\n     * (Only some AggregatorV3Interface implementations return meaningful values)\\n     * @return updatedAt is the timestamp when the round last was updated (i.e.\\n     * answer was last computed)\\n     * @return answeredInRound is the round ID of the round in which the answer\\n     * was computed.\\n     * (Only some AggregatorV3Interface implementations return meaningful values)\\n     * @dev Note that answer and updatedAt may change between queries.\\n     */\\n    function getRoundData(\\n        string calldata feedName,\\n        uint80 roundId\\n    )\\n        external\\n        view\\n        validFeed(feedName)\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return IAggregatorProxy(aggregatorProxies[feedName]).getRoundData(roundId);\\n    }\\n\\n    /**\\n     * @notice get data about the latest round. Consumers are encouraged to check\\n     * that they're receiving fresh data by inspecting the updatedAt and\\n     * answeredInRound return values.\\n     * Note that different underlying implementations of AggregatorV3Interface\\n     * have slightly different semantics for some of the return values. Consumers\\n     * should determine what implementations they expect to receive\\n     * data from and validate that they can properly handle return data from all\\n     * of them.\\n     * @param feedName the name of the datafeed (ex. BTC-USDT)\\n     * @return id is the round ID from the aggregator for which the data was\\n     * retrieved combined with an phase to ensure that round IDs get larger as\\n     * time moves forward.\\n     * @return answer is the answer for the given round\\n     * @return startedAt is the timestamp when the round was started.\\n     * (Only some AggregatorV3Interface implementations return meaningful values)\\n     * @return updatedAt is the timestamp when the round last was updated (i.e.\\n     * answer was last computed)\\n     * @return answeredInRound is the round ID of the round in which the answer\\n     * was computed.\\n     * (Only some AggregatorV3Interface implementations return meaningful values)\\n     * @dev Note that answer and updatedAt may change between queries.\\n     */\\n    function latestRoundData(\\n        string calldata feedName\\n    )\\n        external\\n        view\\n        validFeed(feedName)\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return IAggregatorProxy(aggregatorProxies[feedName]).latestRoundData();\\n    }\\n\\n    /**\\n     * @notice Used if an aggregator contract has been proposed.\\n     * @param feedName the name of the datafeed (ex. BTC-USDT)\\n     * @param roundId the round ID to retrieve the round data for\\n     * @return id is the round ID for which data was retrieved\\n     * @return answer is the answer for the given round\\n     * @return startedAt is the timestamp when the round was started.\\n     * (Only some AggregatorV3Interface implementations return meaningful values)\\n     * @return updatedAt is the timestamp when the round last was updated (i.e.\\n     * answer was last computed)\\n     * @return answeredInRound is the round ID of the round in which the answer\\n     * was computed.\\n     */\\n    function proposedGetRoundData(\\n        string calldata feedName,\\n        uint80 roundId\\n    )\\n        external\\n        view\\n        validFeed(feedName)\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return IAggregatorProxy(aggregatorProxies[feedName]).proposedGetRoundData(roundId);\\n    }\\n\\n    /**\\n     * @notice Used if an aggregator contract has been proposed.\\n     * @param feedName the name of the datafeed (ex. BTC-USDT)\\n     * @return id is the round ID for which data was retrieved\\n     * @return answer is the answer for the given round\\n     * @return startedAt is the timestamp when the round was started.\\n     * (Only some AggregatorV3Interface implementations return meaningful values)\\n     * @return updatedAt is the timestamp when the round last was updated (i.e.\\n     * answer was last computed)\\n     * @return answeredInRound is the round ID of the round in which the answer\\n     * was computed.\\n     */\\n    function proposedLatestRoundData(\\n        string calldata feedName\\n    )\\n        external\\n        view\\n        validFeed(feedName)\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return IAggregatorProxy(aggregatorProxies[feedName]).proposedLatestRoundData();\\n    }\\n\\n    /**\\n     * @notice returns the current phase's aggregator address.\\n     */\\n    function aggregator(\\n        string calldata feedName\\n    ) external view validFeed(feedName) returns (address) {\\n        return IAggregatorProxy(aggregatorProxies[feedName]).aggregator();\\n    }\\n\\n    /**\\n     * @notice returns the current phase's ID.\\n     */\\n    function phaseId(string calldata feedName) external view validFeed(feedName) returns (uint16) {\\n        return IAggregatorProxy(aggregatorProxies[feedName]).phaseId();\\n    }\\n\\n    /**\\n     * @notice represents the number of decimals the aggregator responses represent.\\n     */\\n    function decimals(string calldata feedName) external view validFeed(feedName) returns (uint8) {\\n        return IAggregatorProxy(aggregatorProxies[feedName]).decimals();\\n    }\\n\\n    /**\\n     * @notice the type and version of aggregator to which proxy\\n     * points to.\\n     */\\n    function typeAndVersion(\\n        string calldata feedName\\n    ) external view validFeed(feedName) returns (string memory) {\\n        return IAggregatorProxy(aggregatorProxies[feedName]).typeAndVersion();\\n    }\\n\\n    /**\\n     * @notice returns the description of the aggregator the proxy points to.\\n     */\\n    function description(\\n        string calldata feedName\\n    ) external view validFeed(feedName) returns (string memory) {\\n        return IAggregatorProxy(aggregatorProxies[feedName]).description();\\n    }\\n\\n    /**\\n     * @notice returns the current proposed aggregator\\n     */\\n    function proposedAggregator(\\n        string calldata feedName\\n    ) external view validFeed(feedName) returns (address) {\\n        return IAggregatorProxy(aggregatorProxies[feedName]).proposedAggregator();\\n    }\\n\\n    /**\\n     * @notice return a phase aggregator using the phaseId\\n     *\\n     * @param phaseId_ uint16\\n     */\\n    function phaseAggregators(\\n        string calldata feedName,\\n        uint16 phaseId_\\n    ) external view validFeed(feedName) returns (address) {\\n        return IAggregatorProxy(aggregatorProxies[feedName]).phaseAggregators(phaseId_);\\n    }\\n}\\n\",\"keccak256\":\"0xa795aa5989a73d35e0cbf3190399dfee0ca8eb18ac1d261c3a7d362c1435bdc5\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/interfaces/AggregatorInterface.sol\\n\\ninterface IAggregator {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x83c1e2279685e749dde5d0070f90a7adcafa95c57facace6a1f0e3039f83d005\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IAggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/interfaces/AggregatorProxyInterface.sol\\n\\nimport \\\"./IAggregator.sol\\\";\\n\\ninterface IAggregatorProxy is IAggregator {\\n    function phaseAggregators(uint16 phaseId) external view returns (address);\\n\\n    function phaseId() external view returns (uint16);\\n\\n    function proposedAggregator() external view returns (address);\\n\\n    function proposedGetRoundData(\\n        uint80 roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function proposedLatestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function aggregator() external view returns (address);\\n\\n    /**\\n     * @notice the type and version of aggregator to which proxy\\n     * points to.\\n     */\\n    function typeAndVersion() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x743199960ea94db1516218562e7d6d164b2ddbbd059c67bfcca0a162074941d6\",\"license\":\"MIT\"},\"src/v0.1/interfaces/IAggregatorRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IAggregatorRouter {\\n    function aggregatorProxies(string calldata feedName) external view returns (address);\\n\\n    function updateProxy(string calldata feedName, address proxyAddress) external;\\n\\n    function updateProxyBulk(\\n        string[] calldata feedNames,\\n        address[] calldata proxyAddresses\\n    ) external;\\n\\n    function getRoundData(\\n        string calldata feedName,\\n        uint80 roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData(\\n        string calldata feedName\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function proposedGetRoundData(\\n        string calldata feedName,\\n        uint80 roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function proposedLatestRoundData(\\n        string calldata feedName\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function aggregator(string calldata feedName) external view returns (address);\\n\\n    function phaseId(string calldata feedName) external view returns (uint16);\\n\\n    function decimals(string calldata feedName) external view returns (uint8);\\n\\n    function typeAndVersion(string calldata feedName) external view returns (string memory);\\n\\n    function description(string calldata feedName) external view returns (string memory);\\n\\n    function proposedAggregator(string calldata feedName) external view returns (address);\\n\\n    function phaseAggregators(\\n        string calldata feedName,\\n        uint16 phaseId_\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x22ce3824802a4163a120f1c71ef41f949ad7e8e2f71388a1bc53ba4d220adbb9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6119778061007e6000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063715018a6116100b2578063a9a4656f11610081578063bdadb4fb11610066578063bdadb4fb146102c6578063cf5fd0e8146102d9578063f2fde38b146102ec57600080fd5b8063a9a4656f1461027f578063bc8d6a87146102b357600080fd5b8063715018a6146102205780637fd7086914610228578063882551991461024e5780638da5cb5b1461026e57600080fd5b80634b9ab850116100ee5780634b9ab850146101ba57806355f90e02146101cf5780636471a680146101e257806370eb92e0146101f557600080fd5b80630b25e0081461012057806333f98c771461016f5780633b2b3204146101825780633d3d3cc4146101a7575b600080fd5b61013361012e3660046112c1565b6102ff565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0015b60405180910390f35b61013361017d3660046112c1565b610441565b6101956101903660046112c1565b610545565b60405160ff9091168152602001610166565b6101336101b536600461131b565b61066c565b6101cd6101c8366004611387565b6107b4565b005b6101cd6101dd366004611418565b610847565b6101336101f036600461131b565b6109a1565b6102086102033660046112c1565b610a96565b6040516001600160a01b039091168152602001610166565b6101cd610bb4565b61023b6102363660046112c1565b610bc8565b60405161ffff9091168152602001610166565b61026161025c3660046112c1565b610ce6565b60405161016691906114a8565b6000546001600160a01b0316610208565b61020861028d36600461154a565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6102086102c13660046115da565b610e0c565b6102616102d43660046112c1565b610f39565b6102086102e73660046112c1565b611037565b6101cd6102fa366004611626565b611131565b6000806000806000868660006001600160a01b03166001838360405161032692919061164a565b908152604051908190036020019020546001600160a01b03160361038a5760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b60448201526064015b60405180910390fd5b6001898960405161039c92919061164a565b90815260408051918290036020018220547f8f6b4d9100000000000000000000000000000000000000000000000000000000835290516001600160a01b0390911691638f6b4d919160048083019260a09291908290030181865afa158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c919061165a565b939d929c50909a509850909650945050505050565b6000806000806000868660006001600160a01b03166001838360405161046892919061164a565b908152604051908190036020019020546001600160a01b0316036104c75760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b600189896040516104d992919061164a565b90815260408051918290036020018220547ffeaf968c00000000000000000000000000000000000000000000000000000000835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa158015610408573d6000803e3d6000fd5b6000828260006001600160a01b03166001838360405161056692919061164a565b908152604051908190036020019020546001600160a01b0316036105c55760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b600185856040516105d792919061164a565b9081526040805160209281900383018120547f313ce56700000000000000000000000000000000000000000000000000000000825291516001600160a01b039092169263313ce567926004808401938290030181865afa15801561063f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066391906116b2565b95945050505050565b6000806000806000878760006001600160a01b03166001838360405161069392919061164a565b908152604051908190036020019020546001600160a01b0316036106f25760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018a8a60405161070492919061164a565b908152604051908190036020018120547f6001ac5300000000000000000000000000000000000000000000000000000000825269ffffffffffffffffffff8a1660048301526001600160a01b031690636001ac53906024015b60a060405180830381865afa15801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e919061165a565b939e929d50909b50995090975095505050505050565b6107bc6111c1565b80600184846040516107cf92919061164a565b90815260405190819003602001812080546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff19909116179055908216907f6e66dfbddd63f8dd7a6ce15fe3c6a9ec6bd783ae794220ecb304d0a976bdec4b9061083a90869086906116fe565b60405180910390a2505050565b61084f6111c1565b821580159061085d57508281145b6108a95760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e707574000000000000000000000000000000000000006044820152606401610381565b60005b8381101561095d578282828181106108c6576108c661171a565b90506020020160208101906108db9190611626565b60018686848181106108ef576108ef61171a565b90506020028101906109019190611730565b60405161090f92919061164a565b90815260405190819003602001902080546001600160a01b039290921673ffffffffffffffffffffffffffffffffffffffff199092169190911790558061095581611777565b9150506108ac565b507f7316a59eb30bf99f25123ad5648d6c035704594815e30bea28f02853d49dc3108484848460405161099394939291906117e7565b60405180910390a150505050565b6000806000806000878760006001600160a01b0316600183836040516109c892919061164a565b908152604051908190036020019020546001600160a01b031603610a275760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018a8a604051610a3992919061164a565b908152604051908190036020018120547f9a6fc8f500000000000000000000000000000000000000000000000000000000825269ffffffffffffffffffff8a1660048301526001600160a01b031690639a6fc8f59060240161075d565b6000828260006001600160a01b031660018383604051610ab792919061164a565b908152604051908190036020019020546001600160a01b031603610b165760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018585604051610b2892919061164a565b9081526040805160209281900383018120547fe8c4be3000000000000000000000000000000000000000000000000000000000825291516001600160a01b039092169263e8c4be30926004808401938290030181865afa158015610b90573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106639190611899565b610bbc6111c1565b610bc6600061121b565b565b6000828260006001600160a01b031660018383604051610be992919061164a565b908152604051908190036020019020546001600160a01b031603610c485760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018585604051610c5a92919061164a565b9081526040805160209281900383018120547f58303b1000000000000000000000000000000000000000000000000000000000825291516001600160a01b03909216926358303b10926004808401938290030181865afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066391906118b6565b6060828260006001600160a01b031660018383604051610d0792919061164a565b908152604051908190036020019020546001600160a01b031603610d665760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018585604051610d7892919061164a565b90815260408051918290036020018220547f7284e41600000000000000000000000000000000000000000000000000000000835290516001600160a01b0390911691637284e4169160048083019260009291908290030181865afa158015610de4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261066391908101906118d3565b6000838360006001600160a01b031660018383604051610e2d92919061164a565b908152604051908190036020019020546001600160a01b031603610e8c5760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018686604051610e9e92919061164a565b908152604051908190036020018120547fc159730400000000000000000000000000000000000000000000000000000000825261ffff861660048301526001600160a01b03169063c159730490602401602060405180830381865afa158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190611899565b9695505050505050565b6060828260006001600160a01b031660018383604051610f5a92919061164a565b908152604051908190036020019020546001600160a01b031603610fb95760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018585604051610fcb92919061164a565b90815260408051918290036020018220547f181f5a7700000000000000000000000000000000000000000000000000000000835290516001600160a01b039091169163181f5a779160048083019260009291908290030181865afa158015610de4573d6000803e3d6000fd5b6000828260006001600160a01b03166001838360405161105892919061164a565b908152604051908190036020019020546001600160a01b0316036110b75760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b600185856040516110c992919061164a565b9081526040805160209281900383018120547f245a7bfc00000000000000000000000000000000000000000000000000000000825291516001600160a01b039092169263245a7bfc926004808401938290030181865afa158015610b90573d6000803e3d6000fd5b6111396111c1565b6001600160a01b0381166111b55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610381565b6111be8161121b565b50565b6000546001600160a01b03163314610bc65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610381565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008083601f84011261128a57600080fd5b50813567ffffffffffffffff8111156112a257600080fd5b6020830191508360208285010111156112ba57600080fd5b9250929050565b600080602083850312156112d457600080fd5b823567ffffffffffffffff8111156112eb57600080fd5b6112f785828601611278565b90969095509350505050565b69ffffffffffffffffffff811681146111be57600080fd5b60008060006040848603121561133057600080fd5b833567ffffffffffffffff81111561134757600080fd5b61135386828701611278565b909450925050602084013561136781611303565b809150509250925092565b6001600160a01b03811681146111be57600080fd5b60008060006040848603121561139c57600080fd5b833567ffffffffffffffff8111156113b357600080fd5b6113bf86828701611278565b909450925050602084013561136781611372565b60008083601f8401126113e557600080fd5b50813567ffffffffffffffff8111156113fd57600080fd5b6020830191508360208260051b85010111156112ba57600080fd5b6000806000806040858703121561142e57600080fd5b843567ffffffffffffffff8082111561144657600080fd5b611452888389016113d3565b9096509450602087013591508082111561146b57600080fd5b50611478878288016113d3565b95989497509550505050565b60005b8381101561149f578181015183820152602001611487565b50506000910152565b60208152600082518060208401526114c7816040850160208701611484565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561151a5761151a6114db565b604052919050565b600067ffffffffffffffff82111561153c5761153c6114db565b50601f01601f191660200190565b60006020828403121561155c57600080fd5b813567ffffffffffffffff81111561157357600080fd5b8201601f8101841361158457600080fd5b803561159761159282611522565b6114f1565b8181528560208385010111156115ac57600080fd5b81602084016020830137600091810160200191909152949350505050565b61ffff811681146111be57600080fd5b6000806000604084860312156115ef57600080fd5b833567ffffffffffffffff81111561160657600080fd5b61161286828701611278565b9094509250506020840135611367816115ca565b60006020828403121561163857600080fd5b813561164381611372565b9392505050565b8183823760009101908152919050565b600080600080600060a0868803121561167257600080fd5b855161167d81611303565b8095505060208601519350604086015192506060860151915060808601516116a481611303565b809150509295509295909350565b6000602082840312156116c457600080fd5b815160ff8116811461164357600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006117126020830184866116d5565b949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261174757600080fd5b83018035915067ffffffffffffffff82111561176257600080fd5b6020019150368190038213156112ba57600080fd5b60006001820161179757634e487b7160e01b600052601160045260246000fd5b5060010190565b8183526000602080850194508260005b858110156117dc5781356117c181611372565b6001600160a01b0316875295820195908201906001016117ae565b509495945050505050565b6040808252810184905260006060600586901b8301810190830187835b8881101561187857858403605f190183528135368b9003601e1901811261182a57600080fd5b8a01602081810191359067ffffffffffffffff82111561184957600080fd5b81360383131561185857600080fd5b6118638783856116d5565b96509485019493909301925050600101611804565b505050828103602084015261188e81858761179e565b979650505050505050565b6000602082840312156118ab57600080fd5b815161164381611372565b6000602082840312156118c857600080fd5b8151611643816115ca565b6000602082840312156118e557600080fd5b815167ffffffffffffffff8111156118fc57600080fd5b8201601f8101841361190d57600080fd5b805161191b61159282611522565b81815285602083850101111561193057600080fd5b61066382602083016020860161148456fea2646970667358221220a4f43e8acc8645410ed0c0d2a28eabe345c9feff28a585d65372738b1ffc6dd664736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c8063715018a6116100b2578063a9a4656f11610081578063bdadb4fb11610066578063bdadb4fb146102c6578063cf5fd0e8146102d9578063f2fde38b146102ec57600080fd5b8063a9a4656f1461027f578063bc8d6a87146102b357600080fd5b8063715018a6146102205780637fd7086914610228578063882551991461024e5780638da5cb5b1461026e57600080fd5b80634b9ab850116100ee5780634b9ab850146101ba57806355f90e02146101cf5780636471a680146101e257806370eb92e0146101f557600080fd5b80630b25e0081461012057806333f98c771461016f5780633b2b3204146101825780633d3d3cc4146101a7575b600080fd5b61013361012e3660046112c1565b6102ff565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0015b60405180910390f35b61013361017d3660046112c1565b610441565b6101956101903660046112c1565b610545565b60405160ff9091168152602001610166565b6101336101b536600461131b565b61066c565b6101cd6101c8366004611387565b6107b4565b005b6101cd6101dd366004611418565b610847565b6101336101f036600461131b565b6109a1565b6102086102033660046112c1565b610a96565b6040516001600160a01b039091168152602001610166565b6101cd610bb4565b61023b6102363660046112c1565b610bc8565b60405161ffff9091168152602001610166565b61026161025c3660046112c1565b610ce6565b60405161016691906114a8565b6000546001600160a01b0316610208565b61020861028d36600461154a565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6102086102c13660046115da565b610e0c565b6102616102d43660046112c1565b610f39565b6102086102e73660046112c1565b611037565b6101cd6102fa366004611626565b611131565b6000806000806000868660006001600160a01b03166001838360405161032692919061164a565b908152604051908190036020019020546001600160a01b03160361038a5760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b60448201526064015b60405180910390fd5b6001898960405161039c92919061164a565b90815260408051918290036020018220547f8f6b4d9100000000000000000000000000000000000000000000000000000000835290516001600160a01b0390911691638f6b4d919160048083019260a09291908290030181865afa158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c919061165a565b939d929c50909a509850909650945050505050565b6000806000806000868660006001600160a01b03166001838360405161046892919061164a565b908152604051908190036020019020546001600160a01b0316036104c75760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b600189896040516104d992919061164a565b90815260408051918290036020018220547ffeaf968c00000000000000000000000000000000000000000000000000000000835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa158015610408573d6000803e3d6000fd5b6000828260006001600160a01b03166001838360405161056692919061164a565b908152604051908190036020019020546001600160a01b0316036105c55760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b600185856040516105d792919061164a565b9081526040805160209281900383018120547f313ce56700000000000000000000000000000000000000000000000000000000825291516001600160a01b039092169263313ce567926004808401938290030181865afa15801561063f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066391906116b2565b95945050505050565b6000806000806000878760006001600160a01b03166001838360405161069392919061164a565b908152604051908190036020019020546001600160a01b0316036106f25760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018a8a60405161070492919061164a565b908152604051908190036020018120547f6001ac5300000000000000000000000000000000000000000000000000000000825269ffffffffffffffffffff8a1660048301526001600160a01b031690636001ac53906024015b60a060405180830381865afa15801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e919061165a565b939e929d50909b50995090975095505050505050565b6107bc6111c1565b80600184846040516107cf92919061164a565b90815260405190819003602001812080546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff19909116179055908216907f6e66dfbddd63f8dd7a6ce15fe3c6a9ec6bd783ae794220ecb304d0a976bdec4b9061083a90869086906116fe565b60405180910390a2505050565b61084f6111c1565b821580159061085d57508281145b6108a95760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e707574000000000000000000000000000000000000006044820152606401610381565b60005b8381101561095d578282828181106108c6576108c661171a565b90506020020160208101906108db9190611626565b60018686848181106108ef576108ef61171a565b90506020028101906109019190611730565b60405161090f92919061164a565b90815260405190819003602001902080546001600160a01b039290921673ffffffffffffffffffffffffffffffffffffffff199092169190911790558061095581611777565b9150506108ac565b507f7316a59eb30bf99f25123ad5648d6c035704594815e30bea28f02853d49dc3108484848460405161099394939291906117e7565b60405180910390a150505050565b6000806000806000878760006001600160a01b0316600183836040516109c892919061164a565b908152604051908190036020019020546001600160a01b031603610a275760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018a8a604051610a3992919061164a565b908152604051908190036020018120547f9a6fc8f500000000000000000000000000000000000000000000000000000000825269ffffffffffffffffffff8a1660048301526001600160a01b031690639a6fc8f59060240161075d565b6000828260006001600160a01b031660018383604051610ab792919061164a565b908152604051908190036020019020546001600160a01b031603610b165760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018585604051610b2892919061164a565b9081526040805160209281900383018120547fe8c4be3000000000000000000000000000000000000000000000000000000000825291516001600160a01b039092169263e8c4be30926004808401938290030181865afa158015610b90573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106639190611899565b610bbc6111c1565b610bc6600061121b565b565b6000828260006001600160a01b031660018383604051610be992919061164a565b908152604051908190036020019020546001600160a01b031603610c485760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018585604051610c5a92919061164a565b9081526040805160209281900383018120547f58303b1000000000000000000000000000000000000000000000000000000000825291516001600160a01b03909216926358303b10926004808401938290030181865afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066391906118b6565b6060828260006001600160a01b031660018383604051610d0792919061164a565b908152604051908190036020019020546001600160a01b031603610d665760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018585604051610d7892919061164a565b90815260408051918290036020018220547f7284e41600000000000000000000000000000000000000000000000000000000835290516001600160a01b0390911691637284e4169160048083019260009291908290030181865afa158015610de4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261066391908101906118d3565b6000838360006001600160a01b031660018383604051610e2d92919061164a565b908152604051908190036020019020546001600160a01b031603610e8c5760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018686604051610e9e92919061164a565b908152604051908190036020018120547fc159730400000000000000000000000000000000000000000000000000000000825261ffff861660048301526001600160a01b03169063c159730490602401602060405180830381865afa158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190611899565b9695505050505050565b6060828260006001600160a01b031660018383604051610f5a92919061164a565b908152604051908190036020019020546001600160a01b031603610fb95760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b60018585604051610fcb92919061164a565b90815260408051918290036020018220547f181f5a7700000000000000000000000000000000000000000000000000000000835290516001600160a01b039091169163181f5a779160048083019260009291908290030181865afa158015610de4573d6000803e3d6000fd5b6000828260006001600160a01b03166001838360405161105892919061164a565b908152604051908190036020019020546001600160a01b0316036110b75760405162461bcd60e51b81526020600482015260166024820152753332b2b2103737ba1039b2ba1034b7103937baba32b960511b6044820152606401610381565b600185856040516110c992919061164a565b9081526040805160209281900383018120547f245a7bfc00000000000000000000000000000000000000000000000000000000825291516001600160a01b039092169263245a7bfc926004808401938290030181865afa158015610b90573d6000803e3d6000fd5b6111396111c1565b6001600160a01b0381166111b55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610381565b6111be8161121b565b50565b6000546001600160a01b03163314610bc65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610381565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008083601f84011261128a57600080fd5b50813567ffffffffffffffff8111156112a257600080fd5b6020830191508360208285010111156112ba57600080fd5b9250929050565b600080602083850312156112d457600080fd5b823567ffffffffffffffff8111156112eb57600080fd5b6112f785828601611278565b90969095509350505050565b69ffffffffffffffffffff811681146111be57600080fd5b60008060006040848603121561133057600080fd5b833567ffffffffffffffff81111561134757600080fd5b61135386828701611278565b909450925050602084013561136781611303565b809150509250925092565b6001600160a01b03811681146111be57600080fd5b60008060006040848603121561139c57600080fd5b833567ffffffffffffffff8111156113b357600080fd5b6113bf86828701611278565b909450925050602084013561136781611372565b60008083601f8401126113e557600080fd5b50813567ffffffffffffffff8111156113fd57600080fd5b6020830191508360208260051b85010111156112ba57600080fd5b6000806000806040858703121561142e57600080fd5b843567ffffffffffffffff8082111561144657600080fd5b611452888389016113d3565b9096509450602087013591508082111561146b57600080fd5b50611478878288016113d3565b95989497509550505050565b60005b8381101561149f578181015183820152602001611487565b50506000910152565b60208152600082518060208401526114c7816040850160208701611484565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561151a5761151a6114db565b604052919050565b600067ffffffffffffffff82111561153c5761153c6114db565b50601f01601f191660200190565b60006020828403121561155c57600080fd5b813567ffffffffffffffff81111561157357600080fd5b8201601f8101841361158457600080fd5b803561159761159282611522565b6114f1565b8181528560208385010111156115ac57600080fd5b81602084016020830137600091810160200191909152949350505050565b61ffff811681146111be57600080fd5b6000806000604084860312156115ef57600080fd5b833567ffffffffffffffff81111561160657600080fd5b61161286828701611278565b9094509250506020840135611367816115ca565b60006020828403121561163857600080fd5b813561164381611372565b9392505050565b8183823760009101908152919050565b600080600080600060a0868803121561167257600080fd5b855161167d81611303565b8095505060208601519350604086015192506060860151915060808601516116a481611303565b809150509295509295909350565b6000602082840312156116c457600080fd5b815160ff8116811461164357600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006117126020830184866116d5565b949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261174757600080fd5b83018035915067ffffffffffffffff82111561176257600080fd5b6020019150368190038213156112ba57600080fd5b60006001820161179757634e487b7160e01b600052601160045260246000fd5b5060010190565b8183526000602080850194508260005b858110156117dc5781356117c181611372565b6001600160a01b0316875295820195908201906001016117ae565b509495945050505050565b6040808252810184905260006060600586901b8301810190830187835b8881101561187857858403605f190183528135368b9003601e1901811261182a57600080fd5b8a01602081810191359067ffffffffffffffff82111561184957600080fd5b81360383131561185857600080fd5b6118638783856116d5565b96509485019493909301925050600101611804565b505050828103602084015261188e81858761179e565b979650505050505050565b6000602082840312156118ab57600080fd5b815161164381611372565b6000602082840312156118c857600080fd5b8151611643816115ca565b6000602082840312156118e557600080fd5b815167ffffffffffffffff8111156118fc57600080fd5b8201601f8101841361190d57600080fd5b805161191b61159282611522565b81815285602083850101111561193057600080fd5b61066382602083016020860161148456fea2646970667358221220a4f43e8acc8645410ed0c0d2a28eabe345c9feff28a585d65372738b1ffc6dd664736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoundData(string,uint80)": {
        "details": "Note that answer and updatedAt may change between queries.",
        "params": {
          "feedName": "the name of the datafeed (ex. BTC-USDT)",
          "roundId": "the requested round ID as presented through the proxy, this is made up of the aggregator's round ID with the phase ID encoded in the two highest order bytes"
        },
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)",
          "id": "is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "latestRoundData(string)": {
        "details": "Note that answer and updatedAt may change between queries.",
        "params": {
          "feedName": "the name of the datafeed (ex. BTC-USDT)"
        },
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)",
          "id": "is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "phaseAggregators(string,uint16)": {
        "params": {
          "phaseId_": "uint16"
        }
      },
      "proposedGetRoundData(string,uint80)": {
        "params": {
          "feedName": "the name of the datafeed (ex. BTC-USDT)",
          "roundId": "the round ID to retrieve the round data for"
        },
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed.",
          "id": "is the round ID for which data was retrieved",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "proposedLatestRoundData(string)": {
        "params": {
          "feedName": "the name of the datafeed (ex. BTC-USDT)"
        },
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed.",
          "id": "is the round ID for which data was retrieved",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Orakl Network Aggregator Router",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "aggregator(string)": {
        "notice": "returns the current phase's aggregator address."
      },
      "decimals(string)": {
        "notice": "represents the number of decimals the aggregator responses represent."
      },
      "description(string)": {
        "notice": "returns the description of the aggregator the proxy points to."
      },
      "getRoundData(string,uint80)": {
        "notice": "get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."
      },
      "latestRoundData(string)": {
        "notice": "get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."
      },
      "phaseAggregators(string,uint16)": {
        "notice": "return a phase aggregator using the phaseId"
      },
      "phaseId(string)": {
        "notice": "returns the current phase's ID."
      },
      "proposedAggregator(string)": {
        "notice": "returns the current proposed aggregator"
      },
      "proposedGetRoundData(string,uint80)": {
        "notice": "Used if an aggregator contract has been proposed."
      },
      "proposedLatestRoundData(string)": {
        "notice": "Used if an aggregator contract has been proposed."
      },
      "typeAndVersion(string)": {
        "notice": "the type and version of aggregator to which proxy points to."
      }
    },
    "notice": "The `AggregatorRouter` is the main contract needed to read Orakl Network Data Feeds. The interface is similar to the `AggregatorProxy` contract but requires an extra string parameter called `feedName`. The supported `feedName` parameters are a combination of base and quote currencies (e.g. BTC-USDT for Bitcoin's price in USDT stablecoin). You can find all supported tokens at https://config.orakl.network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/v0.1/AggregatorRouter.sol:AggregatorRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3181,
        "contract": "src/v0.1/AggregatorRouter.sol:AggregatorRouter",
        "label": "aggregatorProxies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}